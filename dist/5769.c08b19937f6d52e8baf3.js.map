{"version":3,"file":"5769.c08b19937f6d52e8baf3.js","mappings":"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","sources":["webpack://wai/./src/global/actions/ui/localSearch.ts","webpack://wai/./src/global/actions/ui/chats.ts","webpack://wai/./src/worker/share/utils/stringParse.ts","webpack://wai/./src/global/actions/ui/messages.ts","webpack://wai/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://wai/./src/worker/msg/msgHelper.ts","webpack://wai/./src/global/actions/ui/globalSearch.ts","webpack://wai/./src/global/actions/ui/stickerSearch.ts","webpack://wai/./src/global/actions/ui/users.ts","webpack://wai/./src/util/updateIcon.ts","webpack://wai/./src/util/updatePageTitle.ts","webpack://wai/./src/global/actions/ui/misc.ts","webpack://wai/./src/global/actions/ui/payments.ts","webpack://wai/./src/global/actions/ui/mediaViewer.ts","webpack://wai/./src/global/actions/ui/passcode.ts","webpack://wai/./src/global/actions/api/messages.ts","webpack://wai/./src/global/actions/api/symbols.ts","webpack://wai/./src/global/actions/api/globalSearch.ts","webpack://wai/./src/global/actions/api/localSearch.ts","webpack://wai/./src/global/actions/api/management.ts","webpack://wai/./src/global/actions/api/sync.ts","webpack://wai/./src/global/actions/api/accounts.ts","webpack://wai/./src/global/actions/api/users.ts","webpack://wai/./src/global/reducers/bots.ts","webpack://wai/./src/util/PopupManager.ts","webpack://wai/./src/global/actions/api/bots.ts","webpack://wai/./src/global/actions/api/payments.ts","webpack://wai/./src/global/actions/api/twoFaSettings.ts","webpack://wai/./src/util/requestQuery.ts","webpack://wai/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://wai/./src/global/reducers/reactions.ts","webpack://wai/./src/global/actions/api/reactions.ts","webpack://wai/./src/global/actions/api/statistics.ts","webpack://wai/./src/global/actions/apiUpdaters/chats.ts","webpack://wai/./src/global/actions/apiUpdaters/messages.ts","webpack://wai/./src/global/actions/apiUpdaters/users.ts","webpack://wai/./src/global/actions/apiUpdaters/symbols.ts","webpack://wai/./src/global/actions/apiUpdaters/misc.ts","webpack://wai/./src/global/actions/apiUpdaters/settings.ts","webpack://wai/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://wai/./src/global/actions/apiUpdaters/calls.ts","webpack://wai/./src/global/actions/apiUpdaters/payments.ts","webpack://wai/./src/hooks/useBeforeUnload.ts","webpack://wai/./src/hooks/usePreventPinchZoomGesture.ts","webpack://wai/./src/components/common/StickerSetModal.async.tsx","webpack://wai/./src/components/common/UnreadCounter.tsx","webpack://wai/./src/hooks/useConnectionStatus.ts","webpack://wai/./src/hooks/useBrowserOnline.ts","webpack://wai/./src/components/left/ConnectionStatusOverlay.tsx","webpack://wai/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://wai/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://wai/./src/components/left/main/StatusButton.tsx","webpack://wai/./src/components/left/main/LeftMainHeader.tsx","webpack://wai/./src/util/permanentWebVersion.ts","webpack://wai/./src/components/left/main/ChatFolders.tsx","webpack://wai/./src/components/left/search/LeftSearch.async.tsx","webpack://wai/./src/components/left/main/ContactList.async.tsx","webpack://wai/./src/components/left/NewChatButton.tsx","webpack://wai/./src/components/left/main/LeftMain.tsx","webpack://wai/./src/components/left/settings/Settings.async.tsx","webpack://wai/./src/components/left/newChat/NewChat.async.tsx","webpack://wai/./src/components/left/ArchivedChats.async.tsx","webpack://wai/./src/components/left/LeftColumn.tsx","webpack://wai/./src/hooks/useResize.ts","webpack://wai/./src/components/middle/PinnedMessageNavigation.tsx","webpack://wai/./src/components/middle/HeaderPinnedMessage.tsx","webpack://wai/./src/util/mediaSession.ts","webpack://wai/./src/hooks/useAudioPlayer.ts","webpack://wai/./src/hooks/useMessageMediaMetadata.ts","webpack://wai/./src/components/middle/AudioPlayer.tsx","webpack://wai/./src/components/middle/ChatReportPanel.tsx","webpack://wai/./src/components/middle/MiddleHeader.tsx","webpack://wai/./src/components/middle/helpers/groupMessages.ts","webpack://wai/./src/components/middle/hooks/useStickyDates.ts","webpack://wai/./src/components/middle/hooks/useScrollHooks.ts","webpack://wai/./src/components/middle/hooks/useMessageObservers.ts","webpack://wai/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://wai/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://wai/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://wai/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://wai/./src/util/languageDetection.ts","webpack://wai/./src/util/Deferred.ts","webpack://wai/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://wai/./src/components/middle/ActionMessage.tsx","webpack://wai/./src/components/common/EmbeddedMessage.tsx","webpack://wai/./src/components/common/Document.tsx","webpack://wai/./src/components/common/Audio.tsx","webpack://wai/./src/components/common/helpers/waveform.ts","webpack://wai/./src/util/waveform.ts","webpack://wai/./src/components/middle/message/MessageMeta.tsx","webpack://wai/./src/components/middle/message/Sticker.tsx","webpack://wai/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://wai/./src/components/middle/message/AnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://wai/./src/components/middle/message/Video.tsx","webpack://wai/./src/components/middle/message/Contact.tsx","webpack://wai/./src/components/middle/message/PollOption.tsx","webpack://wai/./src/components/middle/message/Poll.tsx","webpack://wai/./src/components/middle/message/WebPage.tsx","webpack://wai/./src/components/middle/message/Invoice.tsx","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://wai/./src/util/map.ts","webpack://wai/./src/components/middle/message/Location.tsx","webpack://wai/./src/components/middle/message/Game.tsx","webpack://wai/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://wai/./src/components/middle/message/Album.tsx","webpack://wai/./src/components/middle/message/RoundVideo.tsx","webpack://wai/./src/components/middle/message/InlineButtons.tsx","webpack://wai/./src/components/middle/message/CommentButton.tsx","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/ReactionButton.tsx","webpack://wai/./src/components/middle/message/Reactions.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://wai/./src/components/common/TopicChip.tsx","webpack://wai/./src/components/common/TopicChip.module.scss?5208","webpack://wai/./src/components/middle/message/Message.tsx","webpack://wai/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://wai/./src/hooks/useTextLanguage.ts","webpack://wai/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://wai/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://wai/./src/components/common/AboutAdsModal.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessage.tsx","webpack://wai/./src/components/middle/MessageListContent.tsx","webpack://wai/./src/components/middle/ContactGreeting.tsx","webpack://wai/./src/components/middle/NoMessages.tsx","webpack://wai/./src/components/middle/MessageList.tsx","webpack://wai/./src/hooks/useNativeCopySelectedMessages.ts","webpack://wai/./src/components/middle/ScrollDownButton.tsx","webpack://wai/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://wai/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://wai/./src/components/middle/FloatingActionButtons.tsx","webpack://wai/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://wai/./src/util/audio.ts","webpack://wai/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://wai/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://wai/./src/util/voiceRecording.ts","webpack://wai/./src/lib/cleanDocsHtml.ts","webpack://wai/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://wai/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://wai/./src/components/middle/composer/hooks/useDraft.ts","webpack://wai/./src/components/common/DeleteMessageModal.async.tsx","webpack://wai/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://wai/./src/components/middle/composer/AttachBotIcon.tsx","webpack://wai/./src/components/middle/composer/AttachBotItem.tsx","webpack://wai/./src/components/middle/composer/AttachMenu.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://wai/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://wai/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://wai/./src/components/middle/composer/PollModal.async.tsx","webpack://wai/./src/components/middle/composer/DropArea.async.tsx","webpack://wai/./src/components/middle/composer/WebPagePreview.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://wai/./src/components/middle/composer/BotMenuButton.tsx","webpack://wai/./src/components/middle/composer/Composer.tsx","webpack://wai/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://wai/./src/components/middle/composer/hooks/useEditing.ts","webpack://wai/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://wai/./src/components/middle/MobileSearch.async.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://wai/./src/components/common/SeenByModal.async.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://wai/./src/components/middle/ReactorListModal.async.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.async.tsx","webpack://wai/./src/components/middle/MiddleColumn.tsx","webpack://wai/./src/hooks/useCustomBackground.ts","webpack://wai/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://wai/./src/components/right/RightHeader.tsx","webpack://wai/./src/components/left/search/helpers/getSenderName.ts","webpack://wai/./src/components/right/hooks/useProfileViewportIds.ts","webpack://wai/./src/components/right/hooks/useProfileState.ts","webpack://wai/./src/components/common/Media.tsx","webpack://wai/./src/components/common/WebLink.tsx","webpack://wai/./src/components/right/Profile.tsx","webpack://wai/./src/components/right/hooks/useTransitionFixes.ts","webpack://wai/./src/hooks/useCacheBuster.ts","webpack://wai/./src/components/right/RightSearch.async.tsx","webpack://wai/./src/components/right/management/Management.async.tsx","webpack://wai/./src/components/right/statistics/Statistics.async.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://wai/./src/components/right/StickerSearch.async.tsx","webpack://wai/./src/components/right/GifSearch.async.tsx","webpack://wai/./src/components/right/PollResults.async.tsx","webpack://wai/./src/components/right/AddChatMembers.tsx","webpack://wai/./src/components/right/CreateTopic.async.tsx","webpack://wai/./src/components/right/EditTopic.async.tsx","webpack://wai/./src/components/right/RightColumn.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://wai/./src/util/download.ts","webpack://wai/./src/components/main/DownloadManager.tsx","webpack://wai/./src/components/main/GameModal.tsx","webpack://wai/./src/components/main/Notifications.async.tsx","webpack://wai/./src/components/main/Dialogs.async.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://wai/./src/components/main/SafeLinkModal.async.tsx","webpack://wai/./src/components/main/HistoryCalendar.async.tsx","webpack://wai/./src/components/calls/group/GroupCall.async.tsx","webpack://wai/./src/components/calls/ActiveCallHeader.async.tsx","webpack://wai/./src/components/calls/phone/PhoneCall.async.tsx","webpack://wai/./src/components/middle/MessageListHistoryHandler.tsx","webpack://wai/./src/components/main/NewContactModal.async.tsx","webpack://wai/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://wai/./src/components/main/WebAppModal.async.tsx","webpack://wai/./src/components/main/BotTrustModal.async.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.async.tsx","webpack://wai/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://wai/./src/components/main/ConfettiContainer.tsx","webpack://wai/./src/components/main/UrlAuthModal.async.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://wai/./src/components/payment/PaymentModal.async.tsx","webpack://wai/./src/components/payment/ReceiptModal.async.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.async.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.async.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://wai/./src/components/ui/PasswordModal.tsx","webpack://wai/./src/components/common/QrCode.tsx","webpack://wai/./src/components/ui/MnemonicModal.tsx","webpack://wai/./src/components/ui/PickBotModal.tsx","webpack://wai/./src/components/ui/GlobalModal.tsx","webpack://wai/./src/components/main/Main.tsx","webpack://wai/./src/components/main/LockScreen.tsx","webpack://wai/./src/components/main/LockScreen.module.scss?8252","webpack://wai/./src/bundles/main.ts","webpack://wai/./src/global/actions/ui/calls.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import {ApiMessageEntityTypes} from \"../../../api/types\";\n\nexport function parseCodeBlock(text:string,entities?:any[]) {\n  const reg = /```(.*?)\\n([\\s\\S]*?)```/g;\n  if(text.indexOf(\"```\") >= 0 && text.split(\"```\").length % 2 === 0){\n    text =  text+\"```\";\n  }\n  let result = text;\n  let match;\n  let codeBlock = [];\n  let i = 0;\n  let j = 0;\n  while (match = reg.exec(text)) {\n    codeBlock.push({\n      type:ApiMessageEntityTypes.Pre,\n      language: match[1],\n      offset: match.index - 6 * i - j,\n      length: match[2].length\n    });\n    j += match[1].length+1\n    result = result.replace(match[0],  match[2]);\n    ++i;\n  }\n  if(!entities){\n    entities = []\n  }\n  return {\n    text:result.endsWith(\"```\") ? result.substring(0,result.indexOf(\"```\")): result,\n    entities:[\n      ...codeBlock,\n      ...entities\n    ]\n  };\n}\n\nfunction parseMentionName(text:string,userNames:Record<string, string> ={}) {\n  const regex = /@\\w+/g;\n  let match;\n  let result = [];\n  while ((match = regex.exec(text)) !== null) {\n    if(userNames[match[0]]){\n      result.push({\n        type:ApiMessageEntityTypes.MentionName,\n        userId:userNames[match[0]],\n        offset: match.index,\n        length: match[0].length\n      });\n    }\n  }\n  return result\n}\nexport function parseCmd(text: string, commands: string[]) {\n  if (commands.length === 0) return [];\n  const regex = new RegExp(`(?<=\\\\/)(${commands.join('|')})\\\\b`, 'g');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    matches.push({\n      type: 'MessageEntityBotCommand',\n      offset: match.index-1,\n      length: match[0].length+1\n    });\n  }\n  return matches;\n}\n\nexport function parseEntities(text:string,commands:string[],userNames:Record<string, string> ={}){\n  return [\n    ...parseCmd(text,commands),\n    ...parseMentionName(text,userNames),\n  ]\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiMessage} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport {FocusDirection} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabState,} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport {IS_TOUCH_ENV} from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelectAll,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n  updateFocusedMessageReached,\n} from '../../reducers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectReplyingToId,\n  selectReplyStack,\n  selectRequestedTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport {compact, findLast} from '../../../util/iteratees';\nimport {getServerTime} from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport {getMessageSummaryText, getSenderTitle} from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport {copyHtmlToClipboard} from '../../../util/clipboard';\nimport {renderMessageSummaryHtml} from '../../helpers/renderMessageSummaryHtml';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {getIsMobile} from '../../../hooks/useAppLayout';\nimport {uploadMsgList} from \"../../../worker/msg/msgHelper\";\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('onSpeak', (global, actions, payload): ActionReturnType => {\n  const { messageId,chatId, tabId = getCurrentTabId() } = payload;\n  const utterance = new SpeechSynthesisUtterance();\n  var selectedText = \"\";\n  if (window.getSelection) {\n    selectedText = window.getSelection().toString();\n  } else if (document.selection && document.selection.type != \"Control\") {\n    selectedText = document.selection.createRange().text;\n  }\n  if(!selectedText){\n    const message = selectChatMessage(global,chatId,messageId)\n    if(message?.content.text?.text){\n      selectedText = message!.content!.text!.text\n    }\n  }\n  if(selectedText){\n    utterance.lang = 'zh-CN';\n    utterance.text = selectedText\n    speechSynthesis.speak(utterance)\n  }\n})\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n  const messages = selectChatMessages(global,chatId);\n  const {content} = messages[lastOwnEditableMessageId]\n  if(content.text && content.text){\n    actions.saveDraft({\n      chatId, threadId,\n      draft:{\n        text:content.text.text,\n        entities:content.text.entities\n      }\n      , shouldForce:true,\n    })\n    // return replaceThreadParam(global, chatId, threadId, 'editingId', {text:lastOwnEditableMessageId.toString()});\n  }\n\n  // return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\n\naddActionHandler('toggleMessageSelectAll', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n  return toggleMessageSelectAll(global, chatId, tabId);\n});\n\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('saveMsgToCloud', async (global, actions, payload): ActionReturnType => {\n  let { chatId,msgId,tabId = getCurrentTabId() } = payload || {};\n  let messageIds = []\n  if(chatId){\n    messageIds = [msgId]\n  }else{\n    const tabState = selectTabState(global, tabId);\n\n    if (!tabState.selectedMessages) {\n      return;\n    }\n    chatId =tabState.selectedMessages.chatId;\n    messageIds =tabState.selectedMessages.messageIds;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId)\n  if (!chatMessages) return;\n\n  if(tabId){\n    global = getGlobal();\n    global = exitMessageSelectMode(global, tabId);\n    setGlobal(global)\n  }\n\n  const messages = messageIds\n    .map((id) => chatMessages[id!])\n    .sort((message1, message2) => message1.id - message2.id);\n\n  await uploadMsgList(chatId,messages)\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import {ApiBotInfo, ApiMessage} from \"../../api/types\";\nimport {parseCodeBlock, parseEntities} from \"../share/utils/stringParse\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {PbMsg} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {PbMsg_Type} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport {callApiWithPdu} from \"./utils\";\nimport {UploadMsgReq, UploadMsgRes} from \"../../lib/ptp/protobuf/PTPMsg\";\n\nexport function handleMessageTextCode(msgSend: Partial<ApiMessage> | ApiMessage) {\n  if (msgSend.content?.text && msgSend.content.text.text) {\n    const {entities} = msgSend.content.text;\n    // @ts-ignore\n    msgSend.content.text = {\n      ...parseCodeBlock(msgSend.content.text?.text, entities)\n    };\n  }\n  return msgSend;\n}\n\nexport async function uploadMsgList(chatId: string, messagesList: ApiMessage[]) {\n  let global = getGlobal();\n  const messages = messagesList.map(message => Buffer.from(new PbMsg(message as PbMsg_Type).pack()\n    .getPbData()));\n  const res = await callApiWithPdu(new UploadMsgReq({\n    messages,\n    chatId: chatId,\n  }).pack());\n  if (res && res.pdu) {\n    const {userMessageStoreData} = UploadMsgRes.parseMsg(res.pdu);\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      userMessageStoreData: {\n        ...global.userMessageStoreData,\n        [chatId]: userMessageStoreData\n      }\n    });\n    getActions()\n      .showNotification({message: \"保存成功\"});\n  } else {\n    getActions()\n      .showNotification({message: \"保存失败\"});\n  }\n}\n\nexport function handleBotCmdText(msgSend: Partial<ApiMessage> | ApiMessage, botInfo: ApiBotInfo, userNames: Record<string, string> = {}) {\n  const commands: string[] = [];\n  if (botInfo && botInfo.commands) {\n    botInfo.commands.forEach(cmd => commands.push(cmd.command));\n  }\n  if (msgSend.content && msgSend.content.text && msgSend.content.text.text) {\n    if (msgSend.content.text!.entities && msgSend.content.text!.entities.find(e => {\n      // @ts-ignore\n      return e.cipher;\n    })) {\n    } else {\n      // @ts-ignore\n      msgSend.content.text!.entities = [\n        ...msgSend.content.text!.entities || [],\n        ...parseEntities(msgSend.content.text!.text!, commands, userNames)\n      ];\n    }\n  }\n  return msgSend;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: false, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  // storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ActionReturnType, ApiDraft, GlobalState, TabArgs,} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiFormattedText,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../../api/types';\nimport {LoadMoreDirection} from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {IS_IOS} from '../../../util/environment';\nimport {callApi, cancelApiProgress} from '../../../api/gramjs';\nimport {areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  deleteChat,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingIds,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport {debounce, onTickEnd, rafPromise,} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isLocalMessageId,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {translate} from '../../../util/langProvider';\nimport {ensureProtocol} from '../../../util/ensureProtocol';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport Account from \"../../../worker/share/Account\";\nimport {currentTs1000, replaceSubstring} from \"../../../worker/share/utils/utils\";\nimport {blobToBuffer, fetchBlob} from \"../../../util/files\";\nimport {popByteBuffer, toUint8Array, writeBytes, writeInt16} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {resizeImage} from \"../../../util/imageResize\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {getPasswordFromEvent} from '../../../worker/share/utils/password';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\nimport MsgCommandChatGpt from \"../../../worker/msg/MsgCommandChatGpt\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\nlet _userMaxMsgId:number;\n\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n  let { chatId, threadId } = payload || {};\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId, type } = currentMessageList;\n  payload = omit(payload, ['tabId']);\n  const {currentUserId} = getGlobal();\n\n  if(payload.attachments){\n    const hasMessageEntitySpoiler = payload.attachments.find((a:ApiAttachment)=>a.shouldSendAsSpoiler);\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        let {attachments} = payload;\n        for (let i = 0; i < attachments.length; i++) {\n          const attachment = attachments[i];\n          const {blobUrl,mimeType} = attachment;\n          const buf = await blobToBuffer(await fetchBlob(blobUrl));\n          const cipher = await Account.getCurrentAccount()?.encryptData(buf, password)\n          const bb = popByteBuffer();\n          const hintLen = (hint ? hint.length:0)\n          const typeLen = mimeType.length;\n          writeInt16(bb, 2);\n          writeBytes(bb,Buffer.from(\"EN\"));\n          writeInt16(bb, typeLen);\n          writeBytes(bb,Buffer.from(mimeType));\n          writeInt16(bb, hintLen);\n          if(hintLen){\n            writeBytes(bb,Buffer.from(hint||\"\"));\n          }\n          const res = toUint8Array(bb);\n          const blob = new Blob([Buffer.from(res),Buffer.from(cipher!)], { type: attachment.mimeType });\n          payload.attachments[i].encryptUrl = URL.createObjectURL(blob)\n        }\n      }else{\n        return undefined\n      }\n    }\n  }\n  let {attachments} = payload;\n  if(attachments){\n    for (let i = 0; i < attachments.length; i++) {\n      const attachment = attachments[i];\n      const {mimeType,encryptUrl,blobUrl} = attachment;\n      if(mimeType.indexOf(\"image/\") === 0){\n        const size = encryptUrl ? 10 : 40;\n        const quality = 0.1;\n        attachment.thumbBlobUrl = await resizeImage(\n          blobUrl, size,size, 'image/jpeg',quality\n        );\n      }\n    }\n  }\n  if(payload.text && payload.entities && payload.entities!.length > 0){\n    let {entities,text} = payload;\n    const hasMessageEntitySpoiler = entities.find((entity:ApiMessageEntity)=>entity.type === \"MessageEntitySpoiler\");\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        for (let i = 0; i < entities.length; i++) {\n          if(entities[i].type === \"MessageEntitySpoiler\"){\n            const entity = payload.entities[i];\n            const {offset,length} = entity;\n            const cipher = await Account.getCurrentAccount()?.encryptData(Buffer.from(text.substr(offset,length)), password)\n            payload.text = replaceSubstring(payload.text,offset,length,\"x\".repeat(length));\n            //@ts-ignore\n            payload.entities[i] = {...entity,cipher:cipher.toString(\"hex\"),hint}\n          }\n        }\n        console.log(payload)\n      }else{\n        return undefined\n      }\n    }\n  }\n\n  global = getGlobal();\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectUser(global, global.currentUserId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\n// @ts-ignore\naddActionHandler('editMessage', async (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n  await MsgDispatcher.reRunAi(chatId,message.id,text)\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', async (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  try {\n    void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n    const {lastMessage} = global.chats.byId[chatId];\n\n    if(lastMessage && lastMessage.id){\n      if(messageIds.includes(lastMessage.id)){\n        const t = getGlobal()\n        setGlobal({\n          ...t,\n          chats:{\n            ...t.chats,\n            byId:{\n              ...t.chats.byId,\n              [chatId]:{\n                ...t.chats.byId[chatId],\n                lastMessage:undefined\n              }\n            }\n          }\n        })\n      }\n    }\n\n    const editingId = selectEditingId(global, chatId, threadId);\n    if (editingId && messageIds.includes(editingId)) {\n      actions.setEditingId({ messageId: undefined, tabId });\n    }\n  }catch (e){\n    console.error(e)\n  }\n\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat || chatId === UserIdFirstBot) {\n    return;\n  }\n  // await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  global = getGlobal();\n  global = deleteChat(global, chatId);\n  const {chatFolders} = global\n  let {userStoreData} = global;\n\n  Object.values(chatFolders.byId).forEach(folder=>{\n    if(!folder.includedChatIds){\n      folder.includedChatIds = []\n    }\n    if(folder.includedChatIds.includes(chatId)){\n      folder.includedChatIds = folder.includedChatIds.filter(id=>id !== chatId)\n    }\n    if(userStoreData && userStoreData.chatIdsDeleted){\n      if(folder.id === 1){\n        userStoreData.chatIdsDeleted = userStoreData.chatIdsDeleted.filter(id=>id !== UserIdFirstBot)\n      }\n      userStoreData.chatIdsDeleted.forEach(idDeleted=>{\n        if(folder.includedChatIds.includes(idDeleted)){\n          folder.includedChatIds = folder.includedChatIds.filter(id=>id !== idDeleted)\n        }\n      })\n    }\n  })\n\n  if(!userStoreData){\n    userStoreData = {}\n  }\n  if(!userStoreData.chatIdsDeleted){\n    userStoreData.chatIdsDeleted = []\n  }\n  userStoreData.chatIdsDeleted.push(chatId)\n  userStoreData.time = currentTs1000();\n  userStoreData.chatIds = global.chats.listIds.active;\n\n  global = {\n    ...global,\n    userStoreData,\n    chatFolders:{\n      ...global.chatFolders,\n      byId:chatFolders.byId\n    }\n  }\n  userStoreData.chatFolders = JSON.stringify(global.chatFolders)\n  setGlobal(global);\n  callApiWithPdu(new SyncReq({userStoreData:global.userStoreData}).pack()).catch(console.error)\n\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nconst loadViewportMessagesCache:Record<string, boolean> = {};\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  let flag = false;\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].lastViewportIds == undefined){\n    global = safeReplaceViewportIds(global, chatId, threadId, [], tabId);\n    flag = true;\n  }\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].listedIds == undefined){\n    global = updateListedIds(global, chatId, threadId, [])\n    flag = true;\n  }\n\n  if(flag){\n    setGlobal(global)\n  }\n  const lastMessageId = chat?.lastMessage ? chat?.lastMessage.id : 0;\n  const messages1 = selectChatMessages(global,chat!.id)\n\n  let isUp = true;\n  let listedIds1 = selectListedIds(global, chatId, threadId);\n  const ids1:number[]= []\n  listedIds1?.forEach((id:number)=>{\n    if(!isLocalMessageId(id)){\n      ids1.push(id)\n    }\n  })\n\n  if((ids1.length > 1 && ids1[ids1.length - 1] < lastMessageId) || Object.keys(messages1).length === 0){\n    isUp = false;\n  }\n  let result;\n  try{\n    if(loadViewportMessagesCache[chat.id]){\n      return\n    }\n    // console.log(\"[MsgListReq]\",{chatId:chat.id,lastMessageId,isUp})\n    loadViewportMessagesCache[chat.id] = true;\n    result = await callApi('fetchMessages', {\n      chat: selectChat(global, chatId)!,\n      offsetId,\n      addOffset,\n      limit: MESSAGE_LIST_SLICE,\n      threadId,\n      lastMessageId,\n      isUp\n    });\n  }catch (e){\n\n  }\n  setTimeout(()=>{delete loadViewportMessagesCache[chat.id]},1000)\n  if (!result) {\n    return;\n  }\n\n  let {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  if(messages.length > 0 && lastMessageId < messages[messages.length - 1].id){\n    chat.lastMessage = messages[messages.length - 1];\n    if(!chats){\n      chats = []\n    }\n    chats.push(chat)\n  }\n\n  console.log(\"[MsgListRes]\",messages,users)\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nexport function getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?:ApiBotInfo;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? async (progress: number, localMessage: ApiMessage) => {\n    const messageLocalId = localMessage.id;\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : async (progress: number, localMessage: any)=>{\n\n  }\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  const user = selectUser(global,params.chat.id);\n  params.botInfo = user?.fullInfo?.botInfo ? user?.fullInfo?.botInfo:undefined\n\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params, progressCallback);\n    // @ts-ignore\n    if (progressCallback && localId) {\n      uploadProgressCallbacks.delete(localId);\n    }\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload) => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n  const messages:Record<number, ApiFormattedText> = {}\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n    messages[parseInt(id)] = selectChatMessage(global,chatId,id)?.content.text!\n  });\n  setGlobal(global)\n  const apiKey = new MsgCommandChatGpt(chatId!).getChatGptConfig(\"api_key\")\n  callApi('translateText', {\n    chat,\n    apiKey,\n    messageIds,\n    messages,\n    toLanguageCode,\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\nimport type {ApiChat, ApiGlobalMessageSearchType, ApiMessage,} from '../../../api/types';\n\nimport {updateGlobalSearch, updateGlobalSearchFetchingStatus, updateGlobalSearchResults,} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentGlobalSearchQuery,\n  selectTabState,\n  selectUser\n} from '../../selectors';\nimport {timestampPlusDay} from '../../../util/dateFormat';\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {TopCatsReq} from \"../../../lib/ptp/protobuf/PTPSync\";\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('fetchTopCats', async (global, actions, payload) => {\n  const {topCats} = global\n  if(topCats && topCats.cats){\n    topCats.cats.forEach(cat=>{\n      cat.botIds.forEach(botId=>{\n        selectUser(global,botId)\n      })\n    })\n    callApiWithPdu(new TopCatsReq({\n      time:topCats.time || 0,\n    }).pack()).catch(console.error)\n  }\n})\n\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  if (query) {\n    //@ts-ignore\n    void searchThrottled(async () => {\n      global = getGlobal();\n      const chatListIdsActive = global.chats.listIds.active;\n      if(!chatListIdsActive){\n        return;\n      }\n      const messagesList:ApiMessage[] = []\n      const chatIds:string[] = [];\n      const userIds:string[] = [];\n      const userIdList = Object.keys(global.users.byId);\n      for (let i = 0; i < userIdList.length; i++) {\n        const userId = userIdList[i]\n        const user = selectUser(global,userId)\n        if(\n          (\n            (user?.firstName && user?.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.lastName && user?.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.fullInfo && user?.fullInfo.bio && user?.fullInfo.bio.toLowerCase().indexOf(query.toLowerCase()) > -1)\n          )\n        ){\n          if(chatListIdsActive.includes(userId)){\n            chatIds.push(userId)\n          }\n          userIds.push(userId)\n        }\n      }\n\n      for (let i = 0; i < chatListIdsActive.length; i++) {\n        const chatId = chatListIdsActive[i]\n        const chat = selectChat(global,chatId)\n        if(chat && chat?.title.indexOf(query) > -1 && !chatIds.includes(chat?.id)){\n          chatIds.push(chat?.id)\n        }\n        const messages = selectChatMessages(global,chatId)\n        if(messages){\n          const messageIds = Object.keys(messages);\n          for (let i = 0; i < messageIds.length; i++) {\n            const messageId = Number(messageIds[i])\n            const message = selectChatMessage(global,chatId,messageId)\n            if(message?.content && message?.content.text && message?.content.text.text){\n              if(message?.content.text.text.toLowerCase().indexOf(query.toLowerCase()) > -1){\n                messagesList.push(message)\n              }\n            }\n          }\n        }\n\n      }\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if ((userIds.length === 0 && chatIds.length === 0 &&  messagesList.length === 0) || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n      global = updateGlobalSearchResults(global,messagesList,messagesList.length,\"text\",0,tabId)\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds,\n          userIds\n        },\n      }, tabId);\n      setGlobal(global);\n    });\n  }\n\n  //\n  // const { query, tabId = getCurrentTabId() } = payload!;\n  // const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  // if (query && !chatId) {\n  //   void searchThrottled(async () => {\n  //     const result = await callApi('searchChats', { query });\n  //\n  //     global = getGlobal();\n  //     const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  //     if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n  //       global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //       setGlobal(global);\n  //       return;\n  //     }\n  //\n  //     const {\n  //       localChats, localUsers, globalChats, globalUsers,\n  //     } = result;\n  //\n  //     if (localChats.length || globalChats.length) {\n  //       global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  //     }\n  //\n  //     if (localUsers.length || globalUsers.length) {\n  //       global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  //     }\n  //\n  //     global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //     global = updateGlobalSearch(global, {\n  //       localResults: {\n  //         chatIds: localChats.map(({ id }) => id),\n  //         userIds: localUsers.map(({ id }) => id),\n  //       },\n  //       globalResults: {\n  //         ...selectTabState(global, tabId).globalSearch.globalResults,\n  //         chatIds: globalChats.map(({ id }) => id),\n  //         userIds: globalUsers.map(({ id }) => id),\n  //       },\n  //     }, tabId);\n  //\n  //     setGlobal(global);\n  //   });\n  // }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  return\n  console.log(\"searchMessagesGlobal\")\n  // let result: {\n  //   messages: ApiMessage[];\n  //   users: ApiUser[];\n  //   chats: ApiChat[];\n  //   topics?: ApiTopic[];\n  //   totalTopicsCount?: number;\n  //   totalCount: number;\n  //   nextRate: number | undefined;\n  // } | undefined;\n  //   console.log(\"searchMessagesGlobal\")\n  // if (chat) {\n  //   const localResultRequest = callApi('searchMessagesLocal', {\n  //     chat,\n  //     query,\n  //     type,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     offsetId: offsetRate,\n  //     minDate,\n  //     maxDate,\n  //   });\n  //   const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n  //     chat,\n  //     query,\n  //     limit: GLOBAL_TOPIC_SEARCH_SLICE,\n  //   }) : undefined;\n  //\n  //   const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n  //\n  //   if (localResult) {\n  //     const {\n  //       messages, users, totalCount, nextOffsetId,\n  //     } = localResult;\n  //\n  //     const { topics: localTopics, count } = topics || {};\n  //\n  //     result = {\n  //       topics: localTopics,\n  //       totalTopicsCount: count,\n  //       messages,\n  //       users,\n  //       chats: [],\n  //       totalCount,\n  //       nextRate: nextOffsetId,\n  //     };\n  //   }\n  // } else {\n  //   result = await callApi('searchMessagesGlobal', {\n  //     query,\n  //     offsetRate,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     type,\n  //     maxDate,\n  //     minDate,\n  //   });\n  // }\n  //\n  // global = getGlobal();\n  // const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  // if (!result || (query !== '' && query !== currentSearchQuery)) {\n  //   global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  //\n  // const {\n  //   messages, users, chats, totalCount, nextRate,\n  // } = result;\n  //\n  // if (chats.length) {\n  //   global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // }\n  //\n  // if (users.length) {\n  //   global = addUsers(global, buildCollectionByKey(users, 'id'));\n  // }\n  //\n  // if (messages.length) {\n  //   global = addMessages(global, messages);\n  // }\n  //\n  // global = updateGlobalSearchResults(\n  //   global,\n  //   messages,\n  //   totalCount,\n  //   type,\n  //   nextRate,\n  //   tabId,\n  // );\n  //\n  // if (result.topics) {\n  //   global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  // }\n  //\n  // const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  // global = updateGlobalSearch(global, {\n  //   foundTopicIds: sortedTopics,\n  // }, tabId);\n  //\n  // setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport {ManagementProgress} from '../../../types';\nimport type {ActionReturnType} from '../../types';\n\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addUsers,\n  updateChat,\n  updateManagement,\n  updateManagementProgress,\n  updateUsers,\n} from '../../reducers';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {ensureIsSuperGroup} from './chats';\nimport {getUserFirstOrLastName} from '../../helpers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\nimport {blobToDataUri, fetchBlob, imgToBlob} from \"../../../util/files\";\nimport {resizeImage} from \"../../../util/imageResize\";\nimport MsgCommandChatGpt from \"../../../worker/msg/MsgCommandChatGpt\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  const blob = await imgToBlob(file!);\n  const thumbnailUrl = await resizeImage(blob,40,40,file!.type,0.1);\n  const thumbnail = await blobToDataUri(await fetchBlob(thumbnailUrl));\n  result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n    thumbnail,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  // @ts-ignore\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n  MsgCommand.uploadUser(getGlobal(),userId).catch(console.error)\n\n  const { id, accessHash } = user;\n  // const newUser = await callApi('fetchFullUser', { id, accessHash });\n  // if (!newUser) {\n  //   global = getGlobal();\n  //   global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  // actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\nimport {addCallback} from '../../../lib/teact/teactn';\n\nimport type {ApiChat, ApiMessage} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {ActionReturnType, GlobalState, Thread} from '../../types';\n\nimport {DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport {init as initFolderManager} from '../../../util/folderManager';\nimport {updateTabState} from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n  const { loadAllChats, preloadTopChatMessages, } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      // await loadAndReplaceMessages(global, actions);\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState,msgClientState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (\n    previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState\n  )) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (\n    connectionState === 'connectionStateReady' && authState === 'authorizationStateReady'\n  ) {\n    if(DEBUG){\n      console.log({connectionState,msgClientState,authState})\n    }\n    getActions().sync();\n  }\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiUser} from '../../../api/types';\nimport {ManagementProgress} from '../../../types';\n\nimport {throttle} from '../../../util/schedulers';\nimport {buildCollectionByKey, unique} from '../../../util/iteratees';\nimport {isUserBot, isUserId} from '../../helpers';\nimport {callApi} from '../../../api/gramjs';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {getServerTime} from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type {ActionReturnType} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\nimport {currentTs} from \"../../../worker/share/utils/utils\";\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,bio,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n\n  // if (!user.isContact && user.phoneNumber) {\n  //   result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  // } else {\n  //   const { id, accessHash } = user;\n  //   result = await callApi('updateContact', {\n  //     id,\n  //     accessHash,\n  //     phoneNumber: '',\n  //     firstName,\n  //     lastName,\n  //     shouldSharePhoneNumber,\n  //   });\n  // }\n  result = {};\n  global = getGlobal();\n  if (result) {\n    // actions.loadChatSettings({ chatId: userId });\n    let botInfo = user.fullInfo?.botInfo\n    if(botInfo){\n      botInfo = {\n        ...botInfo,\n        description:bio\n      }\n    }\n    global = updateUser(\n      global,\n      user.id,\n      {\n        updatedAt:currentTs(),\n        firstName,\n        lastName,\n        fullInfo:{\n          ...user.fullInfo,\n          bio,\n          botInfo,\n        }\n      },\n    );\n\n    global = updateChat(\n      global,\n      user.id,\n      {\n        title:firstName\n      },\n    );\n  }\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n  MsgCommand.uploadUser(getGlobal(),userId).catch(console.error)\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport type {ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {InlineBotSettings} from '../../../types';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectReplyingToId,\n  selectSendAs,\n  selectTabState,\n  selectThreadTopMessageId,\n  selectUser,\n} from '../../selectors';\nimport {addChats, addUsers, removeBlockedContact} from '../../reducers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {debounce} from '../../../util/schedulers';\nimport {replaceInlineBotSettings, replaceInlineBotsIsLoading} from '../../reducers/bots';\nimport {getServerTime} from '../../../util/serverTime';\nimport {extractCurrentThemeParams} from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {openSystemFilesDialog} from \"../../../util/systemFilesDialog\";\nimport {SUPPORTED_IMAGE_CONTENT_TYPES} from \"../../../config\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      new MsgCommand(chat.id).answerCallbackButton(global,messageId,button.data);\n      // void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestUploadImage':\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      openSystemFilesDialog(\n        Array.from(SUPPORTED_IMAGE_CONTENT_TYPES).join(','),\n        async (e) => {\n          const { files } = e.target as HTMLInputElement;\n          await new MsgCommand(chat.id).requestUploadImage(global,messageId,files);\n        },\n        true\n      );\n      break;\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n  // @ts-ignore\n  actions.focusLastMessage()\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\nexport function stopOpenChat(){\n  // @ts-ignore\n  window.stopOpenChat = true;\n  setTimeout(()=>{\n    // @ts-ignore\n    window.stopOpenChat = false;\n  },1000)\n}\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  stopOpenChat()\n  const global = getGlobal();\n  const user = selectUser(global,chat.id)\n  const params = {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n    botInfo:user?.fullInfo?.botInfo\n  }\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params);\n  }\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiUpdateChat} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\n\nimport {ARCHIVED_FOLDER_ID, CLOUD_MESSAGE_API, MAX_ACTIVE_PINNED_CHATS} from '../../../config';\nimport {buildCollectionByKey, omit, pick} from '../../../util/iteratees';\nimport {closeMessageNotifications, notifyAboutMessage} from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectThreadParam,\n} from '../../selectors';\nimport {updateUnreadReactions} from '../../reducers/reactions';\nimport type {ActionReturnType, GlobalState} from '../../types';\nimport {isLocalMessageId} from \"../../helpers\";\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\nimport {currentTs1000} from \"../../../worker/share/utils/utils\";\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n\nconst handleChatFoldersEdit = (global:GlobalState)=>{\n  const {userStoreData} = global\n\n  let changed = userStoreData?.chatFolders !== JSON.stringify(global.chatFolders)\n  if(\n    JSON.stringify(global.chatFolders) !== userStoreData?.chatFolders ||\n    JSON.stringify(global.chats.listIds.active) !== JSON.stringify(userStoreData?.chatIds)\n  ){\n    changed = true;\n  }\n  global = {\n    ...global,\n    userStoreData:{\n      ...userStoreData,\n      chatFolders:JSON.stringify(global.chatFolders),\n      chatIds:global.chats.listIds.active,\n      time:currentTs1000()\n    }\n  }\n\n  if(changed && CLOUD_MESSAGE_API){\n    callApiWithPdu(new SyncReq({userStoreData:global.userStoreData}).pack()).catch(console.error)\n  }\n  return global\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n      const listActiveIds = global.chats.listIds.active || []\n      if(!listActiveIds.includes(update.chat.id)){\n        listActiveIds.push(update.chat.id)\n        global = {\n          ...global,\n          chats:{\n            ...global.chats,\n            totalCount:{\n              ...global.chats.totalCount,\n              all:listActiveIds.length,\n            },\n            listIds:{\n              ...global.chats.listIds,\n              active:listActiveIds\n            }\n          }\n        }\n      }\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n      if(!isLocalMessageId(message.id!)){\n        // global = updateChat(global, update.chatId, {\n        //   unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        //   ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        // });\n        global = updateChat(global, update.chatId, {\n          unreadCount:0,\n          unreadMentionsCount:0,\n        });\n      }\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isLocalMessageId,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport parseMessageInput from \"../../../util/parseMessageInput\";\nimport { handleBotCmdText, handleMessageTextCode } from '../../../worker/msg/msgHelper';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {RemoveMessagesReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\n\nconst ANIMATION_DELAY = 350;\n\nconst handleMessageEntities = (global:GlobalState,chatId:string,message:ApiMessage|Partial<ApiMessage>)=>{\n\n  const userNames:Record<string, string> = {}\n  Object.values(global.users.byId).map(user=>userNames[\"@\"+user.usernames![0].username] = user.id)\n\n  if(message.content?.text && (!message.content.text.entities || message.content.text.entities?.length === 0)){\n    const user = selectUser(global,chatId)\n    message = handleMessageTextCode(message)\n    if(user && user.fullInfo?.botInfo){\n      message = handleBotCmdText(message,user.fullInfo.botInfo,userNames) as ApiMessage\n    }\n  }\n  // message.isOutgoing = false\n  return message\n}\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      let {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      message = handleMessageEntities(global,chatId,message)\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      let { chatId, localId, message } = update;\n      message = handleMessageEntities(global,chatId,message) as ApiMessage\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n      let messageNew = message\n      if (!messageNew.isOutgoing && messageNew.content\n        && messageNew.content.text && messageNew.content.text.text && !messageNew.content.text!.entities) {\n        const {text, entities} = parseMessageInput(messageNew.content.text.text);\n        messageNew.content.text.text = text;\n        messageNew.content.text.entities = entities\n      }\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...messageNew,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error && error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      let {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n      if(translations && translations.length > 0) {\n        translations = translations.map((t, i) => {\n          let message =  selectChatMessage(global, chatId, messageIds[i])!\n          message = handleMessageEntities(global, chatId, {\n            ...message,\n            content: {\n              ...message.content,\n              text:t\n            }\n          })\n          return message.content.text\n        })\n      }\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n\n  // Channel update\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    callApiWithPdu(new RemoveMessagesReq({chatId,messageIds:ids}).pack()).catch(console.error)\n\n    ids.forEach((id) => {\n\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiUser, ApiUserStatus} from '../../../api/types';\n\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  deleteContact,\n  replaceUserStatuses,\n  updateChatListIds,\n  updateUser,\n} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {selectIsCurrentUserPremium, selectUser} from '../../selectors';\nimport type {ActionReturnType, GlobalState, RequiredGlobalState} from '../../types';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\nimport {UserStoreData_Type} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {DEBUG} from \"../../../config\";\nimport {currentTs1000} from \"../../../worker/share/utils/utils\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\nimport {DownloadUserReq, DownloadUserRes} from \"../../../lib/ptp/protobuf/PTPUser\";\nimport {PbUser} from \"../../../lib/ptp/protobuf/PTPCommon\";\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\nfunction updateUserStoreData(global:GlobalState,userStoreDataRes?:UserStoreData_Type){\n  // console.log(\"updateUserStoreData\",userStoreDataRes)\n  if (userStoreDataRes){\n    const {chatFolders,...userStoreData} = userStoreDataRes;\n    if(DEBUG){\n      console.log(\"updateUserStoreData\",userStoreDataRes)\n    }\n    return {\n      ...global,\n      userStoreData,\n      chatFolders:{\n        ...global.chatFolders,\n        ...(chatFolders ? JSON.parse(chatFolders!):{})\n      }\n    }\n  }else{\n    return global\n  }\n\n}\n\nfunction handleUpdateUser(global:GlobalState,userId:string){\n  const user1 = selectUser(global,userId)\n  if(!user1){\n    callApiWithPdu(new DownloadUserReq({\n      userId,\n      updatedAt:0\n    }).pack()).then((res)=>{\n      if(res && res.pdu){\n        const {userBuf} = DownloadUserRes.parseMsg(res.pdu)\n        if(userBuf){\n          const user = PbUser.parseMsg(new Pdu(Buffer.from(userBuf!)));\n          if(user.id !== userId){\n            user.id = userId\n          }\n          const users: Record<string, ApiUser> = {};\n          const usersStatus: Record<string, ApiUserStatus> = {};\n          users[userId] = user as ApiUser;\n          usersStatus[userId] = {\n            type: \"userStatusEmpty\"\n          };\n          let global = getGlobal();\n          global = addUsers(global, users);\n          global = addUserStatuses(global, usersStatus);\n          setGlobal(global)\n        }\n\n      }\n    });\n  }\n}\nfunction handleUpdateBots(global:GlobalState,user:ApiUser){\n  const user1 = selectUser(global,user.id)\n  if(!user1){\n    const statusById:Record<string, ApiUserStatus> = {}\n    statusById[user.id] = {\n      type:'userStatusEmpty'\n    }\n    global = addUserStatuses(global,statusById);\n    global = addUsers(global,{\n      [user.id]:user\n    })\n  }else{\n    return updateUser(global, user.id,{\n      ...user1,\n      avatarHash:user.avatarHash,\n      firstName:user.firstName,\n      fullInfo:{\n        ...user1.fullInfo,\n        bio:user.fullInfo?.bio,\n        botInfo: {\n          ...user1.fullInfo?.botInfo!,\n          description:user.fullInfo?.botInfo?.description,\n          aiBot:{\n            ...user1.fullInfo?.botInfo!.aiBot,\n            chatGptConfig:{\n              ...user1.fullInfo?.botInfo!.aiBot!.chatGptConfig!,\n              welcome:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.welcome,\n              template:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.template,\n              templateSubmit:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.templateSubmit,\n              init_system_content:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.init_system_content\n            }\n          }\n        }\n      }\n    });\n  }\n  return global\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case \"updateGlobalUpdate\":\n      const {data} = update\n      switch (data.action){\n        case \"updateUser\":\n          return handleUpdateUser(global,data.payload.userId);\n        case \"updateBots\":\n          return handleUpdateBots(global,data.payload.user);\n        case \"onLogged\":\n          callApiWithPdu(new SyncReq({}).pack()).catch(console.error)\n          break\n        case \"updateUserStoreData\":\n          global = updateUserStoreData(global,data.payload!.userStoreData)\n          let userStoreData1 = global.userStoreData!\n          if(userStoreData1.myBots){\n            if(!userStoreData1.chatIdsDeleted){\n              userStoreData1.chatIdsDeleted = []\n            }\n            const userIds = [];\n            for (let i = 0; i < userStoreData1.myBots.length; i++) {\n              const botId = userStoreData1.myBots[i]\n              if(!selectUser(global,botId) && !userStoreData1.chatIdsDeleted.includes(botId)){\n                if(botId !== \"0\" && botId !== UserIdFirstBot){\n                  userIds.push(botId)\n                }\n              }\n            }\n            if(userIds.length > 0){\n              setTimeout(()=>{\n                MsgCommand.downloadUsers(userIds).catch(console.error);\n              },500)\n            }\n          }\n          return global\n        case \"updateTopCats\":\n          return {\n            ...global,\n            topCats:{\n              ...global.topCats,\n              ...data.payload!.topCats,\n              time:currentTs1000()\n            }\n          }\n        case \"updateChatGptHistory\":\n          const chatId = data.payload!.chatId;\n          return {\n            ...global,\n            chatGptAskHistory:{\n              ...global.chatGptAskHistory,\n              [chatId]:{\n                ...global.chatGptAskHistory[chatId],\n                [data.payload!.msgIdAssistant]:data.payload!.msgIdUser\n              }\n            }\n          }\n        case \"updateBot\":\n          const userBotUpdate = {\n            ...global.users.byId[data.payload!.botInfo.botId],\n            bot:data.payload!.bot\n          };\n          if(data.payload!.bot.chatGptConfig && data.payload!.bot.chatGptConfig.api_key){\n            localStorage.setItem(\"open-api-key\" , data.payload!.bot.chatGptConfig.api_key)\n          }\n          return updateUser(global,data.payload!.botInfo.botId,userBotUpdate)\n        case \"clearHistory\":\n          actions.updateGlobal({\n            messages:{\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [data.payload!.chatId]:{\n                  ...global.messages.byChatId[data.payload!.chatId],\n                  byId:{},\n                  threadsById:{\n                    \"-1\":{\n                      ...global.messages.byChatId[data.payload!.chatId].threadsById[\"-1\"],\n                      lastScrollOffset:undefined,\n                      lastViewportIds: [],\n                      listedIds:[]\n                    }\n                  }\n                }\n              }\n            },\n            chats:{\n              ...global.chats,\n              byId:{\n                ...global.chats.byId,\n                [data.payload!.chatId]:{\n                  ...global.chats.byId[data.payload!.chatId],\n                  lastMessage:undefined\n                }\n              }\n            }\n          })\n          break;\n        case \"removeBot\":\n          if(global.chats.listIds && global.chats.listIds.active){\n            let listIds_active = global.chats.listIds.active\n            listIds_active = listIds_active!.filter(id=>id !== data.payload!.chatId)\n            actions.updateGlobal({\n              chats:{\n                ...global.chats,\n                listIds: {\n                  ...global.chats.listIds,\n                  active:listIds_active\n                },\n                totalCount: {\n                  ...global.chats.totalCount,\n                  all:listIds_active.length\n                }\n              }\n            })\n            // @ts-ignore\n            actions.openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n            actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          }\n          return\n      }\n      break\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n      if(selectUser(global,update.id)){\n        return updateUser(global, update.id, update.user);\n      }else{\n        return addUsers(global, {\n          [update.id]:update.user\n        });\n      }\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useMemo,} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {AnimationLevel, ISettings} from '../../../types';\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {ApiChat} from '../../../api/types';\nimport type {GlobalState, TabState} from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME,\n  APP_VERSION,\n  ASSET_CACHE_NAME,\n  BETA_CHANGELOG_URL,\n  CLOUD_MESSAGE_ENABLE,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  LANG_CACHE_NAME,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {IS_PWA} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport {formatDateToString} from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport {setPermanentWebVersion} from '../../../util/permanentWebVersion';\nimport {clearWebsync} from '../../../util/websync';\nimport {\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport {isChatArchived} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport {useHotkeys} from '../../../hooks/useHotkeys';\nimport {getPromptInstall} from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport * as cacheApi from '../../../util/cacheApi';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectFolder: ()=>void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onSelectProfile: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    topSearchPlaceHolder?:string,\n    isLoading: boolean;\n    currentUserId?: string;\n    currentAccountAddress?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  topSearchPlaceHolder,\n  contactsFilter,\n  onSearchQuery,\n  onSelectProfile,\n  onSelectFolder,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n  currentAccountAddress,\n}) => {\n  const {\n    fetchTopCats,\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut,\n    updateGlobal,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return (chat && chat.unreadCount) ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n    fetchTopCats()\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleClearCache = useCallback(async () => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    await cacheApi.clear(LANG_CACHE_NAME);\n    await cacheApi.clear(ASSET_CACHE_NAME);\n\n    setTimeout(()=>{\n      location.reload();\n    },500)\n  }, [openUrl]);\n\n  const handleSignOutClick = useCallback(() => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    setTimeout(()=>{\n      signOut({ forceInitApi: true });\n      updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n      },300)\n  }, [openChat,signOut]);\n\n  const handleLoginClick = useCallback(() => {\n\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    updateGlobal({\n      authState:\"authorizationStateWaitSignPassword\"\n    })\n  }, [updateGlobal]);\n\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang(topSearchPlaceHolder || '编程 写作 旅游...');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"folder\"\n        onClick={onSelectFolder}\n      >\n        {lang('Filters')}\n      </MenuItem>\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectProfile}\n      >\n        {lang('个人资料')}\n      </MenuItem>\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"settings\"\n          onClick={onSelectSettings}\n        >\n          {lang('Settings')}\n        </MenuItem>\n      }\n      {/*{*/}\n      {/*  currentUserId  &&*/}\n      {/*  <MenuItem*/}\n      {/*    icon=\"saved-messages\"*/}\n      {/*    onClick={handleSelectSaved}*/}\n      {/*  >*/}\n      {/*    {lang('SavedMessages')}*/}\n      {/*  </MenuItem>*/}\n      {/*}*/}\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"stop\"\n        onClick={handleClearCache}\n      >\n        清除缓存\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n      {\n        !CLOUD_MESSAGE_ENABLE ?\n          <></>:\n          currentAccountAddress  ?\n        <MenuItem\n          icon=\"logout\"\n          onClick={handleSignOutClick}\n        >\n          {lang('SignOut')}\n        </MenuItem>:\n          <MenuItem\n            icon=\"user\"\n            onClick={handleLoginClick}\n          >\n            {lang('Login')}\n          </MenuItem>\n      }\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,currentAccountAddress\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n    const { topSearchPlaceHolder } = global.topCats;\n\n    return {\n      topSearchPlaceHolder,\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.messages) : false,\n      currentUserId,\n      currentAccountAddress,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {loadAllChats,createChat} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    onNewChannel();\n    setTimeout(()=>{\n      setIsMenuOpen(false);\n    },200)\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-add\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={false}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useRef, useState,} from '../../../lib/teact/teact';\n\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {FolderEditDispatch} from '../../../hooks/reducers/useFoldersReducer';\n\nimport {IS_TOUCH_ENV} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\nimport * as cacheApi from '../../../util/cacheApi';\n\nimport './LeftMain.scss';\nimport {getActions} from '../../../global';\nimport {LANG_CACHE_NAME} from \"../../../config\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel,openChat,sendBotCommand,focusLastMessage } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectProfile = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.EditProfile);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectFolder = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.Folders);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectSettings = useCallback(() => {\n    openChat({ id: UserIdFirstBot, shouldReplaceHistory: true }, { forceOnHeavyAnimation: true });\n    focusLastMessage()\n    setTimeout(()=>{\n      sendBotCommand({\n        chatId:UserIdFirstBot,\n        command:\"/setting\"\n      })\n    },300)\n    // onSettingsScreenSelect(SettingsScreens.Main);\n    // onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(async () => {\n    await cacheApi.clear(LANG_CACHE_NAME);\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep2);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectProfile={handleSelectProfile}\n        onSelectFolder={handleSelectFolder}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst LeftColumnContentStr = window.sessionStorage.getItem(\"LeftColumnContent\");\nlet leftColumnContent = LeftColumnContent.ChatList;\nif(LeftColumnContentStr && LeftColumnContentStr !== '2'){\n  leftColumnContent = parseInt(LeftColumnContentStr)\n}\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      // setContent_(LeftColumnContent.NewChannelStep1);\n      // return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.Folders:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.EditProfile:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      if(query.length > 0){\n        setGlobalSearchContent({content:0})\n      }\n      setGlobalSearchQuery({ query });\n    }\n\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport {stopOpenChat} from \"../../global/actions/api/bots\";\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export type MediaSessionHandlers = {\n  play?: () => void;\n  pause?: () => void;\n  stop?: () => void;\n\n  previoustrack?: () => void;\n  nexttrack?: () => void;\n\n  togglemicrophone?: () => void;\n  togglecamera?: () => void;\n  hangup?: () => void;\n\n  seekbackward?: (details: MediaSessionActionDetails) => void;\n  seekforward?: (details: MediaSessionActionDetails) => void;\n  seekTo?: ((details: MediaSessionActionDetails) => void);\n};\n\ninterface MediaMetadataParameters {\n  title?: string;\n  artist?: string;\n  album?: string;\n  artwork?: MediaImage[];\n}\n\nconst DEFAULT_HANDLERS = {\n  play: undefined,\n  pause: undefined,\n  seekbackward: undefined,\n  seekforward: undefined,\n  previoustrack: undefined,\n  nexttrack: undefined,\n  stop: undefined,\n  seekTo: undefined,\n};\n\nexport function registerMediaSession(metadata?: MediaMetadata, handlers?: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    if (metadata) updateMetadata(metadata);\n    if (handlers) setMediaSessionHandlers(handlers);\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn('MediaSession API not supported in this browser');\n  }\n}\n\nexport function updateMetadata(metadata?: MediaMetadata) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = metadata ?? null;\n  }\n}\n\nexport function setMediaSessionHandlers(handlers: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    Object.entries({ ...DEFAULT_HANDLERS, ...handlers }).forEach(([key, handler]) => {\n      try {\n        // @ts-ignore API not standardized yet\n        mediaSession.setActionHandler(key, handler);\n      } catch (err) {\n        // Handler not supported, ignoring\n      }\n    });\n  }\n}\n\nexport function clearMediaSession() {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = null;\n    setMediaSessionHandlers(DEFAULT_HANDLERS);\n    if (mediaSession.playbackState) mediaSession.playbackState = 'none';\n    mediaSession.setPositionState?.();\n  }\n}\n\nexport function setPlaybackState(state: 'none' | 'paused' | 'playing' = 'none') {\n  const { mediaSession } = window.navigator;\n  if (mediaSession && mediaSession.playbackState) {\n    mediaSession.playbackState = state;\n  }\n}\n\nexport function setPositionState(state?: MediaPositionState) {\n  if (!state || state.position === undefined || state.duration === undefined) return;\n  state.position = Math.min(state.position, state.duration);\n\n  const { mediaSession } = window.navigator;\n  mediaSession?.setPositionState?.(state);\n}\n\nexport function buildMediaMetadata({\n  title, artist, album, artwork,\n}: MediaMetadataParameters) {\n  if ('MediaMetadata' in window) {\n    return new window.MediaMetadata({\n      title,\n      artist,\n      album,\n      artwork,\n    });\n  }\n  return undefined;\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../lib/teact/teact';\nimport { getActions, getGlobal } from '../global';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../config';\nimport type { Track, TrackId } from '../util/audioPlayer';\nimport { register } from '../util/audioPlayer';\nimport { isSafariPatchInProgress } from '../util/patchSafariProgressiveAudio';\nimport type { MediaSessionHandlers } from '../util/mediaSession';\nimport {\n  registerMediaSession, setPlaybackState, setPositionState, updateMetadata,\n} from '../util/mediaSession';\nimport { selectTabState } from '../global/selectors';\n\nimport useEffectWithPrevDeps from './useEffectWithPrevDeps';\nimport useSyncEffect from './useSyncEffect';\n\ntype Handler = (e: Event) => void;\n\nconst DEFAULT_SKIP_TIME = 10;\n\nconst useAudioPlayer = (\n  trackId: TrackId,\n  originalDuration: number, // Sometimes incorrect for voice messages\n  trackType: Track['type'],\n  src?: string,\n  handlers?: Record<string, Handler>,\n  metadata?: MediaMetadata,\n  onInit?: (element: HTMLAudioElement) => void,\n  shouldPlay = false,\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n  noPlaylist = false,\n  noProgressUpdates = false,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const controllerRef = useRef<ReturnType<typeof register>>(null);\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  let isPlayingSync = isPlaying;\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n\n  const handleTrackChange = useCallback(() => {\n    setIsPlaying(false);\n    if (onTrackChange) onTrackChange();\n  }, [onTrackChange]);\n\n  useSyncEffect(() => {\n    controllerRef.current = register(trackId, trackType, (eventName, e) => {\n      switch (eventName) {\n        case 'onPlay': {\n          const {\n            setVolume, setPlaybackRate, toggleMuted, proxy,\n          } = controllerRef.current!;\n          setIsPlaying(true);\n\n          registerMediaSession(metadata, makeMediaHandlers(controllerRef));\n          setPlaybackState('playing');\n          const { audioPlayer } = selectTabState(getGlobal());\n          setVolume(audioPlayer.volume);\n          toggleMuted(Boolean(audioPlayer.isMuted));\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (trackType === 'voice' || duration > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION) {\n            setPlaybackRate(audioPlayer.playbackRate);\n          }\n\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onRateChange': {\n          const { proxy } = controllerRef.current!;\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onPause':\n          setIsPlaying(false);\n          setPlaybackState('paused');\n          break;\n        case 'onTimeUpdate': {\n          const { proxy } = controllerRef.current!;\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (!noProgressUpdates) setPlayProgress(proxy.currentTime / duration);\n          break;\n        }\n        case 'onEnded': {\n          setPlaybackState('paused');\n          break;\n        }\n      }\n\n      handlers?.[eventName]?.(e);\n    }, onForcePlay, handleTrackChange);\n\n    const { proxy } = controllerRef.current!;\n\n    if (!isPlaying && !proxy.paused) {\n      setIsPlaying(true);\n      // `isPlayingSync` is only needed to help `setIsPlaying` because it is asynchronous\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      isPlayingSync = true;\n    }\n\n    if (onInit) {\n      onInit(proxy);\n    }\n  }, [trackId]);\n\n  useEffect(() => {\n    if (isPlaying && metadata) updateMetadata(metadata);\n  }, [metadata, isPlaying]);\n\n  const {\n    play,\n    pause,\n    setCurrentTime,\n    proxy,\n    destroy,\n    setVolume,\n    stop,\n    isFirst,\n    isLast,\n    requestNextTrack,\n    requestPreviousTrack,\n    setPlaybackRate,\n    toggleMuted,\n  } = controllerRef.current!;\n  const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n\n  // RAF progress\n  useEffect(() => {\n    if (duration && !isSafariPatchInProgress(proxy) && !noProgressUpdates) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  }, [duration, playProgress, proxy, noProgressUpdates]);\n\n  // Cleanup\n  useEffect(() => () => {\n    destroy(noPlaylist);\n  }, [destroy, noPlaylist]);\n\n  // Autoplay once `src` is present\n  useEffectWithPrevDeps(([prevShouldPlay, prevSrc]) => {\n    if (prevShouldPlay === shouldPlay && src === prevSrc) {\n      return;\n    }\n\n    // When paused by another player\n    if (proxy.src && proxy.paused) {\n      return;\n    }\n\n    if (shouldPlay && src && !isPlaying) {\n      play(src);\n    }\n  }, [shouldPlay, src, isPlaying, play, proxy.src, proxy.paused]);\n\n  const playIfPresent = useCallback(() => {\n    if (src) {\n      play(src);\n    }\n  }, [src, play]);\n\n  const playPause = useCallback(() => {\n    if (isPlaying) {\n      pause();\n    } else {\n      playIfPresent();\n    }\n  }, [pause, playIfPresent, isPlaying]);\n\n  const setTime = useCallback((time: number) => {\n    setCurrentTime(time);\n    if (duration) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  }, [duration, proxy, setCurrentTime]);\n\n  return {\n    isPlaying: isPlayingSync,\n    playProgress,\n    playPause,\n    pause,\n    play: playIfPresent,\n    stop,\n    setCurrentTime: setTime,\n    setVolume,\n    audioProxy: proxy,\n    duration,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setPlaybackRate,\n    toggleMuted,\n  };\n};\n\nfunction makeMediaHandlers(controllerRef: React.RefObject<ReturnType<typeof register>>) {\n  let mediaHandlers: MediaSessionHandlers = {};\n  if (controllerRef && controllerRef.current) {\n    const {\n      play, pause, setCurrentTime, proxy, requestNextTrack, requestPreviousTrack, isFirst, isLast,\n    } = controllerRef.current;\n    mediaHandlers = {\n      play: () => {\n        play(proxy.src);\n      },\n      pause: () => {\n        pause();\n      },\n      stop: () => {\n        pause();\n        setCurrentTime(0);\n        getActions().closeAudioPlayer();\n      },\n      seekbackward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.max(proxy.currentTime - skipTime, 0));\n      },\n      seekforward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.min(proxy.currentTime + skipTime, proxy.duration));\n      },\n      seekTo: (event) => {\n        if (event.seekTime) {\n          setCurrentTime(event.seekTime);\n        }\n      },\n    };\n\n    if (!isLast()) {\n      mediaHandlers.nexttrack = () => {\n        requestNextTrack();\n      };\n    }\n    if (!isFirst()) {\n      mediaHandlers.previoustrack = () => {\n        requestPreviousTrack();\n      };\n    }\n  }\n  return mediaHandlers;\n}\n\nexport default useAudioPlayer;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId, selectUser,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  isBot?:boolean;\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  isBot,\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              withDesc={isBot}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n\n    // console.log(chatId,{isChatWithBot,canRestartBot},Boolean(selectIsChatBotNotStarted(global, chatId)),canStartBot)\n\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n    const isBot = Boolean(isUserId(chatId) && selectUser(global,chatId)?.fullInfo?.botInfo)\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isBot,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId,setEditingId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n    setEditingId({ messageId });\n    // setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../config';\nimport { getDocumentExtension, getDocumentHasPreview } from './helpers/documentInfo';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../hooks/useMedia';\nimport useFlag from '../../hooks/useFlag';\n\nimport File from './File';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  smaller?: boolean;\n  isSelected?: boolean;\n  isSelectable?: boolean;\n  canAutoLoad?: boolean;\n  uploadProgress?: number;\n  withDate?: boolean;\n  datetime?: number;\n  className?: string;\n  sender?: string;\n  autoLoadFileMaxSizeMb?: number;\n  isDownloading: boolean;\n  onCancelUpload?: () => void;\n  onMediaClick?: () => void;\n  onDateClick?: (messageId: number, chatId: string) => void;\n};\n\nconst BYTES_PER_MB = 1024 * 1024;\n\nconst Document: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  smaller,\n  canAutoLoad,\n  autoLoadFileMaxSizeMb,\n  uploadProgress,\n  withDate,\n  datetime,\n  className,\n  sender,\n  isSelected,\n  isSelectable,\n  onCancelUpload,\n  onMediaClick,\n  onDateClick,\n  isDownloading,\n}) => {\n  const dispatch = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const document = message.content.document!;\n  const { fileName, size, timestamp } = document;\n  const extension = getDocumentExtension(document) || '';\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const [wasIntersected, markIntersected] = useFlag();\n  useEffect(() => {\n    if (isIntersecting) {\n      markIntersected();\n    }\n  }, [isIntersecting, markIntersected]);\n\n  // Auto-loading does not use global download manager because requires additional click to save files locally\n  const [isLoadAllowed, setIsLoadAllowed] = useState(\n    canAutoLoad && (!autoLoadFileMaxSizeMb || size <= autoLoadFileMaxSizeMb * BYTES_PER_MB),\n  );\n\n  const shouldDownload = Boolean(isDownloading || (isLoadAllowed && wasIntersected));\n\n  const documentHash = getMessageMediaHash(message, 'download');\n  const { loadProgress: downloadProgress, mediaData } = useMediaWithLoadProgress(\n    documentHash, !shouldDownload, getMessageMediaFormat(message, 'download'), undefined, undefined, true,\n  );\n  const isLoaded = Boolean(mediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !isLoaded);\n\n  const hasPreview = getDocumentHasPreview(document);\n  const thumbDataUri = hasPreview ? getMessageMediaThumbDataUri(message) : undefined;\n  const localBlobUrl = hasPreview ? document.previewBlobUrl : undefined;\n  const previewData = useMedia(getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n\n  const withMediaViewer = onMediaClick && Boolean(document.mediaType) && (\n    SUPPORTED_VIDEO_CONTENT_TYPES.has(document.mimeType) || SUPPORTED_IMAGE_CONTENT_TYPES.has(document.mimeType)\n  );\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload();\n      }\n      return;\n    }\n\n    if (isDownloading) {\n      dispatch.cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (isTransferring) {\n      setIsLoadAllowed(false);\n      return;\n    }\n\n    if (withMediaViewer) {\n      onMediaClick!();\n    } else {\n      dispatch.downloadMessageMedia({ message });\n    }\n  }, [\n    isUploading, isDownloading, isTransferring, withMediaViewer, onCancelUpload, dispatch, message, onMediaClick,\n  ]);\n\n  const handleDateClick = useCallback(() => {\n    onDateClick!(message.id, message.chatId);\n  }, [onDateClick, message.id, message.chatId]);\n\n  return (\n    <File\n      ref={ref}\n      name={fileName}\n      extension={extension}\n      size={size}\n      timestamp={withDate ? datetime || timestamp : undefined}\n      thumbnailDataUri={thumbDataUri}\n      previewData={localBlobUrl || previewData}\n      smaller={smaller}\n      isTransferring={isTransferring}\n      isUploading={isUploading}\n      transferProgress={transferProgress}\n      className={className}\n      sender={sender}\n      isSelectable={isSelectable}\n      isSelected={isSelected}\n      actionIcon={withMediaViewer ? (isMessageDocumentVideo(message) ? 'icon-play' : 'icon-eye') : 'icon-download'}\n      onClick={handleClick}\n      onDateClick={onDateClick ? handleDateClick : undefined}\n    />\n  );\n};\n\nexport default memo(Document);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiAudio, ApiMessage, ApiVoice } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\nimport type { ISettings } from '../../types';\nimport { AudioOrigin } from '../../types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { MAX_EMPTY_WAVEFORM_POINTS, renderWaveform } from './helpers/waveform';\nimport renderText from './helpers/renderText';\nimport { getFileSizeString } from './helpers/documentInfo';\nimport {\n  getMediaDuration,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isMessageLocal,\n  isOwnMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDateTime, formatMediaDuration, formatPastTimeShort } from '../../util/dateFormat';\nimport { decodeWaveform, interpolateArray } from '../../util/waveform';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport useBuffering from '../../hooks/useBuffering';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\nimport useMedia from '../../hooks/useMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Link from '../ui/Link';\n\nimport './Audio.scss';\n\ntype OwnProps = {\n  theme: ISettings['theme'];\n  message: ApiMessage;\n  senderTitle?: string;\n  uploadProgress?: number;\n  origin: AudioOrigin;\n  date?: number;\n  lastSyncTime?: number;\n  noAvatars?: boolean;\n  className?: string;\n  isSelectable?: boolean;\n  isSelected?: boolean;\n  isDownloading: boolean;\n  isTranscribing?: boolean;\n  isTranscribed?: boolean;\n  canDownload?: boolean;\n  canTranscribe?: boolean;\n  isTranscriptionHidden?: boolean;\n  isTranscriptionError?: boolean;\n  onHideTranscription?: (isHidden: boolean) => void;\n  onPlay: (messageId: number, chatId: string) => void;\n  onReadMedia?: () => void;\n  onCancelUpload?: () => void;\n  onDateClick?: (messageId: number, chatId: string) => void;\n};\n\nexport const TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 375px)');\nexport const WITH_AVATAR_TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 410px)');\nconst AVG_VOICE_DURATION = 10;\n// This is needed for browsers requiring user interaction before playing.\nconst PRELOAD = true;\n// eslint-disable-next-line max-len\nconst TRANSCRIBE_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 24\" class=\"loading-svg\"><rect class=\"loading-rect\" fill=\"transparent\" width=\"32\" height=\"24\" stroke-width=\"3\" stroke-linejoin=\"round\" rx=\"6\" ry=\"6\" stroke=\"var(--accent-color)\" stroke-dashoffset=\"1\" stroke-dasharray=\"32,68\"></rect></svg>';\n\nconst Audio: FC<OwnProps> = ({\n  theme,\n  message,\n  senderTitle,\n  uploadProgress,\n  origin,\n  date,\n  lastSyncTime,\n  noAvatars,\n  className,\n  isSelectable,\n  isSelected,\n  isDownloading,\n  isTranscribing,\n  isTranscriptionHidden,\n  isTranscribed,\n  isTranscriptionError,\n  canDownload,\n  canTranscribe,\n  onHideTranscription,\n  onPlay,\n  onReadMedia,\n  onCancelUpload,\n  onDateClick,\n}) => {\n  const { cancelMessageMediaDownload, downloadMessageMedia, transcribeAudio } = getActions();\n\n  const { content: { audio, voice, video }, isMediaUnread } = message;\n  const isVoice = Boolean(voice || video);\n  const isSeeking = useRef<boolean>(false);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isRtl } = lang;\n\n  const { isMobile } = useAppLayout();\n  const [isActivated, setIsActivated] = useState(false);\n  const shouldLoad = (isActivated || PRELOAD) && lastSyncTime;\n  const coverHash = getMessageMediaHash(message, 'pictogram');\n  const coverBlobUrl = useMedia(coverHash, false, ApiMediaFormat.BlobUrl);\n\n  const mediaData = useMedia(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleForcePlay = useCallback(() => {\n    setIsActivated(true);\n    onPlay(message.id, message.chatId);\n  }, [message, onPlay]);\n\n  const handleTrackChange = useCallback(() => {\n    setIsActivated(false);\n  }, []);\n\n  let {\n    isBuffered, bufferedRanges, bufferingHandlers, checkBuffering,\n  } = useBuffering();\n\n  const {\n    isPlaying, playProgress, playPause, setCurrentTime, duration,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    bufferingHandlers,\n    undefined,\n    checkBuffering,\n    isActivated,\n    handleForcePlay,\n    handleTrackChange,\n    isMessageLocal(message),\n  );\n\n  const isOwn = isOwnMessage(message);\n  const waveformCanvasRef = useWaveformCanvas(\n    theme, voice, (isMediaUnread && !isOwn) ? 1 : playProgress, isOwn, !noAvatars, isMobile,\n  );\n\n  const withSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n\n  useEffect(() => {\n    setIsActivated(isPlaying);\n  }, [isPlaying]);\n\n  const isLoadingForPlaying = isActivated && !isBuffered;\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    isLoadingForPlaying || isDownloading,\n  );\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring);\n\n  const shouldRenderCross = shouldRenderSpinner && (isLoadingForPlaying || isUploading);\n\n  const handleButtonClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.();\n      return;\n    }\n\n    if (!isPlaying) {\n      onPlay(message.id, message.chatId);\n    }\n    console.log(\"[media]\\n\",JSON.stringify(message.content))\n    getActions().setAudioPlayerOrigin({ origin });\n    setIsActivated(!isActivated);\n    playPause();\n  }, [isUploading, isPlaying, isActivated, playPause, onCancelUpload, onPlay, message.id, message.chatId, origin]);\n\n  useEffect(() => {\n    if (onReadMedia && isMediaUnread && (isPlaying || isDownloading)) {\n      onReadMedia();\n    }\n  }, [isPlaying, isMediaUnread, onReadMedia, isDownloading]);\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      e.stopPropagation(); // Prevent Slide-to-Reply activation\n      // Prevent track skipping while seeking near end\n      setCurrentTime(Math.max(Math.min(duration * ((clientX - left) / width), duration - 0.1), 0.001));\n    }\n  }, [duration, setCurrentTime]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (e instanceof MouseEvent && e.button === 2) return;\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  const handleDateClick = useCallback(() => {\n    onDateClick!(message.id, message.chatId);\n  }, [onDateClick, message.id, message.chatId]);\n\n  const handleTranscribe = useCallback(() => {\n    transcribeAudio({ chatId: message.chatId, messageId: message.id });\n  }, [message.chatId, message.id, transcribeAudio]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !withSeekline) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [withSeekline, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const transcribeSvgMemo = useMemo(() => (\n    <div dangerouslySetInnerHTML={{ __html: TRANSCRIBE_SVG }} />\n  ), []);\n\n  function renderFirstLine() {\n    if (isVoice) {\n      return senderTitle || 'Voice';\n    }\n\n    const { title, fileName } = audio!;\n\n    return title || fileName;\n  }\n\n  function renderSecondLine() {\n    if (isVoice) {\n      return (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {formatMediaDuration((voice || video)!.duration)}\n        </div>\n      );\n    }\n\n    const { performer } = audio!;\n\n    return (\n      <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n        {formatMediaDuration(duration)}\n        <span className=\"bullet\">&bull;</span>\n        {performer && <span className=\"performer\" title={performer}>{renderText(performer)}</span>}\n        {performer && senderTitle && <span className=\"bullet\">&bull;</span>}\n        {senderTitle && <span title={senderTitle}>{renderText(senderTitle)}</span>}\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Audio',\n    className,\n    isOwn && origin === AudioOrigin.Inline && 'own',\n    (origin === AudioOrigin.Search || origin === AudioOrigin.SharedMedia) && 'bigger',\n    isSelected && 'audio-is-selected',\n  );\n\n  const buttonClassNames = ['toggle-play'];\n  if (shouldRenderCross) {\n    buttonClassNames.push('loading');\n  } else {\n    buttonClassNames.push(isPlaying ? 'pause' : 'play');\n  }\n\n  const contentClassName = buildClassName('content', withSeekline && 'with-seekline');\n\n  function renderWithTitle() {\n    return (\n      <div className={contentClassName}>\n        <div className=\"content-row\">\n          <p className=\"title\" dir=\"auto\" title={renderFirstLine()}>{renderText(renderFirstLine())}</p>\n\n          <div className=\"message-date\">\n            {Boolean(date) && (\n              <Link\n                className=\"date\"\n                onClick={handleDateClick}\n              >\n                {formatPastTimeShort(lang, date * 1000)}\n              </Link>\n            )}\n          </div>\n        </div>\n\n        {withSeekline && (\n          <div className=\"meta search-result\" dir={isRtl ? 'rtl' : undefined}>\n            <span className=\"duration with-seekline\" dir=\"auto\">\n              {playProgress < 1 && `${formatMediaDuration(duration * playProgress, duration)}`}\n            </span>\n            {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n          </div>\n        )}\n        {!withSeekline && renderSecondLine()}\n      </div>\n    );\n  }\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n      {isSelectable && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color={coverBlobUrl ? 'translucent-white' : 'primary'}\n        className={buttonClassNames.join(' ')}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n        onClick={handleButtonClick}\n        isRtl={lang.isRtl}\n        backgroundImage={coverBlobUrl}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames, shouldRenderCross && 'interactive')}>\n          <ProgressSpinner\n            progress={transferProgress}\n            transparent\n            size=\"m\"\n            onClick={shouldRenderCross ? handleButtonClick : undefined}\n            noCross={!shouldRenderCross}\n          />\n        </div>\n      )}\n      {audio && canDownload && !isUploading && (\n        <Button\n          round\n          size=\"tiny\"\n          className=\"download-button\"\n          ariaLabel={isDownloading ? 'Cancel download' : 'Download'}\n          onClick={handleDownloadClick}\n        >\n          <i className={isDownloading ? 'icon-close' : 'icon-arrow-down'} />\n        </Button>\n      )}\n      {origin === AudioOrigin.Search && renderWithTitle()}\n      {origin !== AudioOrigin.Search && audio && renderAudio(\n        lang,\n        audio,\n        duration,\n        isPlaying,\n        playProgress,\n        bufferedRanges,\n        seekerRef,\n        (isDownloading || isUploading),\n        date,\n        transferProgress,\n        onDateClick ? handleDateClick : undefined,\n      )}\n      {origin === AudioOrigin.SharedMedia && (voice || video) && renderWithTitle()}\n      {origin === AudioOrigin.Inline && voice && (\n        renderVoice(\n          voice,\n          seekerRef,\n          waveformCanvasRef,\n          playProgress,\n          isMediaUnread,\n          isTranscribing,\n          isTranscriptionHidden,\n          isTranscribed,\n          isTranscriptionError,\n          transcribeSvgMemo,\n          canTranscribe ? handleTranscribe : undefined,\n          onHideTranscription,\n        )\n      )}\n    </div>\n  );\n};\n\nfunction getSeeklineSpikeAmounts(isMobile?: boolean, withAvatar?: boolean) {\n  return {\n    MIN_SPIKES: isMobile ? (TINY_SCREEN_WIDTH_MQL.matches ? 16 : 20) : 25,\n    MAX_SPIKES: isMobile\n      ? (TINY_SCREEN_WIDTH_MQL.matches\n        ? 35\n        : (withAvatar && WITH_AVATAR_TINY_SCREEN_WIDTH_MQL.matches ? 40 : 45))\n      : 75,\n  };\n}\n\nfunction renderAudio(\n  lang: LangFn,\n  audio: ApiAudio,\n  duration: number,\n  isPlaying: boolean,\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: React.Ref<HTMLElement>,\n  showProgress?: boolean,\n  date?: number,\n  progress?: number,\n  handleDateClick?: NoneToVoidFunction,\n) {\n  const {\n    title, performer, fileName,\n  } = audio;\n  const showSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n  const { isRtl } = lang;\n\n  return (\n    <div className=\"content\">\n      <p className=\"title\" dir=\"auto\" title={title}>{renderText(title || fileName)}</p>\n      {showSeekline && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration with-seekline\" dir=\"auto\">\n            {formatMediaDuration(duration * playProgress, duration)}\n          </span>\n          {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n        </div>\n      )}\n      {!showSeekline && showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {progress ? `${getFileSizeString(audio!.size * progress)} / ` : undefined}{getFileSizeString(audio!.size)}\n        </div>\n      )}\n      {!showSeekline && !showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration\" dir=\"auto\">{formatMediaDuration(duration)}</span>\n          {performer && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <span className=\"performer\" dir=\"auto\" title={performer}>{renderText(performer)}</span>\n            </>\n          )}\n          {Boolean(date) && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <Link className=\"date\" onClick={handleDateClick}>\n                {formatMediaDateTime(lang, date * 1000, true)}\n              </Link>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction renderVoice(\n  voice: ApiVoice,\n  seekerRef: React.Ref<HTMLDivElement>,\n  waveformCanvasRef: React.Ref<HTMLCanvasElement>,\n  playProgress: number,\n  isMediaUnread?: boolean,\n  isTranscribing?: boolean,\n  isTranscriptionHidden?: boolean,\n  isTranscribed?: boolean,\n  isTranscriptionError?: boolean,\n  svgMemo?: React.ReactNode,\n  onClickTranscribe?: VoidFunction,\n  onHideTranscription?: (isHidden: boolean) => void,\n) {\n  return (\n    <div className=\"content\">\n      <div className=\"waveform-wrapper\">\n        <div\n          className=\"waveform\"\n          draggable={false}\n          ref={seekerRef}\n        >\n          <canvas ref={waveformCanvasRef} />\n        </div>\n        {onClickTranscribe && (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Button onClick={() => {\n            if ((isTranscribed || isTranscriptionError) && onHideTranscription) {\n              onHideTranscription(!isTranscriptionHidden);\n            } else if (!isTranscribing) {\n              onClickTranscribe();\n            }\n          }}\n          >\n            <i className={buildClassName(\n              'transcribe-icon',\n              (isTranscribed || isTranscriptionError) ? 'icon-down' : 'icon-transcribe',\n              (isTranscribed || isTranscriptionError) && !isTranscriptionHidden && 'transcribe-shown',\n            )}\n            />\n            {isTranscribing && svgMemo}\n          </Button>\n        )}\n      </div>\n      <p className={buildClassName('voice-duration', isMediaUnread && 'unread')} dir=\"auto\">\n        {playProgress === 0 ? formatMediaDuration(voice.duration) : formatMediaDuration(voice.duration * playProgress)}\n      </p>\n    </div>\n  );\n}\n\nfunction useWaveformCanvas(\n  theme: ISettings['theme'],\n  voice?: ApiVoice,\n  playProgress = 0,\n  isOwn = false,\n  withAvatar = false,\n  isMobile = false,\n) {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const { data: spikes, peak } = useMemo(() => {\n    if (!voice) {\n      return undefined;\n    }\n\n    const { waveform, duration } = voice;\n    if (!waveform) {\n      return {\n        data: new Array(Math.min(duration, MAX_EMPTY_WAVEFORM_POINTS)).fill(0),\n        peak: 0,\n      };\n    }\n\n    const { MIN_SPIKES, MAX_SPIKES } = getSeeklineSpikeAmounts(isMobile, withAvatar);\n    const durationFactor = Math.min(duration / AVG_VOICE_DURATION, 1);\n    const spikesCount = Math.round(MIN_SPIKES + (MAX_SPIKES - MIN_SPIKES) * durationFactor);\n    const decodedWaveform = decodeWaveform(new Uint8Array(waveform));\n\n    return interpolateArray(decodedWaveform, spikesCount);\n  }, [isMobile, voice, withAvatar]) || {};\n\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (!canvas || !spikes || peak === undefined) {\n      return;\n    }\n\n    const fillColor = theme === 'dark' ? '#494A78' : '#ADD3F7';\n    const fillOwnColor = theme === 'dark' ? '#B7ABED' : '#AEDFA4';\n    const progressFillColor = theme === 'dark' ? '#8774E1' : '#3390EC';\n    const progressFillOwnColor = theme === 'dark' ? '#FFFFFF' : '#4FAE4E';\n\n    renderWaveform(canvas, spikes, playProgress, {\n      peak,\n      fillStyle: isOwn ? fillOwnColor : fillColor,\n      progressFillStyle: isOwn ? progressFillOwnColor : progressFillColor,\n    });\n  }, [isOwn, peak, playProgress, spikes, theme]);\n\n  return canvasRef;\n}\n\nfunction renderSeekline(\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: React.Ref<HTMLElement>,\n) {\n  return (\n    <div\n      className=\"seekline no-selection\"\n      ref={seekerRef as React.Ref<HTMLDivElement>}\n    >\n      {bufferedRanges.map(({ start, end }) => (\n        <div\n          className=\"seekline-buffered-progress\"\n          style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n        />\n      ))}\n      <span className=\"seekline-play-progress\">\n        <i\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n      <span className=\"seekline-thumb\">\n        <i\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n    </div>\n  );\n}\n\nexport default memo(Audio);\n","type IWaveformProps = {\n  peak: number;\n  fillStyle: string;\n  progressFillStyle: string;\n};\n\nexport const MAX_EMPTY_WAVEFORM_POINTS = 30;\nconst SPIKE_WIDTH = 2;\nconst SPIKE_STEP = 4;\nconst SPIKE_RADIUS = 1;\nconst HEIGHT = 23;\n\nexport function renderWaveform(\n  canvas: HTMLCanvasElement,\n  spikes: number[],\n  progress: number,\n  {\n    peak, fillStyle, progressFillStyle,\n  }: IWaveformProps,\n) {\n  const width = spikes.length * SPIKE_STEP;\n  const height = HEIGHT;\n\n  canvas.width = width * 2;\n  canvas.height = height * 2;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.scale(2, 2);\n\n  spikes.forEach((item, i) => {\n    ctx.globalAlpha = (i / spikes.length >= progress) ? 0.5 : 1;\n    ctx.fillStyle = progress > i / spikes.length ? progressFillStyle : fillStyle;\n    const spikeHeight = Math.max(2, HEIGHT * (item / Math.max(1, peak)));\n    roundedRectangle(ctx, i * SPIKE_STEP, (height + spikeHeight) / 2, SPIKE_WIDTH, spikeHeight, SPIKE_RADIUS);\n    ctx.fill();\n  });\n}\n\nfunction roundedRectangle(\n  ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number,\n) {\n  if (width < 2 * radius) {\n    radius = width / 2;\n  }\n  if (height < 2 * radius) {\n    radius = height / 2;\n  }\n\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.arcTo(x + width, y, x + width, y - height, radius);\n  ctx.arcTo(x + width, y - height, x, y - height, radius);\n  ctx.arcTo(x, y - height, x, y, radius);\n  ctx.arcTo(x, y, x + width, y, radius);\n  ctx.closePath();\n}\n","/* eslint-disable no-bitwise */\n\n// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\nimport {stopOpenChat} from \"../../../global/actions/api/bots\";\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'requestUploadImage':\n        return <i className=\"icon-photo\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\" onDoubleClick={(e)=>{\n          e.preventDefault();\n          e.stopPropagation();\n          return false\n        }}>\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={(e) => {\n                stopOpenChat()\n                onClick({ messageId: message.id, button })\n              }}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\nimport {TEXT_AI_THINKING} from \"../../../worker/setting\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    (message.senderId === \"1\") && 'selfSend',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message) && message.content;\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleEditClick = useCallback(() => {\n    if(message.senderId === \"1\" && message.content.text && message.content.text.text && !message.content.text.text.startsWith(\"/\")){\n      if (handleDoubleClick) {\n        handleDoubleClick();\n      }\n      return false\n    }\n  },[])\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if(message.content.text?.text === TEXT_AI_THINKING){\n      return <DotAnimation className=\"status\" content={TEXT_AI_THINKING.replace(\"...\",\"\")} />\n    }\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <>\n            <div className={textContentClass} dir=\"auto\"\n                 onDoubleClick={handleEditClick}>\n              {renderMessageText()}\n              {isTranslationPending && (\n                <div className=\"translation-animation\">\n                  <div className=\"text-loading\">\n                    {renderMessageText(true)}\n                  </div>\n                </div>\n              )}\n              {metaPosition === 'in-text' && renderReactionsAndMeta()}\n            </div>\n\n          </>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    // if(sender?.id === \"1\"){\n    //   return\n    // }\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    let {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    withAvatar = true;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    let canShowSender = withSenderName || withAvatar || forceSenderName;\n\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if(senderPeer?.id === \"1\"){\n      return;\n    }\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      {/*<span>{lang('UnreadMessages')}</span>*/}\n      <span></span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,focusMessage\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    // if (areMessagesLoaded) {\n    //   memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    // }\n    memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      // newScrollTop = Math.min(\n      //   unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n      //   scrollHeight - scrollOffset,\n      // );\n      newScrollTop = scrollHeight - scrollOffset;\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  let withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  let noAvatars = Boolean(!withUsers || isChannelChat);\n  noAvatars = false\n  withUsers = true;\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n\n    if (!isShown) {\n      return;\n    }\n    if (messageListType !== 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport {resizeImage, scaleImage} from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let thumbBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n\n  }\n\n  return {\n    blobUrl,\n    thumbBlobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n  canSendVideos = false;\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n      true\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false),true);\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\nimport {stopOpenChat} from \"../../../global/actions/api/bots\";\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  clickBotInlineButton({ messageId: message.id, button })\n                }}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiDraft, GlobalState, MessageListType, TabState,} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatMember,\n  ApiFormattedText,\n  ApiMessage,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type {InlineBotSettings, ISettings} from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_MODAL_ID,\n  MAX_UPLOAD_FILEPART_SIZE,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport {IS_IOS, IS_VOICE_RECORDING_SUPPORTED} from '../../../util/environment';\nimport {MEMO_EMPTY_ARRAY} from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport {formatMediaDuration, formatVoiceRecordDuration} from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, {prepareAttachmentsToSend} from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport {insertHtmlInSelection} from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport {isSelectionInsideInput} from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport {getServerTime} from '../../../util/serverTime';\nimport {selectCurrentLimit} from '../../../global/selectors/limits';\nimport {buildCustomEmojiHtml} from './helpers/customEmoji';\nimport {processMessageInputForCustomEmoji} from '../../../util/customEmojiManager';\nimport {getTextWithEntitiesAsHtml} from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {useStateRef} from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, {DropAreaState} from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n  const [speechRecognizing, setSpeechRecognizing] = useState(false);\n\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    // if(speechRecognizing){\n    //   return MainButtonState.Send;\n    // }\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, speechRecognizing,editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n    // if(speechRecognizing){\n    //   recognition.stop();\n    //   setSpeechRecognizing(false);\n    //   return\n    // }\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          // recognition.start().then((res:string)=>{\n          //   setHtml(res);\n          // }).catch((e)=>{\n          //   console.error(e)\n          //   // setSpeechRecognizing(false);\n          // });\n          // setSpeechRecognizing(true);\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n  const [passwordOpen,setPasswordOpen] = useState(true);\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={false}\n              canSendGifs={false}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              (activeVoiceRecording )&& windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {(activeVoiceRecording ) && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {(activeVoiceRecording) && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={ ()=>{\n            // recognition.stop();\n            // setSpeechRecognizing(false)\n            stopRecordingVoice()\n          } }\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState,\"mainSendBtn\", !isReady && 'not-ready', ( activeVoiceRecording) && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport Account from \"../../worker/share/Account\";\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\nimport {SERVER_BOT_USER_ID_START, UserIdFirstBot} from \"../../worker/setting\";\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? '' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n               {canManage && !isInsideTopic && (\n                 <Button\n                   round\n                   color=\"translucent\"\n                   size=\"smaller\"\n                   ariaLabel={lang('Edit')}\n                   onClick={handleToggleManagement}\n                 >\n                   <i className=\"icon-edit\" />\n                 </Button>\n               )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    let canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    if(isBot){\n      const {userStoreData} = global\n      canManage = false\n      if(chatId && userStoreData && userStoreData.myBots && userStoreData.myBots.includes(chatId)){\n        canManage = true;\n      }\n      if(chatId && parseInt(chatId) == parseInt(SERVER_BOT_USER_ID_START)){\n        canManage = true;\n      }\n    }\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isUserId,\n  isChatGroup,\n} from '../../../../global/helpers';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<string, ApiChat>, usersById: Record<string, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isUserId(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isUserId(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport {\n  getMessageHtmlId,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\n\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (messageId: number, chatId: string) => void;\n};\n\nconst Media: FC<OwnProps> = ({\n  message,\n  idPrefix = 'shared-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const video = getMessageVideo(message);\n\n  const hasSpoiler = getMessageIsSpoiler(message);\n  const [isSpoilerShown, , hideSpoiler] = useFlag(hasSpoiler);\n\n  const handleClick = useCallback(() => {\n    hideSpoiler();\n    onClick!(message.id, message.chatId);\n  }, [hideSpoiler, message, onClick]);\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${getMessageHtmlId(message.id)}`}\n      className=\"Media scroll-item\"\n      onClick={onClick ? handleClick : undefined}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {hasSpoiler && (\n        <MediaSpoiler\n          thumbDataUri={mediaBlobUrl || thumbDataUri}\n          isVisible={isSpoilerShown}\n          className=\"media-spoiler\"\n        />\n      )}\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(Media);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiMessage, ApiWebPage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getFirstLinkInMessage, getMessageText,\n  getMessageWebPage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport trimText from '../../util/trimText';\nimport renderText from './helpers/renderText';\nimport { formatPastTimeShort } from '../../util/dateFormat';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport Media from './Media';\nimport Link from '../ui/Link';\nimport SafeLink from './SafeLink';\n\nimport './WebLink.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  senderTitle?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onMessageClick: (messageId: number, chatId: string) => void;\n};\n\ntype ApiWebPageWithFormatted =\n  ApiWebPage\n  & { formattedDescription?: TextPart[] };\n\nconst WebLink: FC<OwnProps> = ({\n  message, senderTitle, isProtected, observeIntersection, onMessageClick,\n}) => {\n  const lang = useLang();\n\n  let linkData: ApiWebPageWithFormatted | undefined = getMessageWebPage(message);\n\n  if (!linkData) {\n    const link = getFirstLinkInMessage(message);\n    if (link) {\n      const { url, domain } = link;\n\n      linkData = {\n        siteName: domain.replace(/^www./, ''),\n        url: url.includes('://') ? url : url.includes('@') ? `mailto:${url}` : `http://${url}`,\n        formattedDescription: getMessageText(message) !== url\n          ? renderMessageSummary(lang, message, undefined, undefined, MAX_TEXT_LENGTH)\n          : undefined,\n      } as ApiWebPageWithFormatted;\n    }\n  }\n\n  const handleMessageClick = useCallback(() => {\n    onMessageClick(message.id, message.chatId);\n  }, [onMessageClick, message.id, message.chatId]);\n\n  if (!linkData) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    formattedDescription,\n    photo,\n    video,\n  } = linkData;\n\n  const truncatedDescription = !senderTitle && description && trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebLink scroll-item',\n    (!photo && !video) && 'without-media',\n  );\n\n  const safeLinkContent = url.replace('mailto:', '') || displayUrl;\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {photo && (\n        <Media message={message} isProtected={isProtected} observeIntersection={observeIntersection} />\n      )}\n      <div className=\"content\">\n        <Link isRtl={lang.isRtl} className=\"site-title\" onClick={handleMessageClick}>\n          {renderText(title || siteName || displayUrl)}\n        </Link>\n        {(truncatedDescription || formattedDescription) && (\n          <Link isRtl={lang.isRtl} className=\"site-description\" onClick={handleMessageClick}>\n            {formattedDescription || (truncatedDescription && renderText(truncatedDescription))}\n          </Link>\n        )}\n        <SafeLink\n          url={url}\n          className=\"site-name\"\n          text={safeLinkContent}\n          isRtl={lang.isRtl}\n        />\n        {senderTitle && <div className=\"sender-name\">{renderText(senderTitle)}</div>}\n      </div>\n      {senderTitle && (\n        <div className=\"message-date\">\n          <Link\n            className=\"date\"\n            onClick={handleMessageClick}\n            isRtl={lang.isRtl}\n          >\n            {formatPastTimeShort(lang, message.date * 1000)}\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebLink);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport Modal from './Modal';\nimport PasswordMonkey from \"../common/PasswordMonkey\";\nimport PasswordForm from \"../common/PasswordForm\";\nimport {passwordCheck} from \"../../worker/share/utils/helpers\";\nimport InputText from \"./InputText\";\nimport {PasswordFromEventOptions} from \"../../worker/share/utils/password\";\nimport Mnemonic, {MnemonicLangEnum} from \"../../lib/ptp/wallet/Mnemonic\";\nimport {DEFAULT_LANG_MNEMONIC} from \"../../worker/setting\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nexport type PasswordHelperType = \"\" | \"showMnemonic\" | \"messageEncryptPassword\"  | \"mnemonicPassword\"  | \"mnemonicPasswordVerify\"\n\nconst PasswordModal: FC<OwnProps> = ({}: OwnProps) => {\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(\"Password\");\n  const [noBackdropClose, setNoBackdropClose] = useState<boolean>(false);\n  const [backGroundBlack, setBackGroundBlack] = useState<boolean>(false);\n\n  const [showHitInput, setShowHitInput] = useState<boolean>(false);\n  const [passwordHelper, setPasswordHelper] = useState<PasswordHelperType>(\"\");\n  const [mnemonicError, setMnemonicError] = useState<string>(\"\");\n  const [validationError, setValidationError] = useState<string>('');\n  const [mnemonic, setMnemonic] = useState<string>('');\n  const [hint, setHint] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const lang = useLang();\n\n  const handleSubmit = useCallback((password) => {\n    if(\"mnemonicPassword\" === passwordHelper && mnemonic.trim().split(\" \").length !== 12 ||  !new Mnemonic(mnemonic.trim(),DEFAULT_LANG_MNEMONIC as MnemonicLangEnum).checkMnemonic()){\n      setMnemonicError(\"助记词不合法\")\n      return false\n    }\n    if (!passwordCheck(password)) {\n      setValidationError(lang(\"PasswordTipsCheck\"))\n      return\n    }\n    if (onConfirm) {\n      onConfirm({password, hint,mnemonic});\n      setOpen(false)\n    }\n  }, [hint,passwordHelper,mnemonic]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        setOpen(true);\n        // @ts-ignore\n        onConfirm = e.detail.callback;\n        // @ts-ignore\n        setNoBackdropClose(e.detail.noBackdropClose)\n        // @ts-ignore\n        setPasswordHelper(e.detail.passwordHelper)\n        // @ts-ignore\n        setHint(e.detail.hint)\n        // @ts-ignore\n        setShowHitInput(!e.detail.hideHitInput);\n        // @ts-ignore\n        const options:PasswordFromEventOptions = e.detail.options as PasswordFromEventOptions || {}\n        const {title,mnemonic,backGroundBlack} = options\n        if(title){\n          setTitle(title)\n        }\n        if(backGroundBlack !== undefined){\n          setBackGroundBlack(true)\n        }\n        if(mnemonic){\n          setMnemonic(mnemonic)\n        }\n      }\n    }\n    document.addEventListener('password', evt);\n    return () => {\n      document.removeEventListener('password', evt);\n    }\n  }, [setHint, setShowHitInput, open])\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  return (\n    <Modal\n      hasCloseButton={!noBackdropClose}\n      isOpen={open}\n      noBackdropClose={noBackdropClose}\n      onClose={() => {\n        if(noBackdropClose){\n          return false\n        }\n        if (onConfirm) {\n          onConfirm({password: \"\", hint: \"\"});\n        }\n        setOpen(false)\n      }}\n      title={title}\n      className={`password-modal${backGroundBlack ? \" bg-black\":\"\"}`}\n    >\n      <div className=\"settings-content password-form custom-scroll background\">\n        <div className=\"settings-content-header no-border\">\n          <PasswordMonkey isBig isPasswordVisible={shouldShowPassword}/>\n        </div>\n        <div className=\"pt-0 pb-0 mb-2 background\">\n          {\n            showHitInput &&\n            <InputText\n              id=\"pwd-hint\"\n              type={\"text\"}\n              label={lang(\"PasswordTipsLocalHint\")}\n              onChange={(e) => {\n                setHint(e.target.value)\n              }}\n              value={hint}\n              autoComplete=\"given-name\"\n            />\n          }\n          {\n            [\"mnemonicPassword\"].includes(passwordHelper) &&\n            <InputText\n              error={mnemonicError}\n              id=\"pwd-mnemonic\"\n              type={\"text\"}\n              label={\"助记词\"}\n              onFocus={()=>setMnemonicError(\"\")}\n              onChange={(e) => {\n                setMnemonicError(\"\")\n                setMnemonic(e.target.value)\n              }}\n              value={mnemonic}\n            />\n          }\n          <PasswordForm\n            error={validationError}\n            hint={(!showHitInput && hint) ? hint : lang(\"PasswordTipsLocalPlaceholder\")}\n            shouldDisablePasswordManager={true}\n            submitLabel={lang('Next')}\n            clearError={handleClearError}\n            isLoading={false}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={true}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n        {\n          [\"messageEncryptPassword\"].includes(passwordHelper) &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"PasswordTipsLocalStorage\")}</li>\n              <li>{lang(\"PasswordTipsLocalStorage1\")}</li>\n            </ul>\n          </div>\n        }\n        {\n          [\"showMnemonic\",\"mnemonicPassword\"].includes(passwordHelper) &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"密码不会存储服务器，请牢记密码\")}</li>\n              <li>{lang(\"助记词代表账户，可用于跨设备登录，请妥善保管保存助记词\")}</li>\n            </ul>\n          </div>\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PasswordModal);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {useCallback, useEffect, useRef,} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useAsync from '../../hooks/useAsync';\n\nimport Loading from '../ui/Loading';\n\nimport blankUrl from '../../assets/blank.png';\nimport Button from \"../ui/Button\";\n\ntype OwnProps ={ content?:string,tips?:string};\n\nconst DATA_PREFIX = 'wai://';\nconst QR_SIZE = 280;\n\nlet qrCodeStylingPromise: Promise<typeof import('qr-code-styling')>;\n\nfunction ensureQrCodeStyling() {\n  if (!qrCodeStylingPromise) {\n    qrCodeStylingPromise = import('qr-code-styling');\n  }\n  return qrCodeStylingPromise;\n}\n\nconst QrCode: FC<OwnProps> = ({content,tips}) => {\n\n  // @ts-ignore\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  const [isQrMounted, markQrMounted, unmarkQrMounted] = useFlag();\n\n  const { result: qrCode } = useAsync(async () => {\n    const QrCodeStyling = (await ensureQrCodeStyling()).default;\n    return new QrCodeStyling({\n      width: QR_SIZE,\n      height: QR_SIZE,\n      // image: blankUrl,\n      margin: 10,\n      type: 'svg',\n      dotsOptions: {\n        type: 'rounded',\n      },\n      cornersSquareOptions: {\n        type: 'extra-rounded',\n      },\n      imageOptions: {\n        imageSize: 0.4,\n        margin: 8,\n      },\n      qrOptions: {\n        errorCorrectionLevel: 'M',\n      },\n    });\n  }, []);\n\n  const transitionClassNames = useMediaTransition(isQrMounted);\n\n  useEffect(() => {\n    if (!qrCode) {\n      return () => {\n        unmarkQrMounted();\n      };\n    }\n\n    const container = qrCodeRef.current!;\n    const data = `${DATA_PREFIX}${content}`;\n    qrCode.update({\n      data,\n    });\n\n    if (!isQrMounted) {\n      qrCode.append(container);\n      markQrMounted();\n    }\n    return undefined;\n  }, [content,isQrMounted, markQrMounted, unmarkQrMounted, qrCode]);\n  const onDownload = useCallback(()=>{\n    if(qrCode){\n      qrCode.download()\n    }\n  },[qrCode])\n  return (\n    <div id=\"auth-qr-form\" className=\"custom-scroll\">\n      <div className=\"qr-outer\">\n        <div\n          className={buildClassName('qr-inner', transitionClassNames)}\n          key=\"qr-inner\"\n        >\n          <div\n            key=\"qr-container\"\n            className=\"qr-container\"\n            ref={qrCodeRef}\n            style={`width: ${QR_SIZE}px; height: ${QR_SIZE}px`}\n          />\n        </div>\n        {!isQrMounted && <div className=\"qr-loading\"><Loading /></div>}\n      </div>\n      <div className={'pt-2'} style={\"text-align:center\"}><code>{tips}</code></div>\n      {\n        content &&\n        <div className={'pt-2'} style={\"text-align:center;word-break: break-word;\"}><code>{`${DATA_PREFIX}${content}`}</code></div>\n      }\n\n      <Button isText disabled={!isQrMounted} onClick={onDownload}>下载</Button>\n    </div>\n  );\n};\n\nexport default QrCode;\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport Modal from './Modal';\nimport {getActions, withGlobal} from \"../../global\";\nimport {getPasswordFromEvent} from \"../../worker/share/utils/password\";\nimport Account from \"../../worker/share/Account\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport {aesEncrypt} from \"../../util/passcode\";\nimport {hashSha256} from \"../../worker/share/utils/helpers\";\nimport {PbQrCode} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {QrCodeType} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport QrCode from \"../common/QrCode\";\n\ntype OwnProps = {};\ntype StateProps = {\n  showMnemonicModal?:boolean\n};\n\nconst MnemonicModal: FC<OwnProps & StateProps> = ({showMnemonicModal}) => {\n  const {updateGlobal,showNotification} = getActions();\n  const [mnemonic,setMnemonic] = useState(\"\");\n  const [mnemonicEncrypt,setMnemonicEncrypt] = useState(\"\");\n\n  const onCloseModal = useCallback(async ()=>{\n    setMnemonic(\"\")\n    setMnemonicEncrypt(\"\")\n    updateGlobal({showMnemonicModal:undefined})\n  },[])\n\n  useEffect(()=>{\n    const init = async ()=>{\n      const {password} = await getPasswordFromEvent(undefined,true,'showMnemonic')\n      if(!password){\n        updateGlobal({showMnemonicModal:undefined})\n        return\n      }\n      const account = Account.getCurrentAccount();\n      if(!account?.getSession()){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"没有登录\"})\n      }\n      const res = await account?.verifySession(account?.getSession(),password);\n      if(!res){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"密码不正确\"})\n      }\n      const entropy = await Account.getCurrentAccount()!.getEntropy();\n      const m = Mnemonic.fromEntropy(entropy);\n      const words = m.getWords();\n      const e = await aesEncrypt(words,Buffer.from(hashSha256(password),'hex'))\n      setMnemonicEncrypt(Buffer.from(new PbQrCode({\n        type:QrCodeType.QrCodeType_MNEMONIC,\n        data:Buffer.from(e)\n      }).pack().getPbData()).toString(\"hex\"))\n      setMnemonic(words);\n    }\n    if(showMnemonicModal){\n      init();\n    }\n\n  },[showMnemonicModal])\n\n  if(!mnemonic){\n    return null\n  }\n  return (\n    <Modal title={\"助记词\"} isOpen={!!showMnemonicModal} hasCloseButton={true} onClose={onCloseModal}>\n      <QrCode content={mnemonicEncrypt} tips={mnemonic} />\n    </Modal>\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      showMnemonicModal,\n    } = global;\n    return {\n      showMnemonicModal,\n    };\n  },\n)(MnemonicModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from \"../../global\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\n\ntype OwnProps = {};\ntype StateProps = {\n  botIds:string[],\n  showPickBotModal?:boolean\n};\n\nconst PickBotModal: FC<OwnProps & StateProps> = ({showPickBotModal,botIds}) => {\n  const [search,setSearch] = useState(\"\");\n  const {updateGlobal} = getActions();\n\n  const handleSelect = useCallback((userId: string) => {\n    // MsgCommandSetting.onSelectSyncBot(userId)\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  const handleClose = useCallback(() => {\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={!!showPickBotModal}\n      chatOrUserIds={botIds}\n      searchPlaceholder={\"请选择要同步的机器人\"}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={()=>{}}\n      onSelectChatOrUser={handleSelect}\n      onClose={handleClose}\n    />\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      userStoreData,\n      showPickBotModal,\n      users:{\n        byId:users\n      }\n    } = global;\n    let botIds = Object.keys(users).filter(id=>id !== \"1\");\n    if(userStoreData && userStoreData.chatIdsDeleted){\n      botIds = botIds.filter(id=>!userStoreData.chatIdsDeleted.includes(id))\n    }\n\n    return {\n      botIds,\n      showPickBotModal,\n    };\n  },\n)(PickBotModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport Modal from './Modal';\nimport {ShowModalFromEventPayload} from \"../../worker/share/utils/modal\";\nimport Button from \"./Button\";\nimport TextArea from \"./TextArea\";\nimport {ChangeEvent} from \"react\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nconst GlobalModal: FC<OwnProps> = ({}: OwnProps) => {\n  const [payload, setPayload] = useState<ShowModalFromEventPayload|undefined>(undefined);\n  const [open, setOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(\"\");\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    let {value} = e.target\n    setValue(value);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (onConfirm) {\n      if(payload?.inputType === 'number'){\n        onConfirm({value});\n      }else{\n        onConfirm({value:value.trim()});\n      }\n      setOpen(false)\n      setValue(\"\")\n    }\n  }, [value]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        //@ts-ignore\n        const payload = e.detail.payload;\n        setPayload({\n          type:\"singleInput\",\n          title:\"请输入\",\n          ...payload,\n        })\n        //@ts-ignore\n        onConfirm = e.detail.callback;\n        setOpen(true);\n        setValue(payload.initVal|| \"\")\n      }\n    }\n    document.addEventListener('modal', evt);\n    return () => {\n      document.removeEventListener('modal', evt);\n    }\n  }, [open])\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        // if (onConfirm) {\n        //   onConfirm({value: \"\"});\n        // }\n        setValue(\"\")\n        setOpen(false)\n      }}\n      title={payload && payload.title}\n      className=\"\"\n    >\n      {\n        payload && (payload.type === 'multipleInput' || payload.type === 'singleInput' )&&\n        <div className=\"settings-content password-form custom-scroll background\">\n          <div className=\"pt-4 pb-4 mb-2 background\">\n            {\n              payload.type !== 'multipleInput' ?\n                <InputText\n                  type={payload.inputType || \"text\"}\n                  label={payload.placeholder||\"\"}\n                  step={payload.step}\n                  min={payload.min}\n                  max={payload.max}\n                  onChange={handleChange}\n                  value={value}\n                  autoComplete=\"given-name\"\n                />:\n                <TextArea\n                  value={value}\n                  onChange={handleChange}\n                  label={payload.placeholder||\"\"}\n                  disabled={false}\n                />\n            }\n          </div>\n          <Button type=\"button\" onClick={handleSubmit} ripple={true} isLoading={false} disabled={false}>\n            {payload.buttonTxt || \"下一步\"}\n          </Button>\n        </div>\n      }\n\n    </Modal>\n  );\n};\n\nexport default memo(GlobalModal);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useRef, useState,} from '../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../global';\n\nimport type {AnimationLevel, LangCode} from '../../types';\nimport type {ApiAttachBot, ApiChat, ApiMessage, ApiUser,} from '../../api/types';\nimport type {ApiLimitTypeWithModal, TabState} from '../../global/types';\n\nimport '../../global/actions/all';\nimport {BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,} from '../../config';\nimport {IS_ANDROID} from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport {waitForTransitionEnd} from '../../util/cssAnimationEndListeners';\nimport {processDeepLink} from '../../util/deeplink';\nimport {parseInitialLocationHash, parseLocationHash} from '../../util/routing';\nimport {fastRaf} from '../../util/schedulers';\nimport {Bundles, loadBundle} from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport {dispatchHeavyAnimationEvent} from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\nimport PasswordModal from \"../ui/PasswordModal\";\nimport MnemonicModal from \"../ui/MnemonicModal\";\nimport PickBotModal from \"../ui/PickBotModal\";\nimport GlobalModal from \"../ui/GlobalModal\";\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n      <PasswordModal/>\n      <GlobalModal/>\n      <MnemonicModal />\n      <PickBotModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../global';\n\nimport type {GlobalState} from '../../global/types';\n\nimport {LOCAL_TGS_URLS} from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport {decryptSession} from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return <div className={styles.help}></div>\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","parseCodeBlock","entities","reg","split","length","match","result","codeBlock","i","j","exec","push","ApiMessageEntityTypes","language","offset","index","replace","endsWith","substring","parseMentionName","userNames","regex","userId","parseCmd","commands","RegExp","join","matches","parseEntities","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","utterance","SpeechSynthesisUtterance","selectedText","getSelection","toString","document","selection","createRange","selectChatMessage","content","speechSynthesis","speak","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","saveDraft","draft","shouldForce","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","toggleMessageSelectAll","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","async","msgId","messagesList","Buffer","from","PbMsg","pack","getPbData","res","callApiWithPdu","UploadMsgReq","pdu","userMessageStoreData","UploadMsgRes","getActions","uploadMsgList","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","results","updateUserSearch","globalUserIds","localUserIds","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","querySelectorAll","link","href","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","previousGlobal","parse","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","LoadMoreDirection","isBudgetPreload","isRestricted","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","offsetId","isOutlying","historyIds","newViewportIds","areSomeLocal","areAllLocal","getViewportSlice","safeReplaceViewportIds","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","MESSAGE_LIST_SLICE","replyOriginForId","threadUpdate","callApi","MESSAGE_DELETED","updateChatMessage","addUsers","buildCollectionByKey","users","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","attachments","a","shouldSendAsSpoiler","password","hint","getPasswordFromEvent","attachment","blobUrl","mimeType","buf","blobToBuffer","fetchBlob","cipher","Account","encryptData","bb","popByteBuffer","hintLen","typeLen","writeInt16","writeBytes","toUint8Array","blob","Blob","encryptUrl","URL","createObjectURL","size","quality","thumbBlobUrl","resizeImage","entity","substr","replaceSubstring","repeat","log","scheduledAt","replyingToMessage","replyingToTopId","selectThreadTopMessageId","replyToTopMessageId","params","replyingTo","noWebPage","selectNoWebPage","sendAs","selectUser","clearWebPagePreview","isSingle","isGrouped","shouldGroupMessages","restParams","sendMessage","commonParams","byType","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","MsgDispatcher","setEditingId","progressCallback","get","getMessageOriginalId","cancelApiProgress","user","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","byId","editingId","selectEditingId","selectEditingScheduledId","UserIdFirstBot","activeChat","deleteChat","chatFolders","userStoreData","folder","includedChatIds","chatIdsDeleted","idDeleted","time","currentTs1000","chatIds","listIds","active","SyncReq","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","to","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","b","selectSendAs","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadViewportMessagesCache","addOffset","flag","threadsById","lastViewportIds","updateListedIds","messages1","isUp","listedIds1","ids1","isLocalMessageId","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","addChatMessagesById","updateOutlyingIds","addChats","updateThreadInfos","areSortedArraysIntersecting","sourceIds","findClosestIndex","indexForDirection","progress","localMessage","messageLocalId","has","set","fileUploads","byMessageLocalId","IS_IOS","rafPromise","botInfo","fullInfo","process","delete","shouldSendAsFile","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","seenByUserIds","sendAsId","sendAsChat","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","parseInt","apiKey","MsgCommandChatGpt","getChatGptConfig","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","totalCount","nextOffsetId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","topCats","cats","cat","botIds","TopCatsReq","chatListIdsActive","userIds","userIdList","firstName","toLowerCase","lastName","bio","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","imgToBlob","thumbnailUrl","thumbnail","blobToDataUri","updateUsers","MsgCommand","getUserFirstOrLastName","releaseStatusTimeout","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","lastSyncTime","initFolderManager","addCallback","connectionState","authState","msgClientState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","loadProfilePhotos","profileId","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","updatedAt","currentTs","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","localUsers","globalUsers","phoneNumber","phone","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","stopOpenChat","sendBotCommand","command","gameePopups","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openUrl","answerCallbackButton","openSystemFilesDialog","Array","target","requestUploadImage","openPollModal","receiptMessageId","getReceipt","openInvoice","isGame","openGame","alert","isError","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","currentChatId","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","currentPassword","onSuccess","isSuccess","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","handleChatFoldersEdit","changed","CLOUD_MESSAGE_API","prevIsForum","lastReadOutboxMessageId","listActiveIds","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","loadTopicById","loadTopics","ANIMATION_DELAY","handleMessageEntities","msgSend","handleMessageTextCode","cmd","handleBotCmdText","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","RemoveMessagesReq","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","messageNew","thread","currentThreadId","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","DownloadUserReq","userBuf","DownloadUserRes","PbUser","Pdu","usersStatus","handleUpdateUser","user1","aiBot","chatGptConfig","welcome","template","templateSubmit","init_system_content","statusById","handleUpdateBots","userStoreData1","userStoreDataRes","updateUserStoreData","myBots","chatGptAskHistory","msgIdAssistant","msgIdUser","userBotUpdate","api_key","localStorage","setItem","updateGlobal","lastScrollOffset","listIds_active","forceOnHeavyAnimation","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","currentAccountAddress","chatsById","isConnectionStatusMinimized","topSearchPlaceHolder","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","onSelectProfile","onSelectFolder","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","fetchTopCats","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleClearCache","cacheApi","clear","LANG_CACHE_NAME","ASSET_CACHE_NAME","reload","handleSignOutClick","history","replaceState","forceInitApi","handleLoginClick","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","CLOUD_MESSAGE_ENABLE","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","createChat","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectProfile","handleSelectFolder","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","LeftColumnContentStr","sessionStorage","getItem","leftColumnContent","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchContent","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","DEFAULT_HANDLERS","play","seekbackward","seekforward","previoustrack","nexttrack","stop","seekTo","updateMetadata","metadata","mediaSession","setMediaSessionHandlers","handlers","handler","setActionHandler","setPlaybackState","playbackState","setPositionState","duration","useAudioPlayer","trackId","originalDuration","trackType","onInit","shouldPlay","onForcePlay","onTrackChange","noPlaylist","noProgressUpdates","controllerRef","isPlaying","setIsPlaying","isPlayingSync","playProgress","setPlayProgress","handleTrackChange","register","eventName","setVolume","setPlaybackRate","toggleMuted","proxy","warn","registerMediaSession","mediaHandlers","setCurrentTime","requestNextTrack","requestPreviousTrack","isLast","closeAudioPlayer","event","skipTime","seekOffset","currentTime","seekTime","makeMediaHandlers","isFinite","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","paused","destroy","isSafariPatchInProgress","prevShouldPlay","prevSrc","playIfPresent","playPause","setTime","audioProxy","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","ratio","scaleImage","makeGoodArtwork","artwork","MediaMetadata","buildMediaMetadata","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioChatId","audioMessageId","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isBot","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDesc","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","isOwn","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","createElement","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","contains","handleTap","stopEvent","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","Document","observeIntersection","smaller","canAutoLoad","autoLoadFileMaxSizeMb","uploadProgress","withDate","isSelectable","onCancelUpload","onMediaClick","onDateClick","isDownloading","dispatch","extension","getDocumentExtension","wasIntersected","markIntersected","isLoadAllowed","setIsLoadAllowed","shouldDownload","documentHash","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaFormat","isLoaded","isUploading","isTransferring","transferProgress","getMediaTransferState","hasPreview","getDocumentHasPreview","getMessageMediaThumbDataUri","localBlobUrl","previewData","cancelMessageMediaDownload","handleDateClick","thumbnailDataUri","actionIcon","isMessageDocumentVideo","TINY_SCREEN_WIDTH_MQL","matchMedia","WITH_AVATAR_TINY_SCREEN_WIDTH_MQL","renderSeekline","bufferedRanges","seekerRef","start","end","Audio","isTranscribing","isTranscriptionHidden","isTranscribed","canTranscribe","onHideTranscription","onPlay","onReadMedia","transcribeAudio","isMediaUnread","isSeeking","isActivated","setIsActivated","shouldLoad","coverHash","coverBlobUrl","handleForcePlay","isBuffered","bufferingHandlers","checkBuffering","useBuffering","isOwnMessage","waveformCanvasRef","withAvatar","canvasRef","spikes","peak","waveform","fill","MIN_SPIKES","MAX_SPIKES","getSeeklineSpikeAmounts","durationFactor","spikesCount","fitCount","newData","springFactor","leftFiller","rightFiller","_data","_data$idx","_data2","idx","val","interpolateArray","encoded5bit","bitsCount","valuesCount","bitsData","byteIndex","bitShift","lastByteIndex","lastBitShift","lastValue","decodeWaveform","Uint8Array","canvas","fillStyle","progressFillStyle","ctx","getContext","scale","globalAlpha","spikeHeight","SPIKE_WIDTH","beginPath","moveTo","arcTo","closePath","roundedRectangle","renderWaveform","useWaveformCanvas","withSeekline","isLoadingForPlaying","shouldRenderSpinner","spinnerClassNames","shouldRenderCross","handleButtonClick","setAudioPlayerOrigin","handleDownloadClick","handleSeek","MouseEvent","targetTouches","handleStartSeek","handleStopSeek","handleTranscribe","onCapture","onDrag","transcribeSvgMemo","dangerouslySetInnerHTML","__html","renderFirstLine","fullClassName","AudioOrigin","buttonClassNames","contentClassName","renderWithTitle","Link","formatPastTimeShort","formatMediaDuration","renderSecondLine","backgroundImage","ProgressSpinner","transparent","noCross","showProgress","showSeekline","getFileSizeString","formatMediaDateTime","svgMemo","onClickTranscribe","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","Video","canAutoPlay","videoRef","getMessageVideo","getMessageWebPageVideo","isSpoilerShown","hideSpoiler","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","fullMediaData","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","useMediaTransition","noThumb","thumbRef","useBlurredMediaThumbRef","thumbClassNames","isInline","wasLoadDisabled","playButtonClassNames","handleTimeUpdate","isWebPageVideo","calculateVideoDimensions","isAllowed","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","withAnimation","isGif","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Invoice","shouldAffectAppendix","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","stopCurrentAudio","InlineButtons","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleEditClick","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","getMinMediaWidth","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","TEXT_AI_THINKING","DotAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","areMessagesLoaded","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","quick","img","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","analyzerCallback","startMediaRecorder","pausedAt","chunks","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","editingDraft","selectEditingScheduledDraft","selectEditingDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","speechRecognizing","setSpeechRecognizing","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","passwordOpen","setPasswordOpen","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","loadChatSettings","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","SERVER_BOT_USER_ID_START","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","getSenderName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","Media","idPrefix","hasSpoiler","decoding","WebLink","onMessageClick","linkData","getFirstLinkInMessage","formattedDescription","renderMessageSummary","safeLinkContent","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","ListItem","contextActions","memberId","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","ellipse","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","PasswordModal","setOpen","setTitle","noBackdropClose","setNoBackdropClose","backGroundBlack","setBackGroundBlack","showHitInput","setShowHitInput","passwordHelper","setPasswordHelper","mnemonicError","setMnemonicError","validationError","setValidationError","mnemonic","setMnemonic","setHint","shouldShowPassword","setShouldShowPassword","handleSubmit","Mnemonic","DEFAULT_LANG_MNEMONIC","checkMnemonic","passwordCheck","evt","detail","hideHitInput","handleClearError","PasswordMonkey","isPasswordVisible","InputText","PasswordForm","shouldDisablePasswordManager","submitLabel","clearError","shouldResetValue","onChangePasswordVisibility","onSubmit","DATA_PREFIX","qrCodeStylingPromise","QrCode","tips","qrCodeRef","isQrMounted","markQrMounted","unmarkQrMounted","qrCode","QrCodeStyling","dotsOptions","cornersSquareOptions","imageOptions","imageSize","qrOptions","errorCorrectionLevel","append","onDownload","showMnemonicModal","MnemonicModal","mnemonicEncrypt","setMnemonicEncrypt","onCloseModal","account","getSession","verifySession","entropy","getEntropy","words","getWords","aesEncrypt","hashSha256","PbQrCode","QrCodeType","showPickBotModal","PickBotModal","search","setSearch","handleSelect","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","onSearchChange","onSelectChatOrUser","GlobalModal","setPayload","inputType","initVal","TextArea","buttonTxt","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","shouldShowSubmit","noRipple","IS_MULTITAB_SUPPORTED","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","joinAudio","connectingAudio","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","allowTalk","leave","connecting","incoming","busy","ringing","fetchGroupCall","existingGroupCall","fetchGroupCallParticipants","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","inviteHash","fetchChatByUsername","full","requestMasterAndCallAction","toggleGroupCallPanel","AudioContext","webkitAudioContext","srcObject","silence","createAudioElement","selectChatGroupCall","rejoin","participantId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","mediaDevices","getUserMedia","getVideoTracks","checkMicrophonePermission"],"sourceRoot":""}