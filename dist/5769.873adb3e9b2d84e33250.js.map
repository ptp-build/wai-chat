{"version":3,"file":"5769.873adb3e9b2d84e33250.js","mappings":"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BinB,EAAgCxnB,EAAOm3C,eAAe3vB,IAAkBjkB,UAAOhD,EAChGwwB,WAAWtK,EAAAA,EAAAA,IAA2BzmB,GACtCmW,eAAgBnW,EAAOoW,SAASC,MAAMF,eACtCghF,oBACAoB,gBACAjF,eAAgBtzF,EAAOuwB,oBACvB+nE,gBACAI,oBACAe,uBAAwBz5F,EAAOoW,SAASC,MAAMqjF,aAC9Cd,oCACK3B,GAAiBwB,KAAe,CAAE9yF,aACnCmI,GAAc,CAAEysE,gBAAgBof,EAAAA,EAAAA,IAAqB35F,EAAQkF,EAA6B,cAApBT,OAC5C,iBAAnBs7E,GAA+B,CAAEA,qBACxC1N,GAAa,CAAEC,iBAAgBC,mBAAkB7nE,uBACtD,GAxJe41C,EAr/BuBs5C,EACzC10F,UACA2xF,gBACAgD,+BACAphB,gCACAC,gCACAnb,QACAqP,YACA0pB,aACAD,iBACAyD,aACApf,YACAtC,kBACAoe,iBACAzlE,YACAgpE,gBACAC,yBACAzD,wBACAgD,iBACAC,kBACAnhB,eACA/3C,QACAy2D,kBACApxF,SACAsxF,gBACAC,eACAp1D,YACAu1D,cACAC,kBACAl5E,eACAm5E,qBACAhd,iBACAwF,iBACAj1C,oBACAuoC,cACAylB,kBACAzmB,YACAC,iBACAC,mBACA7nE,sBACAosF,eACAtyB,iBACAkyB,gBACA1+B,YACAnrB,UACAumC,YACAx7C,gBACA+/D,aACAG,iBACAC,uBACAzE,kBACAngB,kBACAjS,cACA83B,mBACA54F,YACAg4F,mBACAruD,sBACAqC,mBACAlqC,mBACAooC,2BACA7lC,mBACAy0F,gBACAlZ,iBACAwP,oBACA2J,oBACAE,sBACAD,yBACAhsE,qBACAirE,qBACA9f,wBACApiE,kBACAghF,qBACAoB,gBACAD,gBACAI,oBACAe,0BACAb,oCAEA,MAAM,uBACJjsF,GAAsB,qBACtBwtD,GAAoB,uBACpBttD,GAAsB,sBACtBotF,GAAqB,iBACrB7vF,KACE8tB,EAAAA,EAAAA,MAGEgqB,IAAMtB,EAAAA,EAAAA,IAAuB,MAE7Bs5C,IAAkBt5C,EAAAA,EAAAA,IAAuB,MA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","sources":["webpack://wai/./src/global/actions/ui/localSearch.ts","webpack://wai/./src/global/actions/ui/chats.ts","webpack://wai/./src/global/actions/ui/messages.ts","webpack://wai/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://wai/./src/global/actions/ui/globalSearch.ts","webpack://wai/./src/global/actions/ui/stickerSearch.ts","webpack://wai/./src/global/actions/ui/users.ts","webpack://wai/./src/util/updateIcon.ts","webpack://wai/./src/util/updatePageTitle.ts","webpack://wai/./src/global/actions/ui/misc.ts","webpack://wai/./src/global/actions/ui/payments.ts","webpack://wai/./src/global/actions/ui/mediaViewer.ts","webpack://wai/./src/global/actions/ui/passcode.ts","webpack://wai/./src/global/actions/api/messages.ts","webpack://wai/./src/global/actions/api/symbols.ts","webpack://wai/./src/global/actions/api/globalSearch.ts","webpack://wai/./src/global/actions/api/localSearch.ts","webpack://wai/./src/global/actions/api/management.ts","webpack://wai/./src/global/actions/api/sync.ts","webpack://wai/./src/global/actions/api/accounts.ts","webpack://wai/./src/global/actions/api/users.ts","webpack://wai/./src/global/reducers/bots.ts","webpack://wai/./src/util/PopupManager.ts","webpack://wai/./src/global/actions/api/bots.ts","webpack://wai/./src/global/actions/api/payments.ts","webpack://wai/./src/global/actions/api/twoFaSettings.ts","webpack://wai/./src/util/requestQuery.ts","webpack://wai/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://wai/./src/global/reducers/reactions.ts","webpack://wai/./src/global/actions/api/reactions.ts","webpack://wai/./src/global/actions/api/statistics.ts","webpack://wai/./src/global/actions/apiUpdaters/chats.ts","webpack://wai/./src/worker/share/utils/stringParse.ts","webpack://wai/./src/global/actions/apiUpdaters/messages.ts","webpack://wai/./src/worker/msg/msgHelper.ts","webpack://wai/./src/global/actions/apiUpdaters/users.ts","webpack://wai/./src/global/actions/apiUpdaters/symbols.ts","webpack://wai/./src/global/actions/apiUpdaters/misc.ts","webpack://wai/./src/global/actions/apiUpdaters/settings.ts","webpack://wai/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://wai/./src/global/actions/apiUpdaters/calls.ts","webpack://wai/./src/global/actions/apiUpdaters/payments.ts","webpack://wai/./src/hooks/useBeforeUnload.ts","webpack://wai/./src/hooks/usePreventPinchZoomGesture.ts","webpack://wai/./src/components/common/StickerSetModal.async.tsx","webpack://wai/./src/components/common/UnreadCounter.tsx","webpack://wai/./src/hooks/useConnectionStatus.ts","webpack://wai/./src/hooks/useBrowserOnline.ts","webpack://wai/./src/components/left/ConnectionStatusOverlay.tsx","webpack://wai/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://wai/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://wai/./src/components/left/main/StatusButton.tsx","webpack://wai/./src/components/left/main/LeftMainHeader.tsx","webpack://wai/./src/util/permanentWebVersion.ts","webpack://wai/./src/components/ui/Tab.tsx","webpack://wai/./src/components/ui/TabList.tsx","webpack://wai/./src/components/left/main/ChatFolders.tsx","webpack://wai/./src/components/left/search/LeftSearch.async.tsx","webpack://wai/./src/components/left/main/ContactList.async.tsx","webpack://wai/./src/components/left/NewChatButton.tsx","webpack://wai/./src/components/left/main/LeftMain.tsx","webpack://wai/./src/components/left/settings/Settings.async.tsx","webpack://wai/./src/components/left/newChat/NewChat.async.tsx","webpack://wai/./src/components/left/ArchivedChats.async.tsx","webpack://wai/./src/components/left/LeftColumn.tsx","webpack://wai/./src/hooks/useResize.ts","webpack://wai/./src/components/middle/PinnedMessageNavigation.tsx","webpack://wai/./src/components/middle/HeaderPinnedMessage.tsx","webpack://wai/./src/hooks/useMessageMediaMetadata.ts","webpack://wai/./src/components/middle/AudioPlayer.tsx","webpack://wai/./src/components/middle/ChatReportPanel.tsx","webpack://wai/./src/components/middle/MiddleHeader.tsx","webpack://wai/./src/components/middle/helpers/groupMessages.ts","webpack://wai/./src/components/middle/hooks/useStickyDates.ts","webpack://wai/./src/components/middle/hooks/useScrollHooks.ts","webpack://wai/./src/components/middle/hooks/useMessageObservers.ts","webpack://wai/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://wai/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://wai/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://wai/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://wai/./src/util/languageDetection.ts","webpack://wai/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://wai/./src/components/middle/ActionMessage.tsx","webpack://wai/./src/components/common/EmbeddedMessage.tsx","webpack://wai/./src/components/middle/message/MessageMeta.tsx","webpack://wai/./src/components/middle/message/Sticker.tsx","webpack://wai/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://wai/./src/components/middle/message/AnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://wai/./src/components/middle/message/Video.tsx","webpack://wai/./src/components/middle/message/Contact.tsx","webpack://wai/./src/components/middle/message/PollOption.tsx","webpack://wai/./src/components/middle/message/Poll.tsx","webpack://wai/./src/components/middle/message/WebPage.tsx","webpack://wai/./src/components/middle/message/Invoice.tsx","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://wai/./src/util/map.ts","webpack://wai/./src/components/middle/message/Location.tsx","webpack://wai/./src/components/middle/message/Game.tsx","webpack://wai/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://wai/./src/components/middle/message/Album.tsx","webpack://wai/./src/components/middle/message/RoundVideo.tsx","webpack://wai/./src/components/middle/message/InlineButtons.tsx","webpack://wai/./src/components/middle/message/CommentButton.tsx","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/ReactionButton.tsx","webpack://wai/./src/components/middle/message/Reactions.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://wai/./src/components/common/TopicChip.tsx","webpack://wai/./src/components/common/TopicChip.module.scss?5208","webpack://wai/./src/components/middle/message/Message.tsx","webpack://wai/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://wai/./src/hooks/useTextLanguage.ts","webpack://wai/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://wai/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://wai/./src/components/common/AboutAdsModal.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessage.tsx","webpack://wai/./src/components/middle/MessageListContent.tsx","webpack://wai/./src/components/middle/ContactGreeting.tsx","webpack://wai/./src/components/middle/NoMessages.tsx","webpack://wai/./src/components/middle/MessageList.tsx","webpack://wai/./src/hooks/useNativeCopySelectedMessages.ts","webpack://wai/./src/components/middle/ScrollDownButton.tsx","webpack://wai/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://wai/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://wai/./src/components/middle/FloatingActionButtons.tsx","webpack://wai/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://wai/./src/util/audio.ts","webpack://wai/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://wai/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://wai/./src/util/voiceRecording.ts","webpack://wai/./src/lib/cleanDocsHtml.ts","webpack://wai/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://wai/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://wai/./src/components/middle/composer/hooks/useDraft.ts","webpack://wai/./src/components/common/DeleteMessageModal.async.tsx","webpack://wai/./src/components/ui/ResponsiveHoverButton.tsx","webpack://wai/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://wai/./src/components/middle/composer/AttachBotIcon.tsx","webpack://wai/./src/components/middle/composer/AttachBotItem.tsx","webpack://wai/./src/components/middle/composer/AttachMenu.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://wai/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://wai/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://wai/./src/components/middle/composer/PollModal.async.tsx","webpack://wai/./src/components/middle/composer/DropArea.async.tsx","webpack://wai/./src/components/middle/composer/WebPagePreview.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://wai/./src/components/middle/composer/BotMenuButton.tsx","webpack://wai/./src/components/middle/composer/Composer.tsx","webpack://wai/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://wai/./src/components/middle/composer/hooks/useEditing.ts","webpack://wai/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://wai/./src/components/middle/MobileSearch.async.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://wai/./src/components/common/SeenByModal.async.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://wai/./src/components/middle/ReactorListModal.async.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.async.tsx","webpack://wai/./src/components/middle/MiddleColumn.tsx","webpack://wai/./src/hooks/useCustomBackground.ts","webpack://wai/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://wai/./src/components/right/RightHeader.tsx","webpack://wai/./src/components/right/hooks/useProfileViewportIds.ts","webpack://wai/./src/components/right/hooks/useProfileState.ts","webpack://wai/./src/components/right/Profile.tsx","webpack://wai/./src/components/right/hooks/useTransitionFixes.ts","webpack://wai/./src/hooks/useCacheBuster.ts","webpack://wai/./src/components/right/RightSearch.async.tsx","webpack://wai/./src/components/right/management/Management.async.tsx","webpack://wai/./src/components/right/statistics/Statistics.async.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://wai/./src/components/right/StickerSearch.async.tsx","webpack://wai/./src/components/right/GifSearch.async.tsx","webpack://wai/./src/components/right/PollResults.async.tsx","webpack://wai/./src/components/right/AddChatMembers.tsx","webpack://wai/./src/components/right/CreateTopic.async.tsx","webpack://wai/./src/components/right/EditTopic.async.tsx","webpack://wai/./src/components/right/RightColumn.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://wai/./src/util/download.ts","webpack://wai/./src/components/main/DownloadManager.tsx","webpack://wai/./src/components/main/GameModal.tsx","webpack://wai/./src/components/main/Notifications.async.tsx","webpack://wai/./src/components/main/Dialogs.async.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://wai/./src/components/main/SafeLinkModal.async.tsx","webpack://wai/./src/components/main/HistoryCalendar.async.tsx","webpack://wai/./src/components/calls/group/GroupCall.async.tsx","webpack://wai/./src/components/calls/ActiveCallHeader.async.tsx","webpack://wai/./src/components/calls/phone/PhoneCall.async.tsx","webpack://wai/./src/components/middle/MessageListHistoryHandler.tsx","webpack://wai/./src/components/main/NewContactModal.async.tsx","webpack://wai/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://wai/./src/components/main/WebAppModal.async.tsx","webpack://wai/./src/components/main/BotTrustModal.async.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.async.tsx","webpack://wai/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://wai/./src/components/main/ConfettiContainer.tsx","webpack://wai/./src/components/main/UrlAuthModal.async.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://wai/./src/components/payment/PaymentModal.async.tsx","webpack://wai/./src/components/payment/ReceiptModal.async.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.async.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.async.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://wai/./src/components/ui/PasswordModal.tsx","webpack://wai/./src/components/common/QrCode.tsx","webpack://wai/./src/components/ui/MnemonicModal.tsx","webpack://wai/./src/components/ui/PickBotModal.tsx","webpack://wai/./src/components/ui/GlobalModal.tsx","webpack://wai/./src/components/main/Main.tsx","webpack://wai/./src/components/main/LockScreen.tsx","webpack://wai/./src/components/main/LockScreen.module.scss?8252","webpack://wai/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached, toggleMessageSelectAll,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\nimport {MessageStoreRow_Type, PbMsg_Type} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {currentTs} from \"../../../worker/share/utils/utils\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('onSpeak', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const utterance = new SpeechSynthesisUtterance();\n  var selectedText = \"\";\n  if (window.getSelection) {\n    selectedText = window.getSelection().toString();\n  } else if (document.selection && document.selection.type != \"Control\") {\n    selectedText = document.selection.createRange().text;\n  }\n  if(selectedText){\n    utterance.lang = 'zh-CN';\n    utterance.text = selectedText\n    speechSynthesis.speak(utterance)\n  }\n})\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n  const messages = selectChatMessages(global,chatId);\n  const {content} = messages[lastOwnEditableMessageId]\n  if(content.text && content.text){\n    actions.saveDraft({\n      chatId, threadId,\n      draft:{\n        text:content.text.text,\n        entities:content.text.entities\n      }\n      , shouldForce:true,\n    })\n    // return replaceThreadParam(global, chatId, threadId, 'editingId', {text:lastOwnEditableMessageId.toString()});\n  }\n\n  // return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\n\naddActionHandler('toggleMessageSelectAll', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n  return toggleMessageSelectAll(global, chatId, tabId);\n});\n\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('saveMsgToCloud', async (global, actions, payload): ActionReturnType => {\n  let { chatId,msgId,tabId = getCurrentTabId() } = payload || {};\n  let messageIds = []\n  if(chatId){\n    messageIds = [msgId]\n  }else{\n    const tabState = selectTabState(global, tabId);\n\n    if (!tabState.selectedMessages) {\n      return;\n    }\n    chatId =tabState.selectedMessages.chatId;\n    messageIds =tabState.selectedMessages.messageIds;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId)\n  if (!chatMessages) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id!])\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const messages1:MessageStoreRow_Type[] = [];\n\n  for (let i = 0; i < messages.length; i++) {\n    // @ts-ignore\n    const message:PbMsg_Type = messages[i]\n    messages1.push({\n      time:currentTs(),\n      message,\n      messageId:message.id,\n    })\n  }\n  await MsgCommandSetting.uploadMsgList(chatId,messages1)\n  if(tabId){\n    global = getGlobal();\n    global = exitMessageSelectMode(global, tabId);\n    setGlobal(global)\n  }\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: false, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  // storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ActionReturnType, ApiDraft, GlobalState, TabArgs,} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../../api/types';\nimport {LoadMoreDirection} from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {IS_IOS} from '../../../util/environment';\nimport {callApi, cancelApiProgress} from '../../../api/gramjs';\nimport {areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  leaveChat,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingIds,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport {debounce, onTickEnd, rafPromise,} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isLocalMessageId,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {translate} from '../../../util/langProvider';\nimport {ensureProtocol} from '../../../util/ensureProtocol';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport Account from \"../../../worker/share/Account\";\nimport {replaceSubstring} from \"../../../worker/share/utils/utils\";\nimport {blobToBuffer, fetchBlob} from \"../../../util/files\";\nimport {popByteBuffer, toUint8Array, writeBytes, writeInt16} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {resizeImage} from \"../../../util/imageResize\";\nimport {UserIdChatGpt, UserIdFirstBot} from \"../../../worker/setting\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {getPasswordFromEvent} from '../../../worker/share/utils/password';\nimport {AiHistoryType} from \"../../../worker/msg/MsgChatGpWorker\";\nimport MsgCommandChatGpt from \"../../../worker/msg/MsgCommandChatGpt\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\nlet _userMaxMsgId:number;\n\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n  let { chatId, threadId } = payload || {};\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId, type } = currentMessageList;\n  payload = omit(payload, ['tabId']);\n  const {currentUserId} = getGlobal();\n\n  if(payload.attachments){\n    const hasMessageEntitySpoiler = payload.attachments.find((a:ApiAttachment)=>a.shouldSendAsSpoiler);\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        let {attachments} = payload;\n        for (let i = 0; i < attachments.length; i++) {\n          const attachment = attachments[i];\n          const {blobUrl,mimeType} = attachment;\n          const buf = await blobToBuffer(await fetchBlob(blobUrl));\n          const cipher = await Account.getCurrentAccount()?.encryptData(buf, password)\n          const bb = popByteBuffer();\n          const hintLen = (hint ? hint.length:0)\n          const typeLen = mimeType.length;\n          writeInt16(bb, 2);\n          writeBytes(bb,Buffer.from(\"EN\"));\n          writeInt16(bb, typeLen);\n          writeBytes(bb,Buffer.from(mimeType));\n          writeInt16(bb, hintLen);\n          if(hintLen){\n            writeBytes(bb,Buffer.from(hint||\"\"));\n          }\n          const res = toUint8Array(bb);\n          const blob = new Blob([Buffer.from(res),Buffer.from(cipher!)], { type: attachment.mimeType });\n          payload.attachments[i].encryptUrl = URL.createObjectURL(blob)\n        }\n      }else{\n        return undefined\n      }\n    }\n  }\n  let {attachments} = payload;\n  if(attachments){\n    for (let i = 0; i < attachments.length; i++) {\n      const attachment = attachments[i];\n      const {mimeType,encryptUrl,blobUrl} = attachment;\n      if(mimeType.indexOf(\"image/\") === 0){\n        const size = encryptUrl ? 10 : 40;\n        const quality = 0.1;\n        attachment.thumbBlobUrl = await resizeImage(\n          blobUrl, size,size, 'image/jpeg',quality\n        );\n      }\n    }\n  }\n  if(payload.text && payload.entities && payload.entities!.length > 0){\n    let {entities,text} = payload;\n    const hasMessageEntitySpoiler = entities.find((entity:ApiMessageEntity)=>entity.type === \"MessageEntitySpoiler\");\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        for (let i = 0; i < entities.length; i++) {\n          if(entities[i].type === \"MessageEntitySpoiler\"){\n            const entity = payload.entities[i];\n            const {offset,length} = entity;\n            const cipher = await Account.getCurrentAccount()?.encryptData(Buffer.from(text.substr(offset,length)), password)\n            payload.text = replaceSubstring(payload.text,offset,length,\"x\".repeat(length));\n            //@ts-ignore\n            payload.entities[i] = {...entity,cipher:cipher.toString(\"hex\"),hint}\n          }\n        }\n        console.log(payload)\n      }else{\n        return undefined\n      }\n    }\n  }\n\n  global = getGlobal();\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectUser(global, global.currentUserId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\n// @ts-ignore\naddActionHandler('editMessage', async (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n  await MsgDispatcher.reRunAi(chatId,message.id,text)\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', async (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  try {\n    void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n    const {lastMessage} = global.chats.byId[chatId];\n\n    if(lastMessage && lastMessage.id){\n      if(messageIds.includes(lastMessage.id)){\n        const t = getGlobal()\n        setGlobal({\n          ...t,\n          chats:{\n            ...t.chats,\n            byId:{\n              ...t.chats.byId,\n              [chatId]:{\n                ...t.chats.byId[chatId],\n                lastMessage:undefined\n              }\n            }\n          }\n        })\n      }\n    }\n\n    const editingId = selectEditingId(global, chatId, threadId);\n    if (editingId && messageIds.includes(editingId)) {\n      actions.setEditingId({ messageId: undefined, tabId });\n    }\n  }catch (e){\n    console.error(e)\n  }\n\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n  if([UserIdFirstBot,UserIdChatGpt].includes(chatId)) return\n  // await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  global = getGlobal();\n  const {chatIdsDeleted} = global;\n  if(!chatIdsDeleted.includes(chatId)){\n    chatIdsDeleted.push(chatId)\n  }\n  global = {\n    ...global,\n    messagesDeleted:{\n      ...global.messagesDeleted,\n      [chatId]:[]\n    }\n  }\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nconst loadViewportMessagesCache:Record<string, boolean> = {};\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  let flag = false;\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].lastViewportIds == undefined){\n    global = safeReplaceViewportIds(global, chatId, threadId, [], tabId);\n    flag = true;\n  }\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].listedIds == undefined){\n    global = updateListedIds(global, chatId, threadId, [])\n    flag = true;\n  }\n\n  if(flag){\n    setGlobal(global)\n  }\n  const lastMessageId = chat?.lastMessage ? chat?.lastMessage.id : 0;\n  const messages1 = selectChatMessages(global,chat!.id)\n\n  let isUp = true;\n  let listedIds1 = selectListedIds(global, chatId, threadId);\n  const ids1:number[]= []\n  listedIds1?.forEach((id:number)=>{\n    if(!isLocalMessageId(id)){\n      ids1.push(id)\n    }\n  })\n\n  if((ids1.length > 1 && ids1[ids1.length - 1] < lastMessageId) || Object.keys(messages1).length === 0){\n    isUp = false;\n  }\n  let result;\n  try{\n    if(loadViewportMessagesCache[chat.id]){\n      return\n    }\n    // console.log(\"[MsgListReq]\",{chatId:chat.id,lastMessageId,isUp})\n    loadViewportMessagesCache[chat.id] = true;\n    result = await callApi('fetchMessages', {\n      chat: selectChat(global, chatId)!,\n      offsetId,\n      addOffset,\n      limit: MESSAGE_LIST_SLICE,\n      threadId,\n      lastMessageId,\n      isUp\n    });\n  }catch (e){\n\n  }\n  setTimeout(()=>{delete loadViewportMessagesCache[chat.id]},1000)\n  if (!result) {\n    return;\n  }\n\n  let {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  if(messages.length > 0 && lastMessageId < messages[messages.length - 1].id){\n    chat.lastMessage = messages[messages.length - 1];\n    if(!chats){\n      chats = []\n    }\n    chats.push(chat)\n  }\n\n  console.log(\"[MsgListRes]\",messages,users)\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nexport function getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?:ApiBotInfo;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? async (progress: number, localMessage: ApiMessage) => {\n    const messageLocalId = localMessage.id;\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : async (progress: number, localMessage: any)=>{\n\n  }\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  const user = selectUser(global,params.chat.id);\n  params.botInfo = user?.fullInfo?.botInfo ? user?.fullInfo?.botInfo:undefined\n\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params, progressCallback);\n    // @ts-ignore\n    if (progressCallback && localId) {\n      uploadProgressCallbacks.delete(localId);\n    }\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentGlobalSearchQuery,\n  selectTabState, selectUser\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      global = getGlobal();\n      const chatListIdsActive = global.chats.listIds.active;\n      if(!chatListIdsActive){\n        return;\n      }\n      const messagesList:ApiMessage[] = []\n      const chatIds:string[] = [];\n      const userIds:string[] = [];\n      const userIdList = Object.keys(global.users.byId);\n      for (let i = 0; i < userIdList.length; i++) {\n        const userId = userIdList[i]\n        const user = selectUser(global,userId)\n        if(\n          chatListIdsActive.includes(userId) && (\n            (user?.firstName && user?.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.lastName && user?.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.fullInfo && user?.fullInfo.bio && user?.fullInfo.bio.toLowerCase().indexOf(query.toLowerCase()) > -1)\n          )\n          ){\n          chatIds.push(userId)\n        }\n      }\n\n      for (let i = 0; i < chatListIdsActive.length; i++) {\n        const chatId = chatListIdsActive[i]\n        const chat = selectChat(global,chatId)\n        if(chat && chat?.title.indexOf(query) > -1 && !chatIds.includes(chat?.id)){\n          chatIds.push(chat?.id)\n        }\n        const messages = selectChatMessages(global,chatId)\n        if(messages){\n          const messageIds = Object.keys(messages);\n          for (let i = 0; i < messageIds.length; i++) {\n            const messageId = Number(messageIds[i])\n            const message = selectChatMessage(global,chatId,messageId)\n            if(message?.content && message?.content.text && message?.content.text.text){\n              if(message?.content.text.text.toLowerCase().indexOf(query.toLowerCase()) > -1){\n                messagesList.push(message)\n              }\n            }\n          }\n        }\n\n      }\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (messagesList.length === 0 || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n      global = updateGlobalSearchResults(global,messagesList,messagesList.length,\"text\",0,tabId)\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds,\n          userIds\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n\n  //\n  // const { query, tabId = getCurrentTabId() } = payload!;\n  // const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  // if (query && !chatId) {\n  //   void searchThrottled(async () => {\n  //     const result = await callApi('searchChats', { query });\n  //\n  //     global = getGlobal();\n  //     const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  //     if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n  //       global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //       setGlobal(global);\n  //       return;\n  //     }\n  //\n  //     const {\n  //       localChats, localUsers, globalChats, globalUsers,\n  //     } = result;\n  //\n  //     if (localChats.length || globalChats.length) {\n  //       global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  //     }\n  //\n  //     if (localUsers.length || globalUsers.length) {\n  //       global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  //     }\n  //\n  //     global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //     global = updateGlobalSearch(global, {\n  //       localResults: {\n  //         chatIds: localChats.map(({ id }) => id),\n  //         userIds: localUsers.map(({ id }) => id),\n  //       },\n  //       globalResults: {\n  //         ...selectTabState(global, tabId).globalSearch.globalResults,\n  //         chatIds: globalChats.map(({ id }) => id),\n  //         userIds: globalUsers.map(({ id }) => id),\n  //       },\n  //     }, tabId);\n  //\n  //     setGlobal(global);\n  //   });\n  // }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  return\n  console.log(\"searchMessagesGlobal\")\n  // let result: {\n  //   messages: ApiMessage[];\n  //   users: ApiUser[];\n  //   chats: ApiChat[];\n  //   topics?: ApiTopic[];\n  //   totalTopicsCount?: number;\n  //   totalCount: number;\n  //   nextRate: number | undefined;\n  // } | undefined;\n  //   console.log(\"searchMessagesGlobal\")\n  // if (chat) {\n  //   const localResultRequest = callApi('searchMessagesLocal', {\n  //     chat,\n  //     query,\n  //     type,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     offsetId: offsetRate,\n  //     minDate,\n  //     maxDate,\n  //   });\n  //   const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n  //     chat,\n  //     query,\n  //     limit: GLOBAL_TOPIC_SEARCH_SLICE,\n  //   }) : undefined;\n  //\n  //   const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n  //\n  //   if (localResult) {\n  //     const {\n  //       messages, users, totalCount, nextOffsetId,\n  //     } = localResult;\n  //\n  //     const { topics: localTopics, count } = topics || {};\n  //\n  //     result = {\n  //       topics: localTopics,\n  //       totalTopicsCount: count,\n  //       messages,\n  //       users,\n  //       chats: [],\n  //       totalCount,\n  //       nextRate: nextOffsetId,\n  //     };\n  //   }\n  // } else {\n  //   result = await callApi('searchMessagesGlobal', {\n  //     query,\n  //     offsetRate,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     type,\n  //     maxDate,\n  //     minDate,\n  //   });\n  // }\n  //\n  // global = getGlobal();\n  // const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  // if (!result || (query !== '' && query !== currentSearchQuery)) {\n  //   global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  //\n  // const {\n  //   messages, users, chats, totalCount, nextRate,\n  // } = result;\n  //\n  // if (chats.length) {\n  //   global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // }\n  //\n  // if (users.length) {\n  //   global = addUsers(global, buildCollectionByKey(users, 'id'));\n  // }\n  //\n  // if (messages.length) {\n  //   global = addMessages(global, messages);\n  // }\n  //\n  // global = updateGlobalSearchResults(\n  //   global,\n  //   messages,\n  //   totalCount,\n  //   type,\n  //   nextRate,\n  //   tabId,\n  // );\n  //\n  // if (result.topics) {\n  //   global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  // }\n  //\n  // const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  // global = updateGlobalSearch(global, {\n  //   foundTopicIds: sortedTopics,\n  // }, tabId);\n  //\n  // setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport {ManagementProgress} from '../../../types';\nimport type {ActionReturnType} from '../../types';\n\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addUsers,\n  updateChat,\n  updateManagement,\n  updateManagementProgress,\n  updateUsers,\n} from '../../reducers';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {ensureIsSuperGroup} from './chats';\nimport {getUserFirstOrLastName} from '../../helpers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\nimport {blobToDataUri, fetchBlob, imgToBlob} from \"../../../util/files\";\nimport {resizeImage} from \"../../../util/imageResize\";\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  const blob = await imgToBlob(file!);\n  const thumbnailUrl = await resizeImage(blob,40,40,file!.type,0.1);\n  const thumbnail = await blobToDataUri(await fetchBlob(thumbnailUrl));\n  result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n    thumbnail,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  // @ts-ignore\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  // const newUser = await callApi('fetchFullUser', { id, accessHash });\n  // if (!newUser) {\n  //   global = getGlobal();\n  //   global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  // actions.loadProfilePhotos({ profileId: userId });\n  global = getGlobal();\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\nimport {addCallback} from '../../../lib/teact/teactn';\n\nimport type {ApiChat, ApiMessage} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {ActionReturnType, GlobalState, Thread} from '../../types';\n\nimport {DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport {init as initFolderManager} from '../../../util/folderManager';\nimport {updateTabState} from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n  const { loadAllChats, preloadTopChatMessages, } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      // await loadAndReplaceMessages(global, actions);\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState,msgClientState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (\n    previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState\n  )) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (\n    connectionState === 'connectionStateReady' && authState === 'authorizationStateReady'\n  ) {\n    if(DEBUG){\n      console.log({connectionState,msgClientState,authState})\n    }\n    getActions().sync();\n  }\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiUser} from '../../../api/types';\nimport {ManagementProgress} from '../../../types';\n\nimport {throttle} from '../../../util/schedulers';\nimport {buildCollectionByKey, unique} from '../../../util/iteratees';\nimport {isUserBot, isUserId} from '../../helpers';\nimport {callApi} from '../../../api/gramjs';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {getServerTime} from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type {ActionReturnType} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  // if (!user.isContact && user.phoneNumber) {\n  //   result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  // } else {\n  //   const { id, accessHash } = user;\n  //   result = await callApi('updateContact', {\n  //     id,\n  //     accessHash,\n  //     phoneNumber: '',\n  //     firstName,\n  //     lastName,\n  //     shouldSharePhoneNumber,\n  //   });\n  // }\n  result = {};\n  global = getGlobal();\n  if (result) {\n    // actions.loadChatSettings({ chatId: userId });\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n  }\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport type {ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {InlineBotSettings} from '../../../types';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectReplyingToId,\n  selectSendAs,\n  selectTabState,\n  selectThreadTopMessageId,\n  selectUser,\n} from '../../selectors';\nimport {addChats, addUsers, removeBlockedContact} from '../../reducers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {debounce} from '../../../util/schedulers';\nimport {replaceInlineBotSettings, replaceInlineBotsIsLoading} from '../../reducers/bots';\nimport {getServerTime} from '../../../util/serverTime';\nimport {extractCurrentThemeParams} from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {openSystemFilesDialog} from \"../../../util/systemFilesDialog\";\nimport {SUPPORTED_IMAGE_CONTENT_TYPES} from \"../../../config\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      new MsgCommand(chat.id).answerCallbackButton(global,messageId,button.data);\n      // void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestUploadImage':\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      openSystemFilesDialog(\n        Array.from(SUPPORTED_IMAGE_CONTENT_TYPES).join(','),\n        async (e) => {\n          const { files } = e.target as HTMLInputElement;\n          await new MsgCommand(chat.id).requestUploadImage(global,messageId,files);\n        },\n        true\n      );\n      break;\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n  actions.focusLastMessage()\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  const global = getGlobal();\n  const user = selectUser(global,chat.id)\n  const params = {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n    botInfo:user?.fullInfo?.botInfo\n  }\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params);\n  }\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\nimport {isLocalMessageId} from \"../../helpers\";\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n      if(!isLocalMessageId(message.id!)){\n        // global = updateChat(global, update.chatId, {\n        //   unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        //   ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        // });\n        global = updateChat(global, update.chatId, {\n          unreadCount:0,\n          unreadMentionsCount:0,\n        });\n      }\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import {ApiMessageEntityTypes} from \"../../../api/types\";\n\nexport function parseCodeBlock(text:string,entities?:any[]) {\n  const reg = /```(.*?)\\n([\\s\\S]*?)```/g;\n  if(text.indexOf(\"```\") >= 0 && text.split(\"```\").length % 2 === 0){\n    text =  text+\"```\";\n  }\n  let result = text;\n  let match;\n  let codeBlock = [];\n  let i = 0;\n  let j = 0;\n  while (match = reg.exec(text)) {\n    codeBlock.push({\n      type:ApiMessageEntityTypes.Pre,\n      language: match[1],\n      offset: match.index - 6 * i - j,\n      length: match[2].length\n    });\n    j += match[1].length+1\n    result = result.replace(match[0],  match[2]);\n    ++i;\n  }\n  if(!entities){\n    entities = []\n  }\n  return {\n    text:result.endsWith(\"```\") ? result.substring(0,result.indexOf(\"```\")): result,\n    entities:[\n      ...codeBlock,\n      ...entities\n    ]\n  };\n}\n\nfunction parseMentionName(text:string) {\n  const regex = /@\\w+/g;\n  let match;\n  let result = [];\n  while ((match = regex.exec(text)) !== null) {\n    result.push({\n      type:ApiMessageEntityTypes.MentionName,\n      offset: match.index,\n      length: match[0].length\n    });\n  }\n  return result\n}\nexport function parseCmd(text: string, commands: string[]) {\n  if (commands.length === 0) return [];\n  const regex = new RegExp(`(?<=\\\\/)(${commands.join('|')})\\\\b`, 'g');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    matches.push({\n      type: 'MessageEntityBotCommand',\n      offset: match.index-1,\n      length: match[0].length+1\n    });\n  }\n  return matches;\n}\n\nexport function parseEntities(text:string,commands:string[]){\n  return [\n    ...parseCmd(text,commands),\n    ...parseMentionName(text),\n  ]\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isLocalMessageId,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport parseMessageInput from \"../../../util/parseMessageInput\";\nimport { handleBotCmdText, handleMessageTextCode } from '../../../worker/msg/msgHelper';\n\nconst ANIMATION_DELAY = 350;\n\nconst handleMessageEntities = (global:GlobalState,chatId:string,message:ApiMessage|Partial<ApiMessage>)=>{\n  if(message.content?.text && (!message.content.text.entities || message.content.text.entities?.length === 0)){\n    const user = selectUser(global,chatId)\n    message = handleMessageTextCode(message)\n    if(user && user.fullInfo?.botInfo){\n      message = handleBotCmdText(message,user.fullInfo.botInfo) as ApiMessage\n    }\n  }\n  message.isOutgoing = false\n  return message\n}\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      let {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      message = handleMessageEntities(global,chatId,message)\n      \n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      let { chatId, localId, message } = update;\n      message = handleMessageEntities(global,chatId,message) as ApiMessage\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n      let messageNew = message\n      if (!messageNew.isOutgoing && messageNew.content\n        && messageNew.content.text && messageNew.content.text.text && !messageNew.content.text!.entities) {\n        const {text, entities} = parseMessageInput(messageNew.content.text.text);\n        messageNew.content.text.text = text;\n        messageNew.content.text.entities = entities\n      }\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...messageNew,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error && error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n\n  // Channel update\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import {ApiBotInfo, ApiMessage} from \"../../api/types\";\nimport {parseCodeBlock, parseEntities} from \"../share/utils/stringParse\";\n\nexport function handleMessageTextCode(msgSend:Partial<ApiMessage> | ApiMessage){\n  if(msgSend.content?.text && msgSend.content.text.text){\n    const {entities} = msgSend.content.text\n    // @ts-ignore\n    msgSend.content.text = {\n      ...parseCodeBlock(msgSend.content.text?.text,entities)\n    }\n  }\n  return msgSend\n}\n\nexport function handleBotCmdText(msgSend:Partial<ApiMessage> | ApiMessage,botInfo:ApiBotInfo){\n  const commands:string[] = []\n  if(botInfo && botInfo.commands){\n    botInfo.commands.forEach(cmd=>commands.push(cmd.command))\n  }\n  if(msgSend.content && msgSend.content.text && msgSend.content.text.text){\n    if(msgSend.content.text!.entities && msgSend.content.text!.entities.find(e=>{\n      // @ts-ignore\n      return e.cipher\n    })){\n    }else{\n      // @ts-ignore\n      msgSend.content.text!.entities = [\n        ...msgSend.content.text!.entities||[],\n        ...parseEntities(msgSend.content.text!.text!,commands)\n      ]\n    }\n  }\n  return msgSend;\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiUserStatus} from '../../../api/types';\n\nimport {\n  addUsers,\n  addUserStatuses,\n  deleteContact,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUser,\n} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {selectChat, selectIsCurrentUserPremium, selectUser} from '../../selectors';\nimport type {ActionReturnType, RequiredGlobalState} from '../../types';\nimport {AiReplyHistoryRole, AiReplyHistoryType} from \"../../types\";\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case \"updateGlobalUpdate\":\n      const {data} = update\n      switch (data.action){\n        case \"updateChatGptHistory\":\n          const chatId = data.payload!.chatId;\n          return {\n            ...global,\n            chatGptAskHistory:{\n              ...global.chatGptAskHistory,\n              [chatId]:{\n                ...global.chatGptAskHistory[chatId],\n                [data.payload!.msgIdAssistant]:data.payload!.msgIdUser\n              }\n            }\n          }\n        case \"updateBot\":\n          const userBotUpdate = {\n            ...global.users.byId[data.payload!.botInfo.botId],\n            bot:data.payload!.bot\n          };\n          if(data.payload!.bot.chatGptConfig && data.payload!.bot.chatGptConfig.api_key){\n            localStorage.setItem(\"open-api-key\" , data.payload!.bot.chatGptConfig.api_key)\n          }\n          return updateUser(global,data.payload!.botInfo.botId,userBotUpdate)\n        case \"clearHistory\":\n          actions.updateGlobal({\n            messages:{\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [data.payload!.chatId]:{\n                  ...global.messages.byChatId[data.payload!.chatId],\n                  byId:{},\n                  threadsById:{\n                    \"-1\":{\n                      ...global.messages.byChatId[data.payload!.chatId].threadsById[\"-1\"],\n                      lastScrollOffset:undefined,\n                      lastViewportIds: [],\n                      listedIds:[]\n                    }\n                  }\n                }\n              }\n            },\n            chats:{\n              ...global.chats,\n              byId:{\n                ...global.chats.byId,\n                [data.payload!.chatId]:{\n                  ...global.chats.byId[data.payload!.chatId],\n                  lastMessage:undefined\n                }\n              }\n            }\n          })\n          break;\n        case \"loadChats\":\n        case \"createBot\":\n          actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          return\n        case \"removeBot\":\n          if(global.chats.listIds && global.chats.listIds.active){\n            let listIds_active = global.chats.listIds.active\n            listIds_active = listIds_active!.filter(id=>id !== data.payload!.chatId)\n            actions.updateGlobal({\n              chats:{\n                ...global.chats,\n                listIds: {\n                  ...global.chats.listIds,\n                  active:listIds_active\n                },\n                totalCount: {\n                  ...global.chats.totalCount,\n                  all:listIds_active.length\n                }\n              }\n            })\n            // @ts-ignore\n            actions.openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n            actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          }\n          return\n      }\n\n      const chat_listIds_active = global.chats.listIds.active || []\n      if(data.chats){\n        for (let i = 0; i < data.chats.length; i++) {\n          const chat1 = data.chats[i]\n          const chat = selectChat(global,chat1.id)\n          if(!chat_listIds_active.includes(chat1.id)){\n            chat_listIds_active.push(chat1.id)\n          }\n          if(chat){\n            global = replaceChats(global,{\n              ...global.chats.byId,\n              [chat1.id]:{\n                ...chat,\n                ...chat1,\n              }\n            });\n          }else{\n            const chatFolders = global.chatFolders;\n            if(!chatFolders.byId[\"1\"].includedChatIds.includes(chat1.id)){\n              chatFolders.byId[\"1\"].includedChatIds.push(chat1.id)\n            }\n            global = {\n              ...global,\n              chats:{\n                ...global.chats,\n                byId:{\n                  ...global.chats.byId,\n                  [chat1.id]:{\n                    ...chat1,\n                  }\n                }\n              },\n              chatFolders\n            }\n          }\n        }\n      }\n      if(data.users){\n        for (let i = 0; i < data.users.length; i++) {\n          const user1 = data.users[i]\n          const user = selectUser(global,user1.id)\n          if(user){\n            global = replaceUsers(global,{\n              ...global.users.byId,\n              [user1.id]:{\n                ...user,\n                ...user1,\n              }\n            });\n          }else{\n            global = addUsers(global,{\n              [user1.id]:{\n                ...user1,\n              }\n            });\n            if(user1.fullInfo && user1.fullInfo.botInfo){\n              global = addUserStatuses(global,{\n                [user1.id]:{\n                  type:'userStatusEmpty'\n                }\n              });\n            }\n          }\n        }\n      }\n      actions.updateGlobal({\n        chats:{\n          ...global.chats,\n          listIds:{\n            ...global.chats.listIds,\n            active:chat_listIds_active\n          },\n          totalCount:{\n            all:chat_listIds_active.length\n          }\n        },\n        users:global.users,\n        chatFolders:global.chatFolders,\n      })\n      break\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useMemo,} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {AnimationLevel, ISettings} from '../../../types';\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {ApiChat} from '../../../api/types';\nimport type {GlobalState, TabState} from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME,\n  APP_VERSION,\n  ASSET_CACHE_NAME,\n  BETA_CHANGELOG_URL,\n  CLOUD_MESSAGE_ENABLE,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  LANG_CACHE_NAME,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {IS_PWA} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport {formatDateToString} from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport {setPermanentWebVersion} from '../../../util/permanentWebVersion';\nimport {clearWebsync} from '../../../util/websync';\nimport {\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport {isChatArchived} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport {useHotkeys} from '../../../hooks/useHotkeys';\nimport {getPromptInstall} from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport * as cacheApi from '../../../util/cacheApi';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectFolder: ()=>void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    currentAccountAddress?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectFolder,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n  currentAccountAddress,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut,\n    updateGlobal,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleClearCache = useCallback(async () => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    await cacheApi.clear(LANG_CACHE_NAME);\n    await cacheApi.clear(ASSET_CACHE_NAME);\n\n    setTimeout(()=>{\n      location.reload();\n    },500)\n  }, [openUrl]);\n\n  const handleSignOutClick = useCallback(() => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    setTimeout(()=>{\n      signOut({ forceInitApi: true });\n      updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n      },300)\n  }, [openChat,signOut]);\n\n  const handleLoginClick = useCallback(() => {\n\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    updateGlobal({\n      authState:\"authorizationStateWaitSignPassword\"\n    })\n  }, [updateGlobal]);\n\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"folder\"\n        onClick={onSelectFolder}\n      >\n        {lang('Filters')}\n      </MenuItem>\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"settings\"\n          onClick={onSelectSettings}\n        >\n          {lang('Settings')}\n        </MenuItem>\n      }\n      {/*{*/}\n      {/*  currentUserId  &&*/}\n      {/*  <MenuItem*/}\n      {/*    icon=\"saved-messages\"*/}\n      {/*    onClick={handleSelectSaved}*/}\n      {/*  >*/}\n      {/*    {lang('SavedMessages')}*/}\n      {/*  </MenuItem>*/}\n      {/*}*/}\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"stop\"\n        onClick={handleClearCache}\n      >\n        清除缓存\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n      {\n        !CLOUD_MESSAGE_ENABLE ?\n          <></>:\n          currentAccountAddress  ?\n        <MenuItem\n          icon=\"logout\"\n          onClick={handleSignOutClick}\n        >\n          {lang('SignOut')}\n        </MenuItem>:\n          <MenuItem\n            icon=\"user\"\n            onClick={handleLoginClick}\n          >\n            {lang('Login')}\n          </MenuItem>\n      }\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,currentAccountAddress\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.messages) : false,\n      currentUserId,\n      currentAccountAddress,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, memo, useEffect } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport forceReflow from '../../util/forceReflow';\nimport renderText from '../common/helpers/renderText';\n\nimport './Tab.scss';\n\ntype OwnProps = {\n  className?: string;\n  title: string;\n  isActive?: boolean;\n  isBlocked?: boolean;\n  badgeCount?: number;\n  isBadgeActive?: boolean;\n  previousActiveTab?: number;\n  onClick: (arg: number) => void;\n  clickArg: number;\n};\n\nconst classNames = {\n  active: 'Tab--active',\n  badgeActive: 'Tab__badge--active',\n};\n\nconst Tab: FC<OwnProps> = ({\n  className,\n  title,\n  isActive,\n  isBlocked,\n  badgeCount,\n  isBadgeActive,\n  previousActiveTab,\n  onClick,\n  clickArg,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const tabRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Set initial active state\n    if (isActive && previousActiveTab === undefined && tabRef.current) {\n      tabRef.current.classList.add(classNames.active);\n    }\n\n    if (!isActive || previousActiveTab === undefined) {\n      return;\n    }\n\n    const tabEl = tabRef.current!;\n    const prevTabEl = tabEl.parentElement!.children[previousActiveTab];\n    if (!prevTabEl) {\n      // The number of tabs in the parent component has decreased. It is necessary to add the active tab class name.\n      if (isActive && !tabEl.classList.contains(classNames.active)) {\n        tabEl.classList.add(classNames.active);\n      }\n      return;\n    }\n\n    const platformEl = tabEl.querySelector<HTMLElement>('.platform')!;\n    const prevPlatformEl = prevTabEl.querySelector<HTMLElement>('.platform')!;\n\n    // We move and resize the platform, so it repeats the position and size of the previous one\n    const shiftLeft = prevPlatformEl.parentElement!.offsetLeft - platformEl.parentElement!.offsetLeft;\n    const scaleFactor = prevPlatformEl.clientWidth / platformEl.clientWidth;\n\n    prevPlatformEl.classList.remove('animate');\n    platformEl.classList.remove('animate');\n    platformEl.style.transform = `translate3d(${shiftLeft}px, 0, 0) scale3d(${scaleFactor}, 1, 1)`;\n    forceReflow(platformEl);\n    platformEl.classList.add('animate');\n    platformEl.style.transform = 'none';\n\n    prevTabEl.classList.remove(classNames.active);\n    tabEl.classList.add(classNames.active);\n  }, [isActive, previousActiveTab]);\n\n  return (\n    <div\n      className={buildClassName('Tab', className)}\n      onClick={() => onClick(clickArg)}\n      ref={tabRef}\n    >\n      <span>\n        {renderText(title)}\n        {Boolean(badgeCount) && (\n          <span className={buildClassName('badge', isBadgeActive && classNames.badgeActive)}>{badgeCount}</span>\n        )}\n        {isBlocked && <i className=\"icon-lock-badge blocked\" />}\n        <i className=\"platform\" />\n      </span>\n    </div>\n  );\n};\n\nexport default memo(Tab);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport { IS_ANDROID, IS_IOS } from '../../util/environment';\nimport fastSmoothScrollHorizontal from '../../util/fastSmoothScrollHorizontal';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Tab from './Tab';\n\nimport './TabList.scss';\n\nexport type TabWithProperties = {\n  id?: number;\n  title: string;\n  badgeCount?: number;\n  isBlocked?: boolean;\n  isBadgeActive?: boolean;\n};\n\ntype OwnProps = {\n  tabs: readonly TabWithProperties[];\n  areFolders?: boolean;\n  activeTab: number;\n  big?: boolean;\n  onSwitchTab: (index: number) => void;\n};\n\nconst TAB_SCROLL_THRESHOLD_PX = 16;\n// Should match duration from `--slide-transition` CSS variable\nconst SCROLL_DURATION = IS_IOS ? 450 : IS_ANDROID ? 400 : 300;\n\nconst TabList: FC<OwnProps> = ({\n  tabs, areFolders, activeTab, big, onSwitchTab,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousActiveTab = usePrevious(activeTab);\n\n  useHorizontalScroll(containerRef, undefined, true);\n\n  // Scroll container to place active tab in the center\n  useEffect(() => {\n    const container = containerRef.current!;\n    const { scrollWidth, offsetWidth, scrollLeft } = container;\n    if (scrollWidth <= offsetWidth) {\n      return;\n    }\n\n    const activeTabElement = container.childNodes[activeTab] as HTMLElement | null;\n    if (!activeTabElement) {\n      return;\n    }\n\n    const { offsetLeft: activeTabOffsetLeft, offsetWidth: activeTabOffsetWidth } = activeTabElement;\n    const newLeft = activeTabOffsetLeft - (offsetWidth / 2) + (activeTabOffsetWidth / 2);\n\n    // Prevent scrolling by only a couple of pixels, which doesn't look smooth\n    if (Math.abs(newLeft - scrollLeft) < TAB_SCROLL_THRESHOLD_PX) {\n      return;\n    }\n\n    fastSmoothScrollHorizontal(container, newLeft, SCROLL_DURATION);\n  }, [activeTab]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      className={`TabList no-selection no-scrollbar ${big ? 'big' : ''}`}\n      ref={containerRef}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {tabs.map((tab, i) => (\n        <Tab\n          key={tab.id ?? tab.title}\n          // TODO Remove dependency on usage context\n          title={(!areFolders || tab.id === ALL_FOLDER_ID) ? lang(tab.title) : tab.title}\n          isActive={i === activeTab}\n          isBlocked={tab.isBlocked}\n          badgeCount={tab.badgeCount}\n          isBadgeActive={tab.isBadgeActive}\n          previousActiveTab={previousActiveTab}\n          onClick={onSwitchTab}\n          clickArg={i}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(TabList);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {loadAllChats,createChat} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    onNewChannel();\n    setTimeout(()=>{\n      setIsMenuOpen(false);\n    },200)\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-add\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={false}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useRef, useState,} from '../../../lib/teact/teact';\n\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {FolderEditDispatch} from '../../../hooks/reducers/useFoldersReducer';\n\nimport {IS_TOUCH_ENV} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\nimport * as cacheApi from '../../../util/cacheApi';\n\nimport './LeftMain.scss';\nimport {getActions} from '../../../global';\nimport {LANG_CACHE_NAME} from \"../../../config\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel,openChat,sendBotCommand,focusLastMessage } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectFolder = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.Folders);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectSettings = useCallback(() => {\n    openChat({ id: UserIdFirstBot, shouldReplaceHistory: true }, { forceOnHeavyAnimation: true });\n    focusLastMessage()\n    setTimeout(()=>{\n      sendBotCommand({\n        chatId:UserIdFirstBot,\n        command:\"/start\"\n      })\n    },300)\n    // onSettingsScreenSelect(SettingsScreens.Main);\n    // onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(async () => {\n    await cacheApi.clear(LANG_CACHE_NAME);\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep2);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectFolder={handleSelectFolder}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst leftColumnContent = window.sessionStorage.getItem(\"LeftColumnContent\") || LeftColumnContent.ChatList;\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      // setContent_(LeftColumnContent.NewChannelStep1);\n      // return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.Folders:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n\n    // console.log(chatId,{isChatWithBot,canRestartBot},Boolean(selectIsChatBotNotStarted(global, chatId)),canStartBot)\n\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId,setEditingId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n    setEditingId({ messageId });\n    // setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'requestUploadImage':\n        return <i className=\"icon-photo\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\nimport {TEXT_AI_THINKING} from \"../../../worker/setting\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    (message.senderId === \"1\") && 'selfSend',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message) && message.content;\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleEditClick = useCallback(() => {\n    if(message.senderId === \"1\" && message.content.text && message.content.text.text && !message.content.text.text.startsWith(\"/\")){\n      if (handleDoubleClick) {\n        handleDoubleClick();\n      }\n      return false\n    }\n  },[])\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if(message.content.text?.text === TEXT_AI_THINKING){\n      return <DotAnimation className=\"status\" content={TEXT_AI_THINKING.replace(\"...\",\"\")} />\n    }\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <>\n            <div className={textContentClass} dir=\"auto\"\n                 onDoubleClick={handleEditClick}>\n              {renderMessageText()}\n              {isTranslationPending && (\n                <div className=\"translation-animation\">\n                  <div className=\"text-loading\">\n                    {renderMessageText(true)}\n                  </div>\n                </div>\n              )}\n              {metaPosition === 'in-text' && renderReactionsAndMeta()}\n            </div>\n\n          </>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    if(sender?.id === \"1\"){\n      return\n    }\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      // onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    let {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    withAvatar = true;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    let canShowSender = withSenderName || withAvatar || forceSenderName;\n\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      {/*<span>{lang('UnreadMessages')}</span>*/}\n      <span></span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,focusMessage\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    // if (areMessagesLoaded) {\n    //   memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    // }\n    memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      // newScrollTop = Math.min(\n      //   unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n      //   scrollHeight - scrollOffset,\n      // );\n      newScrollTop = scrollHeight - scrollOffset;\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n    console.log({scrollTop, scrollHeight, offsetHeight})\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  let withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  let noAvatars = Boolean(!withUsers || isChannelChat);\n  noAvatars = false\n  withUsers = true;\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n\n    if (!isShown) {\n      return;\n    }\n    if (messageListType !== 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport {resizeImage, scaleImage} from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let thumbBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n\n  }\n\n  return {\n    blobUrl,\n    thumbBlobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport type { OwnProps as ButtonProps } from './Button';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate(e);\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate(e);\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n    onActivate(e);\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      // onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      // onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n  canSendVideos = false;\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n      true\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false),true);\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiDraft, GlobalState, MessageListType, TabState,} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatMember,\n  ApiFormattedText,\n  ApiMessage,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type {InlineBotSettings, ISettings} from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_MODAL_ID,\n  MAX_UPLOAD_FILEPART_SIZE,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport {IS_IOS, IS_VOICE_RECORDING_SUPPORTED} from '../../../util/environment';\nimport {MEMO_EMPTY_ARRAY} from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport {formatMediaDuration, formatVoiceRecordDuration} from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, {prepareAttachmentsToSend} from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport {insertHtmlInSelection} from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport {isSelectionInsideInput} from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport {getServerTime} from '../../../util/serverTime';\nimport {selectCurrentLimit} from '../../../global/selectors/limits';\nimport {buildCustomEmojiHtml} from './helpers/customEmoji';\nimport {processMessageInputForCustomEmoji} from '../../../util/customEmojiManager';\nimport {getTextWithEntitiesAsHtml} from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {useStateRef} from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, {DropAreaState} from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n  const [speechRecognizing, setSpeechRecognizing] = useState(false);\n\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    // if(speechRecognizing){\n    //   return MainButtonState.Send;\n    // }\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, speechRecognizing,editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n    // if(speechRecognizing){\n    //   recognition.stop();\n    //   setSpeechRecognizing(false);\n    //   return\n    // }\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          // recognition.start().then((res:string)=>{\n          //   setHtml(res);\n          // }).catch((e)=>{\n          //   console.error(e)\n          //   // setSpeechRecognizing(false);\n          // });\n          // setSpeechRecognizing(true);\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n  const [passwordOpen,setPasswordOpen] = useState(true);\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              (activeVoiceRecording )&& windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {(activeVoiceRecording ) && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {(activeVoiceRecording) && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={ ()=>{\n            // recognition.stop();\n            // setSpeechRecognizing(false)\n            stopRecordingVoice()\n          } }\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState,\"mainSendBtn\", !isReady && 'not-ready', ( activeVoiceRecording) && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport Account from \"../../worker/share/Account\";\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n               {canManage && !isInsideTopic && (\n                 <Button\n                   round\n                   color=\"translucent\"\n                   size=\"smaller\"\n                   ariaLabel={lang('Edit')}\n                   onClick={handleToggleManagement}\n                 >\n                   <i className=\"icon-edit\" />\n                 </Button>\n               )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport Modal from './Modal';\nimport PasswordMonkey from \"../common/PasswordMonkey\";\nimport PasswordForm from \"../common/PasswordForm\";\nimport {passwordCheck} from \"../../worker/share/utils/helpers\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nexport type PasswordHelperType = undefined | \"showMnemonic\" | \"messageEncryptPassword\"\n\nconst PasswordModal: FC<OwnProps> = ({}: OwnProps) => {\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [noBackdropClose, setNoBackdropClose] = useState<boolean>(false);\n\n  const [showHitInput, setShowHitInput] = useState<boolean>(false);\n  const [passwordHelper, setPasswordHelper] = useState<PasswordHelperType>(undefined);\n  const [validationError, setValidationError] = useState<string>('');\n  const [hint, setHint] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const lang = useLang();\n\n  const handleSubmit = useCallback((password) => {\n    if (!passwordCheck(password)) {\n      setValidationError(lang(\"PasswordTipsCheck\"))\n      return\n    }\n    if (onConfirm) {\n      onConfirm({password, hint});\n      setOpen(false)\n    }\n  }, [hint]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        setOpen(true);\n        // @ts-ignore\n        onConfirm = e.detail.callback;\n        // @ts-ignore\n        setNoBackdropClose(e.detail.noBackdropClose)\n        // @ts-ignore\n        setPasswordHelper(e.detail.passwordHelper)\n        // @ts-ignore\n        setHint(e.detail.hint)\n        // @ts-ignore\n        setShowHitInput(!e.detail.hideHitInput);\n      }\n    }\n    document.addEventListener('password', evt);\n    return () => {\n      document.removeEventListener('password', evt);\n    }\n  }, [setHint, setShowHitInput, open])\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  return (\n    <Modal\n      hasCloseButton={!noBackdropClose}\n      isOpen={open}\n      noBackdropClose={noBackdropClose}\n      onClose={() => {\n        if(noBackdropClose){\n          return false\n        }\n        if (onConfirm) {\n          onConfirm({password: \"\", hint: \"\"});\n        }\n        setOpen(false)\n      }}\n      title=\"Password\"\n      className=\"\"\n    >\n      <div className=\"settings-content password-form custom-scroll background\">\n        <div className=\"settings-content-header no-border\">\n          <PasswordMonkey isBig isPasswordVisible={shouldShowPassword}/>\n        </div>\n        <div className=\"pt-0 pb-0 mb-2 background\">\n          {\n            showHitInput &&\n            <InputText\n              id=\"pwd-hint\"\n              type={\"text\"}\n              label={lang(\"PasswordTipsLocalHint\")}\n              onChange={(e) => {\n                setHint(e.target.value)\n              }}\n              value={hint}\n              autoComplete=\"given-name\"\n            />\n          }\n          <PasswordForm\n            error={validationError}\n            hint={(!showHitInput && hint) ? hint : lang(\"PasswordTipsLocalPlaceholder\")}\n            shouldDisablePasswordManager={true}\n            submitLabel={lang('Next')}\n            clearError={handleClearError}\n            isLoading={false}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={true}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n        {\n          passwordHelper === \"messageEncryptPassword\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"PasswordTipsLocalStorage\")}</li>\n              <li>{lang(\"PasswordTipsLocalStorage1\")}</li>\n            </ul>\n          </div>\n        }\n        {\n          passwordHelper === \"showMnemonic\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"密码不会存储服务器,跟账户助记词直接相关，请牢记密码和妥善保管助记词\")}</li>\n            </ul>\n          </div>\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PasswordModal);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {useCallback, useEffect, useRef,} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useAsync from '../../hooks/useAsync';\n\nimport Loading from '../ui/Loading';\n\nimport blankUrl from '../../assets/blank.png';\nimport Button from \"../ui/Button\";\n\ntype OwnProps ={ content?:string,tips?:string};\n\nconst DATA_PREFIX = 'wai://';\nconst QR_SIZE = 280;\n\nlet qrCodeStylingPromise: Promise<typeof import('qr-code-styling')>;\n\nfunction ensureQrCodeStyling() {\n  if (!qrCodeStylingPromise) {\n    qrCodeStylingPromise = import('qr-code-styling');\n  }\n  return qrCodeStylingPromise;\n}\n\nconst QrCode: FC<OwnProps> = ({content,tips}) => {\n\n  // @ts-ignore\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  const [isQrMounted, markQrMounted, unmarkQrMounted] = useFlag();\n\n  const { result: qrCode } = useAsync(async () => {\n    const QrCodeStyling = (await ensureQrCodeStyling()).default;\n    return new QrCodeStyling({\n      width: QR_SIZE,\n      height: QR_SIZE,\n      // image: blankUrl,\n      margin: 10,\n      type: 'svg',\n      dotsOptions: {\n        type: 'rounded',\n      },\n      cornersSquareOptions: {\n        type: 'extra-rounded',\n      },\n      imageOptions: {\n        imageSize: 0.4,\n        margin: 8,\n      },\n      qrOptions: {\n        errorCorrectionLevel: 'M',\n      },\n    });\n  }, []);\n\n  const transitionClassNames = useMediaTransition(isQrMounted);\n\n  useEffect(() => {\n    if (!qrCode) {\n      return () => {\n        unmarkQrMounted();\n      };\n    }\n\n    const container = qrCodeRef.current!;\n    const data = `${DATA_PREFIX}${content}`;\n    qrCode.update({\n      data,\n    });\n\n    if (!isQrMounted) {\n      qrCode.append(container);\n      markQrMounted();\n    }\n    return undefined;\n  }, [content,isQrMounted, markQrMounted, unmarkQrMounted, qrCode]);\n  const onDownload = useCallback(()=>{\n    if(qrCode){\n      qrCode.download()\n    }\n  },[qrCode])\n  return (\n    <div id=\"auth-qr-form\" className=\"custom-scroll\">\n      <div className=\"qr-outer\">\n        <div\n          className={buildClassName('qr-inner', transitionClassNames)}\n          key=\"qr-inner\"\n        >\n          <div\n            key=\"qr-container\"\n            className=\"qr-container\"\n            ref={qrCodeRef}\n            style={`width: ${QR_SIZE}px; height: ${QR_SIZE}px`}\n          />\n        </div>\n        {!isQrMounted && <div className=\"qr-loading\"><Loading /></div>}\n      </div>\n      <div className={'pt-2'} style={\"text-align:center\"}><code>{tips}</code></div>\n\n      <Button isText disabled={!isQrMounted} onClick={onDownload}>下载</Button>\n    </div>\n  );\n};\n\nexport default QrCode;\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport Modal from './Modal';\nimport {getActions, withGlobal} from \"../../global\";\nimport {getPasswordFromEvent} from \"../../worker/share/utils/password\";\nimport Account from \"../../worker/share/Account\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport {aesEncrypt} from \"../../util/passcode\";\nimport {hashSha256} from \"../../worker/share/utils/helpers\";\nimport {PbQrCode} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {QrCodeType} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport QrCode from \"../common/QrCode\";\n\ntype OwnProps = {};\ntype StateProps = {\n  showMnemonicModal?:boolean\n};\n\nconst MnemonicModal: FC<OwnProps & StateProps> = ({showMnemonicModal}) => {\n  const {updateGlobal,showNotification} = getActions();\n  const [mnemonic,setMnemonic] = useState(\"\");\n  const [mnemonicEncrypt,setMnemonicEncrypt] = useState(\"\");\n\n  const onCloseModal = useCallback(async ()=>{\n    setMnemonic(\"\")\n    setMnemonicEncrypt(\"\")\n    updateGlobal({showMnemonicModal:undefined})\n  },[])\n\n  useEffect(()=>{\n    const init = async ()=>{\n      const {password} = await getPasswordFromEvent(undefined,true,'showMnemonic')\n      if(!password){\n        updateGlobal({showMnemonicModal:undefined})\n        return\n      }\n      const account = Account.getCurrentAccount();\n      if(!account?.getSession()){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"没有登录\"})\n      }\n      const res = await account?.verifySession(account?.getSession(),password);\n      if(!res){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"密码不正确\"})\n      }\n      const entropy = await Account.getCurrentAccount()!.getEntropy();\n      const m = Mnemonic.fromEntropy(entropy);\n      const words = m.getWords();\n      const e = await aesEncrypt(words,Buffer.from(hashSha256(password),'hex'))\n      setMnemonicEncrypt(Buffer.from(new PbQrCode({\n        type:QrCodeType.QrCodeType_MNEMONIC,\n        data:Buffer.from(e)\n      }).pack().getPbData()).toString(\"hex\"))\n      setMnemonic(words);\n    }\n    if(showMnemonicModal){\n      init();\n    }\n\n  },[showMnemonicModal])\n\n  if(!mnemonic){\n    return null\n  }\n  return (\n    <Modal title={\"助记词\"} isOpen={!!showMnemonicModal} hasCloseButton={true} onClose={onCloseModal}>\n      <QrCode content={mnemonicEncrypt} tips={mnemonic} />\n    </Modal>\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      showMnemonicModal,\n    } = global;\n    return {\n      showMnemonicModal,\n    };\n  },\n)(MnemonicModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from \"../../global\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MsgCommandSetting from '../../worker/msg/MsgCommandSetting';\n\ntype OwnProps = {};\ntype StateProps = {\n  botIds:string[],\n  showPickBotModal?:boolean\n};\n\nconst PickBotModal: FC<OwnProps & StateProps> = ({showPickBotModal,botIds}) => {\n  const [search,setSearch] = useState(\"\");\n  const {updateGlobal} = getActions();\n\n  const handleSelect = useCallback((userId: string) => {\n    MsgCommandSetting.onSelectSyncBot(userId)\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  const handleClose = useCallback(() => {\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={!!showPickBotModal}\n      chatOrUserIds={botIds}\n      searchPlaceholder={\"请选择要同步的机器人\"}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={()=>{}}\n      onSelectChatOrUser={handleSelect}\n      onClose={handleClose}\n    />\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      chatIdsDeleted,\n      showPickBotModal,\n      users:{\n        byId:users\n      }\n    } = global;\n    const botIds = Object.keys(users).filter(id=>id !== \"1\").filter(id=>!chatIdsDeleted.includes(id))\n    return {\n      botIds,\n      showPickBotModal,\n    };\n  },\n)(PickBotModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport Modal from './Modal';\nimport {ShowModalFromEventPayload} from \"../../worker/share/utils/modal\";\nimport Button from \"./Button\";\nimport TextArea from \"./TextArea\";\nimport {ChangeEvent} from \"react\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nconst GlobalModal: FC<OwnProps> = ({}: OwnProps) => {\n  const [payload, setPayload] = useState<ShowModalFromEventPayload|undefined>(undefined);\n  const [open, setOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(\"\");\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    let {value} = e.target\n    setValue(value);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (onConfirm) {\n      if(payload?.inputType === 'number'){\n        onConfirm({value});\n      }else{\n        onConfirm({value:value.trim()});\n      }\n      setOpen(false)\n      setValue(\"\")\n    }\n  }, [value]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        //@ts-ignore\n        const payload = e.detail.payload;\n        setPayload({\n          type:\"singleInput\",\n          title:\"请输入\",\n          ...payload,\n        })\n        //@ts-ignore\n        onConfirm = e.detail.callback;\n        setOpen(true);\n        setValue(payload.initVal|| \"\")\n      }\n    }\n    document.addEventListener('modal', evt);\n    return () => {\n      document.removeEventListener('modal', evt);\n    }\n  }, [open])\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        // if (onConfirm) {\n        //   onConfirm({value: \"\"});\n        // }\n        setValue(\"\")\n        setOpen(false)\n      }}\n      title={payload && payload.title}\n      className=\"\"\n    >\n      {\n        payload && (payload.type === 'multipleInput' || payload.type === 'singleInput' )&&\n        <div className=\"settings-content password-form custom-scroll background\">\n          <div className=\"pt-4 pb-4 mb-2 background\">\n            {\n              payload.type !== 'multipleInput' ?\n                <InputText\n                  type={payload.inputType || \"text\"}\n                  label={payload.placeholder||\"\"}\n                  step={payload.step}\n                  min={payload.min}\n                  max={payload.max}\n                  onChange={handleChange}\n                  value={value}\n                  autoComplete=\"given-name\"\n                />:\n                <TextArea\n                  value={value}\n                  onChange={handleChange}\n                  label={payload.placeholder||\"\"}\n                  disabled={false}\n                />\n            }\n          </div>\n          <Button type=\"button\" onClick={handleSubmit} ripple={true} isLoading={false} disabled={false}>\n            下一步\n          </Button>\n        </div>\n      }\n\n    </Modal>\n  );\n};\n\nexport default memo(GlobalModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\nimport PasswordModal from \"../ui/PasswordModal\";\nimport Modal from \"../ui/Modal\";\nimport QrCode from \"../common/QrCode\";\nimport {UserIdFirstBot} from \"../../worker/setting\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MnemonicModal from \"../ui/MnemonicModal\";\nimport PickBotModal from \"../ui/PickBotModal\";\nimport GlobalModal from \"../ui/GlobalModal\";\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n      <PasswordModal/>\n      <GlobalModal/>\n      <MnemonicModal />\n      <PickBotModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../global';\n\nimport type {GlobalState} from '../../global/types';\n\nimport {LOCAL_TGS_URLS} from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport {decryptSession} from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return <div className={styles.help}></div>\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","utterance","SpeechSynthesisUtterance","selectedText","getSelection","toString","document","selection","createRange","speechSynthesis","speak","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","content","saveDraft","draft","entities","shouldForce","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","length","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","toggleMessageSelectAll","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","async","msgId","messages1","i","time","currentTs","MsgCommandSetting","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","previousGlobal","parse","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","LoadMoreDirection","isBudgetPreload","isRestricted","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","offsetId","isOutlying","historyIds","newViewportIds","areSomeLocal","areAllLocal","getViewportSlice","safeReplaceViewportIds","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","MESSAGE_LIST_SLICE","replyOriginForId","threadUpdate","callApi","MESSAGE_DELETED","updateChatMessage","addUsers","buildCollectionByKey","users","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","attachments","a","shouldSendAsSpoiler","password","hint","getPasswordFromEvent","attachment","blobUrl","mimeType","buf","blobToBuffer","fetchBlob","cipher","Account","encryptData","bb","popByteBuffer","hintLen","typeLen","writeInt16","writeBytes","Buffer","from","res","toUint8Array","blob","Blob","encryptUrl","URL","createObjectURL","size","quality","thumbBlobUrl","resizeImage","entity","substr","replaceSubstring","repeat","log","scheduledAt","replyingToMessage","replyingToTopId","selectThreadTopMessageId","replyToTopMessageId","params","replyingTo","noWebPage","selectNoWebPage","sendAs","selectUser","clearWebPagePreview","isSingle","isGrouped","shouldGroupMessages","restParams","sendMessage","commonParams","byType","index","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","MsgDispatcher","setEditingId","progressCallback","get","getMessageOriginalId","cancelApiProgress","user","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","byId","editingId","selectEditingId","selectEditingScheduledId","UserIdFirstBot","UserIdChatGpt","activeChat","chatIdsDeleted","messagesDeleted","leaveChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","to","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","b","selectSendAs","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadViewportMessagesCache","addOffset","flag","threadsById","lastViewportIds","updateListedIds","isUp","listedIds1","ids1","isLocalMessageId","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","addChatMessagesById","updateOutlyingIds","addChats","updateThreadInfos","areSortedArraysIntersecting","sourceIds","findClosestIndex","indexForDirection","progress","localMessage","messageLocalId","has","set","fileUploads","byMessageLocalId","IS_IOS","rafPromise","botInfo","fullInfo","process","delete","shouldSendAsFile","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","seenByUserIds","sendAsId","sendAsChat","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","totalCount","nextOffsetId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","chatListIdsActive","listIds","active","messagesList","chatIds","userIdList","firstName","toLowerCase","lastName","bio","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","imgToBlob","thumbnailUrl","thumbnail","blobToDataUri","updateUsers","getUserFirstOrLastName","releaseStatusTimeout","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","lastSyncTime","initFolderManager","addCallback","connectionState","authState","msgClientState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","loadProfilePhotos","profileId","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","localUsers","globalUsers","phoneNumber","phone","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openUrl","MsgCommand","answerCallbackButton","openSystemFilesDialog","Array","target","requestUploadImage","openPollModal","receiptMessageId","getReceipt","openInvoice","isGame","openGame","alert","isError","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","currentChatId","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","currentPassword","onSuccess","isSuccess","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","loadTopicById","loadTopics","parseCodeBlock","reg","codeBlock","j","exec","ApiMessageEntityTypes","endsWith","substring","parseMentionName","regex","parseCmd","commands","RegExp","matches","parseEntities","ANIMATION_DELAY","handleMessageEntities","msgSend","handleMessageTextCode","cmd","handleBotCmdText","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","messageNew","thread","currentThreadId","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","chatGptAskHistory","msgIdAssistant","msgIdUser","userBotUpdate","chatGptConfig","api_key","localStorage","setItem","updateGlobal","lastScrollOffset","listIds_active","forceOnHeavyAnimation","chat_listIds_active","chat1","replaceChats","includedChatIds","user1","replaceUsers","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","currentAccountAddress","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","onSelectFolder","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleClearCache","cacheApi","clear","LANG_CACHE_NAME","ASSET_CACHE_NAME","reload","handleSignOutClick","history","replaceState","forceInitApi","handleLoginClick","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","CLOUD_MESSAGE_ENABLE","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","classNames","Tab","badgeCount","isBadgeActive","previousActiveTab","tabRef","tabEl","prevTabEl","parentElement","children","contains","platformEl","prevPlatformEl","shiftLeft","offsetLeft","scaleFactor","clientWidth","remove","transform","forceReflow","renderText","SCROLL_DURATION","TabList","tabs","areFolders","activeTab","big","onSwitchTab","containerRef","usePrevious","useHorizontalScroll","container","scrollWidth","offsetWidth","scrollLeft","activeTabElement","childNodes","activeTabOffsetLeft","activeTabOffsetWidth","newLeft","abs","fastSmoothScrollHorizontal","tab","_tab$id","ALL_FOLDER_ID","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","chatsCount","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","createChat","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectFolder","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","leftColumnContent","sessionStorage","getItem","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","closeAudioPlayer","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioChatId","audioMessageId","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","isOwn","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","createElement","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","handleTap","stopEvent","handleDoubleClick","handleContentDoubleClick","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","Deferred","createConnector","Worker","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","Video","canAutoLoad","canAutoPlay","uploadProgress","isDownloading","onCancelUpload","videoRef","getMessageVideo","getMessageWebPageVideo","localBlobUrl","isSpoilerShown","hideSpoiler","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","fullMediaData","isPlayerReady","markPlayerReady","getMessageMediaThumbDataUri","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","useMediaTransition","noThumb","thumbRef","useBlurredMediaThumbRef","thumbClassNames","isInline","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","isOwnMessage","isWebPageVideo","calculateVideoDimensions","cancelMessageMediaDownload","isAllowed","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","withAnimation","ProgressSpinner","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Invoice","shouldAffectAppendix","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","scale","SVG_PIN","__html","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","InlineButtons","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","promise","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleEditClick","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","getMinMediaWidth","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","TEXT_AI_THINKING","DotAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","areMessagesLoaded","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","quick","img","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","openTimeout","isFirstTimeActivation","ResponsiveHoverButton","onActivate","buttonProps","_extends","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","editingDraft","selectEditingScheduledDraft","selectEditingDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","speechRecognizing","setSpeechRecognizing","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","passwordOpen","setPasswordOpen","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","loadChatSettings","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","fill","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","PasswordModal","setOpen","noBackdropClose","setNoBackdropClose","showHitInput","setShowHitInput","passwordHelper","setPasswordHelper","validationError","setValidationError","setHint","shouldShowPassword","setShouldShowPassword","handleSubmit","passwordCheck","evt","detail","hideHitInput","handleClearError","PasswordMonkey","isPasswordVisible","InputText","PasswordForm","shouldDisablePasswordManager","submitLabel","clearError","shouldResetValue","onChangePasswordVisibility","onSubmit","qrCodeStylingPromise","QrCode","tips","qrCodeRef","isQrMounted","markQrMounted","unmarkQrMounted","qrCode","QrCodeStyling","dotsOptions","cornersSquareOptions","imageOptions","imageSize","qrOptions","errorCorrectionLevel","append","onDownload","showMnemonicModal","MnemonicModal","mnemonic","setMnemonic","mnemonicEncrypt","setMnemonicEncrypt","onCloseModal","account","getSession","verifySession","entropy","getEntropy","words","Mnemonic","getWords","aesEncrypt","hashSha256","PbQrCode","QrCodeType","pack","getPbData","showPickBotModal","botIds","PickBotModal","search","setSearch","handleSelect","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","onSearchChange","onSelectChatOrUser","GlobalModal","setPayload","inputType","initVal","TextArea","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","shouldShowSubmit","noRipple","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}