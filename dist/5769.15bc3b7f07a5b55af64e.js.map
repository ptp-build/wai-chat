{"version":3,"file":"5769.15bc3b7f07a5b55af64e.js","mappings":"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","sources":["webpack://wai/./src/global/actions/ui/localSearch.ts","webpack://wai/./src/global/actions/ui/chats.ts","webpack://wai/./src/global/actions/ui/messages.ts","webpack://wai/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://wai/./src/global/actions/ui/globalSearch.ts","webpack://wai/./src/global/actions/ui/stickerSearch.ts","webpack://wai/./src/global/actions/ui/users.ts","webpack://wai/./src/util/updateIcon.ts","webpack://wai/./src/util/updatePageTitle.ts","webpack://wai/./src/global/actions/ui/misc.ts","webpack://wai/./src/global/actions/ui/payments.ts","webpack://wai/./src/global/actions/ui/mediaViewer.ts","webpack://wai/./src/global/actions/ui/passcode.ts","webpack://wai/./src/global/actions/api/messages.ts","webpack://wai/./src/global/actions/api/symbols.ts","webpack://wai/./src/global/actions/api/globalSearch.ts","webpack://wai/./src/global/actions/api/localSearch.ts","webpack://wai/./src/global/actions/api/management.ts","webpack://wai/./src/global/actions/api/sync.ts","webpack://wai/./src/global/actions/api/accounts.ts","webpack://wai/./src/global/actions/api/users.ts","webpack://wai/./src/global/reducers/bots.ts","webpack://wai/./src/util/PopupManager.ts","webpack://wai/./src/global/actions/api/bots.ts","webpack://wai/./src/global/actions/api/payments.ts","webpack://wai/./src/global/actions/api/twoFaSettings.ts","webpack://wai/./src/util/requestQuery.ts","webpack://wai/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://wai/./src/global/reducers/reactions.ts","webpack://wai/./src/global/actions/api/reactions.ts","webpack://wai/./src/global/actions/api/statistics.ts","webpack://wai/./src/global/actions/apiUpdaters/chats.ts","webpack://wai/./src/worker/share/utils/stringParse.ts","webpack://wai/./src/global/actions/apiUpdaters/messages.ts","webpack://wai/./src/worker/msg/msgHelper.ts","webpack://wai/./src/global/actions/apiUpdaters/users.ts","webpack://wai/./src/global/actions/apiUpdaters/symbols.ts","webpack://wai/./src/global/actions/apiUpdaters/misc.ts","webpack://wai/./src/global/actions/apiUpdaters/settings.ts","webpack://wai/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://wai/./src/global/actions/apiUpdaters/calls.ts","webpack://wai/./src/global/actions/apiUpdaters/payments.ts","webpack://wai/./src/hooks/useBeforeUnload.ts","webpack://wai/./src/hooks/usePreventPinchZoomGesture.ts","webpack://wai/./src/components/common/StickerSetModal.async.tsx","webpack://wai/./src/components/common/UnreadCounter.tsx","webpack://wai/./src/hooks/useConnectionStatus.ts","webpack://wai/./src/hooks/useBrowserOnline.ts","webpack://wai/./src/components/left/ConnectionStatusOverlay.tsx","webpack://wai/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://wai/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://wai/./src/components/left/main/StatusButton.tsx","webpack://wai/./src/components/left/main/LeftMainHeader.tsx","webpack://wai/./src/util/permanentWebVersion.ts","webpack://wai/./src/components/left/main/ChatFolders.tsx","webpack://wai/./src/components/left/search/LeftSearch.async.tsx","webpack://wai/./src/components/left/main/ContactList.async.tsx","webpack://wai/./src/components/left/NewChatButton.tsx","webpack://wai/./src/components/left/main/LeftMain.tsx","webpack://wai/./src/components/left/settings/Settings.async.tsx","webpack://wai/./src/components/left/newChat/NewChat.async.tsx","webpack://wai/./src/components/left/ArchivedChats.async.tsx","webpack://wai/./src/components/left/LeftColumn.tsx","webpack://wai/./src/hooks/useResize.ts","webpack://wai/./src/components/middle/PinnedMessageNavigation.tsx","webpack://wai/./src/components/middle/HeaderPinnedMessage.tsx","webpack://wai/./src/util/mediaSession.ts","webpack://wai/./src/hooks/useAudioPlayer.ts","webpack://wai/./src/hooks/useMessageMediaMetadata.ts","webpack://wai/./src/components/middle/AudioPlayer.tsx","webpack://wai/./src/components/middle/ChatReportPanel.tsx","webpack://wai/./src/components/middle/MiddleHeader.tsx","webpack://wai/./src/components/middle/helpers/groupMessages.ts","webpack://wai/./src/components/middle/hooks/useStickyDates.ts","webpack://wai/./src/components/middle/hooks/useScrollHooks.ts","webpack://wai/./src/components/middle/hooks/useMessageObservers.ts","webpack://wai/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://wai/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://wai/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://wai/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://wai/./src/util/languageDetection.ts","webpack://wai/./src/util/Deferred.ts","webpack://wai/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://wai/./src/components/middle/ActionMessage.tsx","webpack://wai/./src/components/common/EmbeddedMessage.tsx","webpack://wai/./src/components/common/Document.tsx","webpack://wai/./src/components/common/Audio.tsx","webpack://wai/./src/components/common/helpers/waveform.ts","webpack://wai/./src/util/waveform.ts","webpack://wai/./src/components/middle/message/MessageMeta.tsx","webpack://wai/./src/components/middle/message/Sticker.tsx","webpack://wai/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://wai/./src/components/middle/message/AnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://wai/./src/components/middle/message/Video.tsx","webpack://wai/./src/components/middle/message/Contact.tsx","webpack://wai/./src/components/middle/message/PollOption.tsx","webpack://wai/./src/components/middle/message/Poll.tsx","webpack://wai/./src/components/middle/message/WebPage.tsx","webpack://wai/./src/components/middle/message/Invoice.tsx","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://wai/./src/util/map.ts","webpack://wai/./src/components/middle/message/Location.tsx","webpack://wai/./src/components/middle/message/Game.tsx","webpack://wai/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://wai/./src/components/middle/message/Album.tsx","webpack://wai/./src/components/middle/message/RoundVideo.tsx","webpack://wai/./src/components/middle/message/InlineButtons.tsx","webpack://wai/./src/components/middle/message/CommentButton.tsx","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/ReactionButton.tsx","webpack://wai/./src/components/middle/message/Reactions.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://wai/./src/components/common/TopicChip.tsx","webpack://wai/./src/components/common/TopicChip.module.scss?5208","webpack://wai/./src/components/middle/message/Message.tsx","webpack://wai/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://wai/./src/hooks/useTextLanguage.ts","webpack://wai/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://wai/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://wai/./src/components/common/AboutAdsModal.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessage.tsx","webpack://wai/./src/components/middle/MessageListContent.tsx","webpack://wai/./src/components/middle/ContactGreeting.tsx","webpack://wai/./src/components/middle/NoMessages.tsx","webpack://wai/./src/components/middle/MessageList.tsx","webpack://wai/./src/hooks/useNativeCopySelectedMessages.ts","webpack://wai/./src/components/middle/ScrollDownButton.tsx","webpack://wai/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://wai/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://wai/./src/components/middle/FloatingActionButtons.tsx","webpack://wai/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://wai/./src/util/audio.ts","webpack://wai/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://wai/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://wai/./src/util/voiceRecording.ts","webpack://wai/./src/lib/cleanDocsHtml.ts","webpack://wai/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://wai/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://wai/./src/components/middle/composer/hooks/useDraft.ts","webpack://wai/./src/components/common/DeleteMessageModal.async.tsx","webpack://wai/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://wai/./src/components/middle/composer/AttachBotIcon.tsx","webpack://wai/./src/components/middle/composer/AttachBotItem.tsx","webpack://wai/./src/components/middle/composer/AttachMenu.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://wai/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://wai/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://wai/./src/components/middle/composer/PollModal.async.tsx","webpack://wai/./src/components/middle/composer/DropArea.async.tsx","webpack://wai/./src/components/middle/composer/WebPagePreview.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://wai/./src/components/middle/composer/BotMenuButton.tsx","webpack://wai/./src/components/middle/composer/Composer.tsx","webpack://wai/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://wai/./src/components/middle/composer/hooks/useEditing.ts","webpack://wai/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://wai/./src/components/middle/MobileSearch.async.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://wai/./src/components/common/SeenByModal.async.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://wai/./src/components/middle/ReactorListModal.async.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.async.tsx","webpack://wai/./src/components/middle/MiddleColumn.tsx","webpack://wai/./src/hooks/useCustomBackground.ts","webpack://wai/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://wai/./src/components/right/RightHeader.tsx","webpack://wai/./src/components/left/search/helpers/getSenderName.ts","webpack://wai/./src/components/right/hooks/useProfileViewportIds.ts","webpack://wai/./src/components/right/hooks/useProfileState.ts","webpack://wai/./src/components/common/Media.tsx","webpack://wai/./src/components/common/WebLink.tsx","webpack://wai/./src/components/right/Profile.tsx","webpack://wai/./src/components/right/hooks/useTransitionFixes.ts","webpack://wai/./src/hooks/useCacheBuster.ts","webpack://wai/./src/components/right/RightSearch.async.tsx","webpack://wai/./src/components/right/management/Management.async.tsx","webpack://wai/./src/components/right/statistics/Statistics.async.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://wai/./src/components/right/StickerSearch.async.tsx","webpack://wai/./src/components/right/GifSearch.async.tsx","webpack://wai/./src/components/right/PollResults.async.tsx","webpack://wai/./src/components/right/AddChatMembers.tsx","webpack://wai/./src/components/right/CreateTopic.async.tsx","webpack://wai/./src/components/right/EditTopic.async.tsx","webpack://wai/./src/components/right/RightColumn.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://wai/./src/util/download.ts","webpack://wai/./src/components/main/DownloadManager.tsx","webpack://wai/./src/components/main/GameModal.tsx","webpack://wai/./src/components/main/Notifications.async.tsx","webpack://wai/./src/components/main/Dialogs.async.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://wai/./src/components/main/SafeLinkModal.async.tsx","webpack://wai/./src/components/main/HistoryCalendar.async.tsx","webpack://wai/./src/components/calls/group/GroupCall.async.tsx","webpack://wai/./src/components/calls/ActiveCallHeader.async.tsx","webpack://wai/./src/components/calls/phone/PhoneCall.async.tsx","webpack://wai/./src/components/middle/MessageListHistoryHandler.tsx","webpack://wai/./src/components/main/NewContactModal.async.tsx","webpack://wai/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://wai/./src/components/main/WebAppModal.async.tsx","webpack://wai/./src/components/main/BotTrustModal.async.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.async.tsx","webpack://wai/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://wai/./src/components/main/ConfettiContainer.tsx","webpack://wai/./src/components/main/UrlAuthModal.async.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://wai/./src/components/payment/PaymentModal.async.tsx","webpack://wai/./src/components/payment/ReceiptModal.async.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.async.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.async.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://wai/./src/components/ui/PasswordModal.tsx","webpack://wai/./src/components/common/QrCode.tsx","webpack://wai/./src/components/ui/MnemonicModal.tsx","webpack://wai/./src/components/ui/PickBotModal.tsx","webpack://wai/./src/components/ui/GlobalModal.tsx","webpack://wai/./src/components/main/Main.tsx","webpack://wai/./src/components/main/LockScreen.tsx","webpack://wai/./src/components/main/LockScreen.module.scss?8252","webpack://wai/./src/bundles/main.ts","webpack://wai/./src/global/actions/ui/calls.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached, toggleMessageSelectAll,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage, selectChatMessage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\nimport {MessageStoreRow_Type, PbMsg_Type} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {currentTs} from \"../../../worker/share/utils/utils\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('onSpeak', (global, actions, payload): ActionReturnType => {\n  const { messageId,chatId, tabId = getCurrentTabId() } = payload;\n  const utterance = new SpeechSynthesisUtterance();\n  var selectedText = \"\";\n  if (window.getSelection) {\n    selectedText = window.getSelection().toString();\n  } else if (document.selection && document.selection.type != \"Control\") {\n    selectedText = document.selection.createRange().text;\n  }\n  if(!selectedText){\n    const message = selectChatMessage(global,chatId,messageId)\n    if(message?.content.text?.text){\n      selectedText = message!.content!.text!.text\n    }\n  }\n  if(selectedText){\n    utterance.lang = 'zh-CN';\n    utterance.text = selectedText\n    speechSynthesis.speak(utterance)\n  }\n})\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n  const messages = selectChatMessages(global,chatId);\n  const {content} = messages[lastOwnEditableMessageId]\n  if(content.text && content.text){\n    actions.saveDraft({\n      chatId, threadId,\n      draft:{\n        text:content.text.text,\n        entities:content.text.entities\n      }\n      , shouldForce:true,\n    })\n    // return replaceThreadParam(global, chatId, threadId, 'editingId', {text:lastOwnEditableMessageId.toString()});\n  }\n\n  // return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\n\naddActionHandler('toggleMessageSelectAll', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n  return toggleMessageSelectAll(global, chatId, tabId);\n});\n\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('saveMsgToCloud', async (global, actions, payload): ActionReturnType => {\n  let { chatId,msgId,tabId = getCurrentTabId() } = payload || {};\n  let messageIds = []\n  if(chatId){\n    messageIds = [msgId]\n  }else{\n    const tabState = selectTabState(global, tabId);\n\n    if (!tabState.selectedMessages) {\n      return;\n    }\n    chatId =tabState.selectedMessages.chatId;\n    messageIds =tabState.selectedMessages.messageIds;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId)\n  if (!chatMessages) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id!])\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const messages1:MessageStoreRow_Type[] = [];\n\n  for (let i = 0; i < messages.length; i++) {\n    // @ts-ignore\n    const message:PbMsg_Type = messages[i]\n    messages1.push({\n      time:currentTs(),\n      message,\n      messageId:message.id,\n    })\n  }\n  await new MsgCommandSetting(chatId).uploadMsgList(messages1)\n  if(tabId){\n    global = getGlobal();\n    global = exitMessageSelectMode(global, tabId);\n    setGlobal(global)\n  }\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: false, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  // storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ActionReturnType, ApiDraft, GlobalState, TabArgs,} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiFormattedText,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../../api/types';\nimport {LoadMoreDirection} from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {IS_IOS} from '../../../util/environment';\nimport {callApi, cancelApiProgress} from '../../../api/gramjs';\nimport {areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  deleteChat,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingIds,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport {debounce, onTickEnd, rafPromise,} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isLocalMessageId,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {translate} from '../../../util/langProvider';\nimport {ensureProtocol} from '../../../util/ensureProtocol';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport Account from \"../../../worker/share/Account\";\nimport {currentTs1000, replaceSubstring} from \"../../../worker/share/utils/utils\";\nimport {blobToBuffer, fetchBlob} from \"../../../util/files\";\nimport {popByteBuffer, toUint8Array, writeBytes, writeInt16} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {resizeImage} from \"../../../util/imageResize\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {getPasswordFromEvent} from '../../../worker/share/utils/password';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\nimport {UserIdChatGpt, UserIdFirstBot} from \"../../../worker/setting\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\nlet _userMaxMsgId:number;\n\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n  let { chatId, threadId } = payload || {};\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId, type } = currentMessageList;\n  payload = omit(payload, ['tabId']);\n  const {currentUserId} = getGlobal();\n\n  if(payload.attachments){\n    const hasMessageEntitySpoiler = payload.attachments.find((a:ApiAttachment)=>a.shouldSendAsSpoiler);\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        let {attachments} = payload;\n        for (let i = 0; i < attachments.length; i++) {\n          const attachment = attachments[i];\n          const {blobUrl,mimeType} = attachment;\n          const buf = await blobToBuffer(await fetchBlob(blobUrl));\n          const cipher = await Account.getCurrentAccount()?.encryptData(buf, password)\n          const bb = popByteBuffer();\n          const hintLen = (hint ? hint.length:0)\n          const typeLen = mimeType.length;\n          writeInt16(bb, 2);\n          writeBytes(bb,Buffer.from(\"EN\"));\n          writeInt16(bb, typeLen);\n          writeBytes(bb,Buffer.from(mimeType));\n          writeInt16(bb, hintLen);\n          if(hintLen){\n            writeBytes(bb,Buffer.from(hint||\"\"));\n          }\n          const res = toUint8Array(bb);\n          const blob = new Blob([Buffer.from(res),Buffer.from(cipher!)], { type: attachment.mimeType });\n          payload.attachments[i].encryptUrl = URL.createObjectURL(blob)\n        }\n      }else{\n        return undefined\n      }\n    }\n  }\n  let {attachments} = payload;\n  if(attachments){\n    for (let i = 0; i < attachments.length; i++) {\n      const attachment = attachments[i];\n      const {mimeType,encryptUrl,blobUrl} = attachment;\n      if(mimeType.indexOf(\"image/\") === 0){\n        const size = encryptUrl ? 10 : 40;\n        const quality = 0.1;\n        attachment.thumbBlobUrl = await resizeImage(\n          blobUrl, size,size, 'image/jpeg',quality\n        );\n      }\n    }\n  }\n  if(payload.text && payload.entities && payload.entities!.length > 0){\n    let {entities,text} = payload;\n    const hasMessageEntitySpoiler = entities.find((entity:ApiMessageEntity)=>entity.type === \"MessageEntitySpoiler\");\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        for (let i = 0; i < entities.length; i++) {\n          if(entities[i].type === \"MessageEntitySpoiler\"){\n            const entity = payload.entities[i];\n            const {offset,length} = entity;\n            const cipher = await Account.getCurrentAccount()?.encryptData(Buffer.from(text.substr(offset,length)), password)\n            payload.text = replaceSubstring(payload.text,offset,length,\"x\".repeat(length));\n            //@ts-ignore\n            payload.entities[i] = {...entity,cipher:cipher.toString(\"hex\"),hint}\n          }\n        }\n        console.log(payload)\n      }else{\n        return undefined\n      }\n    }\n  }\n\n  global = getGlobal();\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectUser(global, global.currentUserId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\n// @ts-ignore\naddActionHandler('editMessage', async (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n  await MsgDispatcher.reRunAi(chatId,message.id,text)\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', async (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  try {\n    void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n    const {lastMessage} = global.chats.byId[chatId];\n\n    if(lastMessage && lastMessage.id){\n      if(messageIds.includes(lastMessage.id)){\n        const t = getGlobal()\n        setGlobal({\n          ...t,\n          chats:{\n            ...t.chats,\n            byId:{\n              ...t.chats.byId,\n              [chatId]:{\n                ...t.chats.byId[chatId],\n                lastMessage:undefined\n              }\n            }\n          }\n        })\n      }\n    }\n\n    const editingId = selectEditingId(global, chatId, threadId);\n    if (editingId && messageIds.includes(editingId)) {\n      actions.setEditingId({ messageId: undefined, tabId });\n    }\n  }catch (e){\n    console.error(e)\n  }\n\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat || chatId === UserIdFirstBot) {\n    return;\n  }\n  // await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  global = getGlobal();\n  global = deleteChat(global, chatId);\n  const {chatFolders} = global\n  let {userStoreData} = global;\n\n  Object.values(chatFolders.byId).forEach(folder=>{\n    if(!folder.includedChatIds){\n      folder.includedChatIds = []\n    }\n    if(folder.includedChatIds.includes(chatId)){\n      folder.includedChatIds = folder.includedChatIds.filter(id=>id !== chatId)\n    }\n    if(userStoreData && userStoreData.chatIdsDeleted){\n      userStoreData.chatIdsDeleted.forEach(chatId=>{\n        if(folder.includedChatIds.includes(chatId)){\n          folder.includedChatIds = folder.includedChatIds.filter(id=>id !== chatId)\n        }\n      })\n    }\n    const includedChatIds = []\n    folder.includedChatIds.forEach(chatId=>{\n      if(global.chats.listIds.active.includes(chatId)){\n        includedChatIds.push(chatId)\n      }\n    })\n    folder.includedChatIds = includedChatIds\n  })\n\n  if(!userStoreData){\n    userStoreData = {}\n  }\n  if(!userStoreData.chatIdsDeleted){\n    userStoreData.chatIdsDeleted = []\n  }\n  userStoreData.chatIdsDeleted.push(chatId)\n  userStoreData.time = currentTs1000();\n  userStoreData.chatIds = global.chats.listIds.active;\n\n  global = {\n    ...global,\n    userStoreData,\n    chatFolders:{\n      ...global.chatFolders,\n      byId:chatFolders.byId\n    },\n    messagesDeleted:{\n      ...global.messagesDeleted,\n      [chatId]:[]\n    }\n  }\n  userStoreData.chatFolders = JSON.stringify(global.chatFolders)\n  setGlobal(global);\n  callApiWithPdu(new SyncReq({userStoreData:global.userStoreData}).pack()).catch(console.error)\n\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nconst loadViewportMessagesCache:Record<string, boolean> = {};\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  let flag = false;\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].lastViewportIds == undefined){\n    global = safeReplaceViewportIds(global, chatId, threadId, [], tabId);\n    flag = true;\n  }\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].listedIds == undefined){\n    global = updateListedIds(global, chatId, threadId, [])\n    flag = true;\n  }\n\n  if(flag){\n    setGlobal(global)\n  }\n  const lastMessageId = chat?.lastMessage ? chat?.lastMessage.id : 0;\n  const messages1 = selectChatMessages(global,chat!.id)\n\n  let isUp = true;\n  let listedIds1 = selectListedIds(global, chatId, threadId);\n  const ids1:number[]= []\n  listedIds1?.forEach((id:number)=>{\n    if(!isLocalMessageId(id)){\n      ids1.push(id)\n    }\n  })\n\n  if((ids1.length > 1 && ids1[ids1.length - 1] < lastMessageId) || Object.keys(messages1).length === 0){\n    isUp = false;\n  }\n  let result;\n  try{\n    if(loadViewportMessagesCache[chat.id]){\n      return\n    }\n    // console.log(\"[MsgListReq]\",{chatId:chat.id,lastMessageId,isUp})\n    loadViewportMessagesCache[chat.id] = true;\n    result = await callApi('fetchMessages', {\n      chat: selectChat(global, chatId)!,\n      offsetId,\n      addOffset,\n      limit: MESSAGE_LIST_SLICE,\n      threadId,\n      lastMessageId,\n      isUp\n    });\n  }catch (e){\n\n  }\n  setTimeout(()=>{delete loadViewportMessagesCache[chat.id]},1000)\n  if (!result) {\n    return;\n  }\n\n  let {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  if(messages.length > 0 && lastMessageId < messages[messages.length - 1].id){\n    chat.lastMessage = messages[messages.length - 1];\n    if(!chats){\n      chats = []\n    }\n    chats.push(chat)\n  }\n\n  console.log(\"[MsgListRes]\",messages,users)\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nexport function getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?:ApiBotInfo;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? async (progress: number, localMessage: ApiMessage) => {\n    const messageLocalId = localMessage.id;\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : async (progress: number, localMessage: any)=>{\n\n  }\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  const user = selectUser(global,params.chat.id);\n  params.botInfo = user?.fullInfo?.botInfo ? user?.fullInfo?.botInfo:undefined\n\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params, progressCallback);\n    // @ts-ignore\n    if (progressCallback && localId) {\n      uploadProgressCallbacks.delete(localId);\n    }\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n  const messages:Record<number, ApiFormattedText> = {}\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n    messages[parseInt(id)] = selectChatMessage(global,chatId,id)?.content.text!\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    messages,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\nimport type {ApiChat, ApiGlobalMessageSearchType, ApiMessage,} from '../../../api/types';\n\nimport {updateGlobalSearch, updateGlobalSearchFetchingStatus, updateGlobalSearchResults,} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentGlobalSearchQuery,\n  selectTabState,\n  selectUser\n} from '../../selectors';\nimport {timestampPlusDay} from '../../../util/dateFormat';\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {TopCatsReq} from \"../../../lib/ptp/protobuf/PTPSync\";\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('fetchTopCats', async (global, actions, payload) => {\n  const {topCats} = global\n  callApiWithPdu(new TopCatsReq({\n    time:topCats.time || 0\n  }).pack()).catch(console.error)\n})\n\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  if (query) {\n    //@ts-ignore\n    void searchThrottled(async () => {\n      global = getGlobal();\n      const chatListIdsActive = global.chats.listIds.active;\n      if(!chatListIdsActive){\n        return;\n      }\n      const messagesList:ApiMessage[] = []\n      const chatIds:string[] = [];\n      const userIds:string[] = [];\n      const userIdList = Object.keys(global.users.byId);\n      for (let i = 0; i < userIdList.length; i++) {\n        const userId = userIdList[i]\n        const user = selectUser(global,userId)\n        if(\n          (\n            (user?.firstName && user?.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.lastName && user?.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.fullInfo && user?.fullInfo.bio && user?.fullInfo.bio.toLowerCase().indexOf(query.toLowerCase()) > -1)\n          )\n        ){\n          if(chatListIdsActive.includes(userId)){\n            chatIds.push(userId)\n          }\n          userIds.push(userId)\n        }\n      }\n\n      for (let i = 0; i < chatListIdsActive.length; i++) {\n        const chatId = chatListIdsActive[i]\n        const chat = selectChat(global,chatId)\n        if(chat && chat?.title.indexOf(query) > -1 && !chatIds.includes(chat?.id)){\n          chatIds.push(chat?.id)\n        }\n        const messages = selectChatMessages(global,chatId)\n        if(messages){\n          const messageIds = Object.keys(messages);\n          for (let i = 0; i < messageIds.length; i++) {\n            const messageId = Number(messageIds[i])\n            const message = selectChatMessage(global,chatId,messageId)\n            if(message?.content && message?.content.text && message?.content.text.text){\n              if(message?.content.text.text.toLowerCase().indexOf(query.toLowerCase()) > -1){\n                messagesList.push(message)\n              }\n            }\n          }\n        }\n\n      }\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if ((userIds.length === 0 && chatIds.length === 0 &&  messagesList.length === 0) || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n      global = updateGlobalSearchResults(global,messagesList,messagesList.length,\"text\",0,tabId)\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds,\n          userIds\n        },\n      }, tabId);\n      setGlobal(global);\n    });\n  }\n\n  //\n  // const { query, tabId = getCurrentTabId() } = payload!;\n  // const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  // if (query && !chatId) {\n  //   void searchThrottled(async () => {\n  //     const result = await callApi('searchChats', { query });\n  //\n  //     global = getGlobal();\n  //     const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  //     if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n  //       global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //       setGlobal(global);\n  //       return;\n  //     }\n  //\n  //     const {\n  //       localChats, localUsers, globalChats, globalUsers,\n  //     } = result;\n  //\n  //     if (localChats.length || globalChats.length) {\n  //       global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  //     }\n  //\n  //     if (localUsers.length || globalUsers.length) {\n  //       global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  //     }\n  //\n  //     global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //     global = updateGlobalSearch(global, {\n  //       localResults: {\n  //         chatIds: localChats.map(({ id }) => id),\n  //         userIds: localUsers.map(({ id }) => id),\n  //       },\n  //       globalResults: {\n  //         ...selectTabState(global, tabId).globalSearch.globalResults,\n  //         chatIds: globalChats.map(({ id }) => id),\n  //         userIds: globalUsers.map(({ id }) => id),\n  //       },\n  //     }, tabId);\n  //\n  //     setGlobal(global);\n  //   });\n  // }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  return\n  console.log(\"searchMessagesGlobal\")\n  // let result: {\n  //   messages: ApiMessage[];\n  //   users: ApiUser[];\n  //   chats: ApiChat[];\n  //   topics?: ApiTopic[];\n  //   totalTopicsCount?: number;\n  //   totalCount: number;\n  //   nextRate: number | undefined;\n  // } | undefined;\n  //   console.log(\"searchMessagesGlobal\")\n  // if (chat) {\n  //   const localResultRequest = callApi('searchMessagesLocal', {\n  //     chat,\n  //     query,\n  //     type,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     offsetId: offsetRate,\n  //     minDate,\n  //     maxDate,\n  //   });\n  //   const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n  //     chat,\n  //     query,\n  //     limit: GLOBAL_TOPIC_SEARCH_SLICE,\n  //   }) : undefined;\n  //\n  //   const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n  //\n  //   if (localResult) {\n  //     const {\n  //       messages, users, totalCount, nextOffsetId,\n  //     } = localResult;\n  //\n  //     const { topics: localTopics, count } = topics || {};\n  //\n  //     result = {\n  //       topics: localTopics,\n  //       totalTopicsCount: count,\n  //       messages,\n  //       users,\n  //       chats: [],\n  //       totalCount,\n  //       nextRate: nextOffsetId,\n  //     };\n  //   }\n  // } else {\n  //   result = await callApi('searchMessagesGlobal', {\n  //     query,\n  //     offsetRate,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     type,\n  //     maxDate,\n  //     minDate,\n  //   });\n  // }\n  //\n  // global = getGlobal();\n  // const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  // if (!result || (query !== '' && query !== currentSearchQuery)) {\n  //   global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  //\n  // const {\n  //   messages, users, chats, totalCount, nextRate,\n  // } = result;\n  //\n  // if (chats.length) {\n  //   global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // }\n  //\n  // if (users.length) {\n  //   global = addUsers(global, buildCollectionByKey(users, 'id'));\n  // }\n  //\n  // if (messages.length) {\n  //   global = addMessages(global, messages);\n  // }\n  //\n  // global = updateGlobalSearchResults(\n  //   global,\n  //   messages,\n  //   totalCount,\n  //   type,\n  //   nextRate,\n  //   tabId,\n  // );\n  //\n  // if (result.topics) {\n  //   global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  // }\n  //\n  // const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  // global = updateGlobalSearch(global, {\n  //   foundTopicIds: sortedTopics,\n  // }, tabId);\n  //\n  // setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport {ManagementProgress} from '../../../types';\nimport type {ActionReturnType} from '../../types';\n\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addUsers,\n  updateChat,\n  updateManagement,\n  updateManagementProgress,\n  updateUsers,\n} from '../../reducers';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {ensureIsSuperGroup} from './chats';\nimport {getUserFirstOrLastName} from '../../helpers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\nimport {blobToDataUri, fetchBlob, imgToBlob} from \"../../../util/files\";\nimport {resizeImage} from \"../../../util/imageResize\";\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  const blob = await imgToBlob(file!);\n  const thumbnailUrl = await resizeImage(blob,40,40,file!.type,0.1);\n  const thumbnail = await blobToDataUri(await fetchBlob(thumbnailUrl));\n  result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n    thumbnail,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  // @ts-ignore\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  // const newUser = await callApi('fetchFullUser', { id, accessHash });\n  // if (!newUser) {\n  //   global = getGlobal();\n  //   global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  // actions.loadProfilePhotos({ profileId: userId });\n  global = getGlobal();\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\nimport {addCallback} from '../../../lib/teact/teactn';\n\nimport type {ApiChat, ApiMessage} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {ActionReturnType, GlobalState, Thread} from '../../types';\n\nimport {DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport {init as initFolderManager} from '../../../util/folderManager';\nimport {updateTabState} from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n  const { loadAllChats, preloadTopChatMessages, } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      // await loadAndReplaceMessages(global, actions);\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState,msgClientState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (\n    previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState\n  )) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (\n    connectionState === 'connectionStateReady' && authState === 'authorizationStateReady'\n  ) {\n    if(DEBUG){\n      console.log({connectionState,msgClientState,authState})\n    }\n    getActions().sync();\n  }\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiUser} from '../../../api/types';\nimport {ManagementProgress} from '../../../types';\n\nimport {throttle} from '../../../util/schedulers';\nimport {buildCollectionByKey, unique} from '../../../util/iteratees';\nimport {isUserBot, isUserId} from '../../helpers';\nimport {callApi} from '../../../api/gramjs';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {getServerTime} from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type {ActionReturnType} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,bio,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  // if (!user.isContact && user.phoneNumber) {\n  //   result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  // } else {\n  //   const { id, accessHash } = user;\n  //   result = await callApi('updateContact', {\n  //     id,\n  //     accessHash,\n  //     phoneNumber: '',\n  //     firstName,\n  //     lastName,\n  //     shouldSharePhoneNumber,\n  //   });\n  // }\n  result = {};\n  global = getGlobal();\n  if (result) {\n    // actions.loadChatSettings({ chatId: userId });\n    let botInfo = user.fullInfo?.botInfo\n    if(botInfo){\n      botInfo = {\n        ...botInfo,\n        description:bio\n      }\n    }\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n        fullInfo:{\n          ...user.fullInfo,\n          bio,\n          botInfo,\n        }\n      },\n    );\n  }\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport type {ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {InlineBotSettings} from '../../../types';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectReplyingToId,\n  selectSendAs,\n  selectTabState,\n  selectThreadTopMessageId,\n  selectUser,\n} from '../../selectors';\nimport {addChats, addUsers, removeBlockedContact} from '../../reducers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {debounce} from '../../../util/schedulers';\nimport {replaceInlineBotSettings, replaceInlineBotsIsLoading} from '../../reducers/bots';\nimport {getServerTime} from '../../../util/serverTime';\nimport {extractCurrentThemeParams} from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {openSystemFilesDialog} from \"../../../util/systemFilesDialog\";\nimport {SUPPORTED_IMAGE_CONTENT_TYPES} from \"../../../config\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      new MsgCommand(chat.id).answerCallbackButton(global,messageId,button.data);\n      // void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestUploadImage':\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      openSystemFilesDialog(\n        Array.from(SUPPORTED_IMAGE_CONTENT_TYPES).join(','),\n        async (e) => {\n          const { files } = e.target as HTMLInputElement;\n          await new MsgCommand(chat.id).requestUploadImage(global,messageId,files);\n        },\n        true\n      );\n      break;\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n  actions.focusLastMessage()\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  const global = getGlobal();\n  const user = selectUser(global,chat.id)\n  const params = {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n    botInfo:user?.fullInfo?.botInfo\n  }\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params);\n  }\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiUpdateChat} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\n\nimport {ARCHIVED_FOLDER_ID, CLOUD_MESSAGE_API, MAX_ACTIVE_PINNED_CHATS} from '../../../config';\nimport {buildCollectionByKey, omit, pick} from '../../../util/iteratees';\nimport {closeMessageNotifications, notifyAboutMessage} from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectThreadParam,\n} from '../../selectors';\nimport {updateUnreadReactions} from '../../reducers/reactions';\nimport type {ActionReturnType, GlobalState} from '../../types';\nimport {isLocalMessageId} from \"../../helpers\";\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n\nconst handleChatFoldersEdit = (global:GlobalState)=>{\n  const {userStoreData} = global\n  console.log(userStoreData?.chatFolders)\n  console.log(JSON.stringify(global.chatFolders))\n  let changed = userStoreData?.chatFolders !== JSON.stringify(global.chatFolders)\n  if(JSON.stringify(global.chats.listIds.active) !== JSON.stringify(userStoreData?.chatIds)){\n    changed = true;\n  }\n  global = {\n    ...global,\n    userStoreData:{\n      ...userStoreData,\n      chatFolders:JSON.stringify(global.chatFolders),\n      chatIds:global.chats.listIds.active\n    }\n  }\n\n  if(changed && CLOUD_MESSAGE_API){\n    callApiWithPdu(new SyncReq({userStoreData:global.userStoreData}).pack()).catch(console.error)\n  }\n  return global\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n      const listActiveIds = global.chats.listIds.active || []\n      if(!listActiveIds.includes(update.chat.id)){\n        listActiveIds.push(update.chat.id)\n        global = {\n          ...global,\n          chats:{\n            ...global.chats,\n            totalCount:{\n              ...global.chats.totalCount,\n              all:listActiveIds.length,\n            },\n            listIds:{\n              ...global.chats.listIds,\n              active:listActiveIds\n            }\n          }\n        }\n      }\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n      if(!isLocalMessageId(message.id!)){\n        // global = updateChat(global, update.chatId, {\n        //   unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        //   ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        // });\n        global = updateChat(global, update.chatId, {\n          unreadCount:0,\n          unreadMentionsCount:0,\n        });\n      }\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import {ApiMessageEntityTypes} from \"../../../api/types\";\n\nexport function parseCodeBlock(text:string,entities?:any[]) {\n  const reg = /```(.*?)\\n([\\s\\S]*?)```/g;\n  if(text.indexOf(\"```\") >= 0 && text.split(\"```\").length % 2 === 0){\n    text =  text+\"```\";\n  }\n  let result = text;\n  let match;\n  let codeBlock = [];\n  let i = 0;\n  let j = 0;\n  while (match = reg.exec(text)) {\n    codeBlock.push({\n      type:ApiMessageEntityTypes.Pre,\n      language: match[1],\n      offset: match.index - 6 * i - j,\n      length: match[2].length\n    });\n    j += match[1].length+1\n    result = result.replace(match[0],  match[2]);\n    ++i;\n  }\n  if(!entities){\n    entities = []\n  }\n  return {\n    text:result.endsWith(\"```\") ? result.substring(0,result.indexOf(\"```\")): result,\n    entities:[\n      ...codeBlock,\n      ...entities\n    ]\n  };\n}\n\nfunction parseMentionName(text:string) {\n  const regex = /@\\w+/g;\n  let match;\n  let result = [];\n  while ((match = regex.exec(text)) !== null) {\n    result.push({\n      type:ApiMessageEntityTypes.MentionName,\n      offset: match.index,\n      length: match[0].length\n    });\n  }\n  return result\n}\nexport function parseCmd(text: string, commands: string[]) {\n  if (commands.length === 0) return [];\n  const regex = new RegExp(`(?<=\\\\/)(${commands.join('|')})\\\\b`, 'g');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    matches.push({\n      type: 'MessageEntityBotCommand',\n      offset: match.index-1,\n      length: match[0].length+1\n    });\n  }\n  return matches;\n}\n\nexport function parseEntities(text:string,commands:string[]){\n  return [\n    ...parseCmd(text,commands),\n    ...parseMentionName(text),\n  ]\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isLocalMessageId,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport parseMessageInput from \"../../../util/parseMessageInput\";\nimport { handleBotCmdText, handleMessageTextCode } from '../../../worker/msg/msgHelper';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {RemoveMessagesReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\n\nconst ANIMATION_DELAY = 350;\n\nconst handleMessageEntities = (global:GlobalState,chatId:string,message:ApiMessage|Partial<ApiMessage>)=>{\n  if(message.content?.text && (!message.content.text.entities || message.content.text.entities?.length === 0)){\n    const user = selectUser(global,chatId)\n    message = handleMessageTextCode(message)\n    if(user && user.fullInfo?.botInfo){\n      message = handleBotCmdText(message,user.fullInfo.botInfo) as ApiMessage\n    }\n  }\n  message.isOutgoing = false\n  console.log(\"handleMessageEntities\",message)\n  return message\n}\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      let {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      message = handleMessageEntities(global,chatId,message)\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      let { chatId, localId, message } = update;\n      message = handleMessageEntities(global,chatId,message) as ApiMessage\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n      let messageNew = message\n      if (!messageNew.isOutgoing && messageNew.content\n        && messageNew.content.text && messageNew.content.text.text && !messageNew.content.text!.entities) {\n        const {text, entities} = parseMessageInput(messageNew.content.text.text);\n        messageNew.content.text.text = text;\n        messageNew.content.text.entities = entities\n      }\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...messageNew,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error && error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n\n  // Channel update\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    callApiWithPdu(new RemoveMessagesReq({chatId,messageIds:ids}).pack()).catch(console.error)\n\n    ids.forEach((id) => {\n\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import {ApiBotInfo, ApiMessage} from \"../../api/types\";\nimport {parseCodeBlock, parseEntities} from \"../share/utils/stringParse\";\n\nexport function handleMessageTextCode(msgSend:Partial<ApiMessage> | ApiMessage){\n  if(msgSend.content?.text && msgSend.content.text.text){\n    const {entities} = msgSend.content.text\n    // @ts-ignore\n    msgSend.content.text = {\n      ...parseCodeBlock(msgSend.content.text?.text,entities)\n    }\n  }\n  return msgSend\n}\n\nexport function handleBotCmdText(msgSend:Partial<ApiMessage> | ApiMessage,botInfo:ApiBotInfo){\n  const commands:string[] = []\n  if(botInfo && botInfo.commands){\n    botInfo.commands.forEach(cmd=>commands.push(cmd.command))\n  }\n  if(msgSend.content && msgSend.content.text && msgSend.content.text.text){\n    if(msgSend.content.text!.entities && msgSend.content.text!.entities.find(e=>{\n      // @ts-ignore\n      return e.cipher\n    })){\n    }else{\n      // @ts-ignore\n      msgSend.content.text!.entities = [\n        ...msgSend.content.text!.entities||[],\n        ...parseEntities(msgSend.content.text!.text!,commands)\n      ]\n    }\n  }\n  return msgSend;\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiChatFolder, ApiUser, ApiUserStatus} from '../../../api/types';\n\nimport {addUsers, addUserStatuses, deleteContact, replaceUsers, replaceUserStatuses, updateUser,} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {selectIsCurrentUserPremium, selectUser} from '../../selectors';\nimport type {ActionReturnType, GlobalState, RequiredGlobalState} from '../../types';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\nimport {UserStoreData_Type} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\nfunction updateUserStoreData(global:GlobalState,userStoreDataRes?:UserStoreData_Type){\n  // console.log(\"updateUserStoreData\",userStoreDataRes)\n  if (userStoreDataRes){\n    const {chatFolders,...userStoreData} = userStoreDataRes;\n    return {\n      ...global,\n      userStoreData,\n      chatFolders:{\n        ...global.chatFolders,\n        ...(chatFolders ? JSON.parse(chatFolders!):{})\n      }\n    }\n  }else{\n    return global\n  }\n\n}\n\nfunction handleUpdateBots(global:GlobalState,user:ApiUser){\n  const user1 = selectUser(global,user.id)\n  if(!user1){\n    const statusById:Record<string, ApiUserStatus> = {}\n    statusById[user.id] = {\n      type:'userStatusEmpty'\n    }\n    global = addUserStatuses(global,statusById);\n    global = addUsers(global,{\n      [user.id]:user\n    })\n  }else{\n    return updateUser(global, user.id,{\n      ...user1,\n      avatarHash:user.avatarHash,\n      firstName:user.firstName,\n      fullInfo:{\n        ...user1.fullInfo,\n        bio:user.fullInfo?.bio,\n        botInfo: {\n          ...user1.fullInfo?.botInfo!,\n          description:user.fullInfo?.botInfo?.description,\n          aiBot:{\n            ...user1.fullInfo?.botInfo!.aiBot,\n            chatGptConfig:{\n              ...user1.fullInfo?.botInfo!.aiBot!.chatGptConfig!,\n              welcome:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.welcome,\n              template:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.template,\n              templateSubmit:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.templateSubmit,\n              init_system_content:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.init_system_content\n            }\n          }\n        }\n      }\n    });\n  }\n  return global\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case \"updateGlobalUpdate\":\n      const {data} = update\n      switch (data.action){\n        case \"updateBots\":\n          return handleUpdateBots(global,data.payload.user);\n        case \"onLogged\":\n          let {userStoreData} = global\n          if(!userStoreData){\n            userStoreData = {\n              time:0,\n              chatIds:Object.keys(global.chats.listIds.active),\n              chatFolders:JSON.stringify(global.chatFolders)\n            }\n          }else{\n            userStoreData = {\n              ...userStoreData,\n              chatFolders:JSON.stringify(global.chatFolders)\n            }\n          }\n          callApiWithPdu(new SyncReq({\n            userStoreData,\n          }).pack()).catch(console.error)\n          break\n        case \"updateUserStoreData\":\n          return updateUserStoreData(global,data.payload!.userStoreData)\n        case \"updateTopCats\":\n          return {\n            ...global,\n            topCats:{\n              ...global.topCats,\n              ...data.payload!.topCats\n            }\n          }\n        case \"updateChatGptHistory\":\n          const chatId = data.payload!.chatId;\n          return {\n            ...global,\n            chatGptAskHistory:{\n              ...global.chatGptAskHistory,\n              [chatId]:{\n                ...global.chatGptAskHistory[chatId],\n                [data.payload!.msgIdAssistant]:data.payload!.msgIdUser\n              }\n            }\n          }\n        case \"updateBot\":\n          const userBotUpdate = {\n            ...global.users.byId[data.payload!.botInfo.botId],\n            bot:data.payload!.bot\n          };\n          if(data.payload!.bot.chatGptConfig && data.payload!.bot.chatGptConfig.api_key){\n            localStorage.setItem(\"open-api-key\" , data.payload!.bot.chatGptConfig.api_key)\n          }\n          return updateUser(global,data.payload!.botInfo.botId,userBotUpdate)\n        case \"clearHistory\":\n          actions.updateGlobal({\n            messages:{\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [data.payload!.chatId]:{\n                  ...global.messages.byChatId[data.payload!.chatId],\n                  byId:{},\n                  threadsById:{\n                    \"-1\":{\n                      ...global.messages.byChatId[data.payload!.chatId].threadsById[\"-1\"],\n                      lastScrollOffset:undefined,\n                      lastViewportIds: [],\n                      listedIds:[]\n                    }\n                  }\n                }\n              }\n            },\n            chats:{\n              ...global.chats,\n              byId:{\n                ...global.chats.byId,\n                [data.payload!.chatId]:{\n                  ...global.chats.byId[data.payload!.chatId],\n                  lastMessage:undefined\n                }\n              }\n            }\n          })\n          break;\n        case \"removeBot\":\n          if(global.chats.listIds && global.chats.listIds.active){\n            let listIds_active = global.chats.listIds.active\n            listIds_active = listIds_active!.filter(id=>id !== data.payload!.chatId)\n            actions.updateGlobal({\n              chats:{\n                ...global.chats,\n                listIds: {\n                  ...global.chats.listIds,\n                  active:listIds_active\n                },\n                totalCount: {\n                  ...global.chats.totalCount,\n                  all:listIds_active.length\n                }\n              }\n            })\n            // @ts-ignore\n            actions.openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n            actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          }\n          return\n      }\n      break\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n      if(selectUser(global,update.id)){\n        return updateUser(global, update.id, update.user);\n      }else{\n        return addUsers(global, {\n          [update.id]:update.user\n        });\n      }\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useMemo,} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {AnimationLevel, ISettings} from '../../../types';\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {ApiChat} from '../../../api/types';\nimport type {GlobalState, TabState} from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME,\n  APP_VERSION,\n  ASSET_CACHE_NAME,\n  BETA_CHANGELOG_URL,\n  CLOUD_MESSAGE_ENABLE,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  LANG_CACHE_NAME,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {IS_PWA} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport {formatDateToString} from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport {setPermanentWebVersion} from '../../../util/permanentWebVersion';\nimport {clearWebsync} from '../../../util/websync';\nimport {\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport {isChatArchived} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport {useHotkeys} from '../../../hooks/useHotkeys';\nimport {getPromptInstall} from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport * as cacheApi from '../../../util/cacheApi';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectFolder: ()=>void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onSelectProfile: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    topSearchPlaceHolder?:string,\n    isLoading: boolean;\n    currentUserId?: string;\n    currentAccountAddress?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  topSearchPlaceHolder,\n  contactsFilter,\n  onSearchQuery,\n  onSelectProfile,\n  onSelectFolder,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n  currentAccountAddress,\n}) => {\n  const {\n    fetchTopCats,\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut,\n    updateGlobal,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return (chat && chat.unreadCount) ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n    fetchTopCats()\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleClearCache = useCallback(async () => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    await cacheApi.clear(LANG_CACHE_NAME);\n    await cacheApi.clear(ASSET_CACHE_NAME);\n\n    setTimeout(()=>{\n      location.reload();\n    },500)\n  }, [openUrl]);\n\n  const handleSignOutClick = useCallback(() => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    setTimeout(()=>{\n      signOut({ forceInitApi: true });\n      updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n      },300)\n  }, [openChat,signOut]);\n\n  const handleLoginClick = useCallback(() => {\n\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    updateGlobal({\n      authState:\"authorizationStateWaitSignPassword\"\n    })\n  }, [updateGlobal]);\n\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang(topSearchPlaceHolder || '编程 写作 旅游...');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"folder\"\n        onClick={onSelectFolder}\n      >\n        {lang('Filters')}\n      </MenuItem>\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectProfile}\n      >\n        {lang('个人资料')}\n      </MenuItem>\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"settings\"\n          onClick={onSelectSettings}\n        >\n          {lang('Settings')}\n        </MenuItem>\n      }\n      {/*{*/}\n      {/*  currentUserId  &&*/}\n      {/*  <MenuItem*/}\n      {/*    icon=\"saved-messages\"*/}\n      {/*    onClick={handleSelectSaved}*/}\n      {/*  >*/}\n      {/*    {lang('SavedMessages')}*/}\n      {/*  </MenuItem>*/}\n      {/*}*/}\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"stop\"\n        onClick={handleClearCache}\n      >\n        清除缓存\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n      {\n        !CLOUD_MESSAGE_ENABLE ?\n          <></>:\n          currentAccountAddress  ?\n        <MenuItem\n          icon=\"logout\"\n          onClick={handleSignOutClick}\n        >\n          {lang('SignOut')}\n        </MenuItem>:\n          <MenuItem\n            icon=\"user\"\n            onClick={handleLoginClick}\n          >\n            {lang('Login')}\n          </MenuItem>\n      }\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,currentAccountAddress\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n    const { topSearchPlaceHolder } = global.topCats;\n\n    return {\n      topSearchPlaceHolder,\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.messages) : false,\n      currentUserId,\n      currentAccountAddress,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {loadAllChats,createChat} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    onNewChannel();\n    setTimeout(()=>{\n      setIsMenuOpen(false);\n    },200)\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-add\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={false}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useRef, useState,} from '../../../lib/teact/teact';\n\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {FolderEditDispatch} from '../../../hooks/reducers/useFoldersReducer';\n\nimport {IS_TOUCH_ENV} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\nimport * as cacheApi from '../../../util/cacheApi';\n\nimport './LeftMain.scss';\nimport {getActions} from '../../../global';\nimport {LANG_CACHE_NAME} from \"../../../config\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel,openChat,sendBotCommand,focusLastMessage } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectProfile = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.EditProfile);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectFolder = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.Folders);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectSettings = useCallback(() => {\n    openChat({ id: UserIdFirstBot, shouldReplaceHistory: true }, { forceOnHeavyAnimation: true });\n    focusLastMessage()\n    setTimeout(()=>{\n      sendBotCommand({\n        chatId:UserIdFirstBot,\n        command:\"/start\"\n      })\n    },300)\n    // onSettingsScreenSelect(SettingsScreens.Main);\n    // onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(async () => {\n    await cacheApi.clear(LANG_CACHE_NAME);\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep2);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectProfile={handleSelectProfile}\n        onSelectFolder={handleSelectFolder}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst LeftColumnContentStr = window.sessionStorage.getItem(\"LeftColumnContent\");\nlet leftColumnContent = LeftColumnContent.ChatList;\nif(LeftColumnContentStr && LeftColumnContentStr !== '2'){\n  leftColumnContent = parseInt(LeftColumnContentStr)\n}\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      // setContent_(LeftColumnContent.NewChannelStep1);\n      // return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.Folders:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.EditProfile:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export type MediaSessionHandlers = {\n  play?: () => void;\n  pause?: () => void;\n  stop?: () => void;\n\n  previoustrack?: () => void;\n  nexttrack?: () => void;\n\n  togglemicrophone?: () => void;\n  togglecamera?: () => void;\n  hangup?: () => void;\n\n  seekbackward?: (details: MediaSessionActionDetails) => void;\n  seekforward?: (details: MediaSessionActionDetails) => void;\n  seekTo?: ((details: MediaSessionActionDetails) => void);\n};\n\ninterface MediaMetadataParameters {\n  title?: string;\n  artist?: string;\n  album?: string;\n  artwork?: MediaImage[];\n}\n\nconst DEFAULT_HANDLERS = {\n  play: undefined,\n  pause: undefined,\n  seekbackward: undefined,\n  seekforward: undefined,\n  previoustrack: undefined,\n  nexttrack: undefined,\n  stop: undefined,\n  seekTo: undefined,\n};\n\nexport function registerMediaSession(metadata?: MediaMetadata, handlers?: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    if (metadata) updateMetadata(metadata);\n    if (handlers) setMediaSessionHandlers(handlers);\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn('MediaSession API not supported in this browser');\n  }\n}\n\nexport function updateMetadata(metadata?: MediaMetadata) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = metadata ?? null;\n  }\n}\n\nexport function setMediaSessionHandlers(handlers: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    Object.entries({ ...DEFAULT_HANDLERS, ...handlers }).forEach(([key, handler]) => {\n      try {\n        // @ts-ignore API not standardized yet\n        mediaSession.setActionHandler(key, handler);\n      } catch (err) {\n        // Handler not supported, ignoring\n      }\n    });\n  }\n}\n\nexport function clearMediaSession() {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = null;\n    setMediaSessionHandlers(DEFAULT_HANDLERS);\n    if (mediaSession.playbackState) mediaSession.playbackState = 'none';\n    mediaSession.setPositionState?.();\n  }\n}\n\nexport function setPlaybackState(state: 'none' | 'paused' | 'playing' = 'none') {\n  const { mediaSession } = window.navigator;\n  if (mediaSession && mediaSession.playbackState) {\n    mediaSession.playbackState = state;\n  }\n}\n\nexport function setPositionState(state?: MediaPositionState) {\n  if (!state || state.position === undefined || state.duration === undefined) return;\n  state.position = Math.min(state.position, state.duration);\n\n  const { mediaSession } = window.navigator;\n  mediaSession?.setPositionState?.(state);\n}\n\nexport function buildMediaMetadata({\n  title, artist, album, artwork,\n}: MediaMetadataParameters) {\n  if ('MediaMetadata' in window) {\n    return new window.MediaMetadata({\n      title,\n      artist,\n      album,\n      artwork,\n    });\n  }\n  return undefined;\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../lib/teact/teact';\nimport { getActions, getGlobal } from '../global';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../config';\nimport type { Track, TrackId } from '../util/audioPlayer';\nimport { register } from '../util/audioPlayer';\nimport { isSafariPatchInProgress } from '../util/patchSafariProgressiveAudio';\nimport type { MediaSessionHandlers } from '../util/mediaSession';\nimport {\n  registerMediaSession, setPlaybackState, setPositionState, updateMetadata,\n} from '../util/mediaSession';\nimport { selectTabState } from '../global/selectors';\n\nimport useEffectWithPrevDeps from './useEffectWithPrevDeps';\nimport useSyncEffect from './useSyncEffect';\n\ntype Handler = (e: Event) => void;\n\nconst DEFAULT_SKIP_TIME = 10;\n\nconst useAudioPlayer = (\n  trackId: TrackId,\n  originalDuration: number, // Sometimes incorrect for voice messages\n  trackType: Track['type'],\n  src?: string,\n  handlers?: Record<string, Handler>,\n  metadata?: MediaMetadata,\n  onInit?: (element: HTMLAudioElement) => void,\n  shouldPlay = false,\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n  noPlaylist = false,\n  noProgressUpdates = false,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const controllerRef = useRef<ReturnType<typeof register>>(null);\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  let isPlayingSync = isPlaying;\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n\n  const handleTrackChange = useCallback(() => {\n    setIsPlaying(false);\n    if (onTrackChange) onTrackChange();\n  }, [onTrackChange]);\n\n  useSyncEffect(() => {\n    controllerRef.current = register(trackId, trackType, (eventName, e) => {\n      switch (eventName) {\n        case 'onPlay': {\n          const {\n            setVolume, setPlaybackRate, toggleMuted, proxy,\n          } = controllerRef.current!;\n          setIsPlaying(true);\n\n          registerMediaSession(metadata, makeMediaHandlers(controllerRef));\n          setPlaybackState('playing');\n          const { audioPlayer } = selectTabState(getGlobal());\n          setVolume(audioPlayer.volume);\n          toggleMuted(Boolean(audioPlayer.isMuted));\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (trackType === 'voice' || duration > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION) {\n            setPlaybackRate(audioPlayer.playbackRate);\n          }\n\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onRateChange': {\n          const { proxy } = controllerRef.current!;\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onPause':\n          setIsPlaying(false);\n          setPlaybackState('paused');\n          break;\n        case 'onTimeUpdate': {\n          const { proxy } = controllerRef.current!;\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (!noProgressUpdates) setPlayProgress(proxy.currentTime / duration);\n          break;\n        }\n        case 'onEnded': {\n          setPlaybackState('paused');\n          break;\n        }\n      }\n\n      handlers?.[eventName]?.(e);\n    }, onForcePlay, handleTrackChange);\n\n    const { proxy } = controllerRef.current!;\n\n    if (!isPlaying && !proxy.paused) {\n      setIsPlaying(true);\n      // `isPlayingSync` is only needed to help `setIsPlaying` because it is asynchronous\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      isPlayingSync = true;\n    }\n\n    if (onInit) {\n      onInit(proxy);\n    }\n  }, [trackId]);\n\n  useEffect(() => {\n    if (isPlaying && metadata) updateMetadata(metadata);\n  }, [metadata, isPlaying]);\n\n  const {\n    play,\n    pause,\n    setCurrentTime,\n    proxy,\n    destroy,\n    setVolume,\n    stop,\n    isFirst,\n    isLast,\n    requestNextTrack,\n    requestPreviousTrack,\n    setPlaybackRate,\n    toggleMuted,\n  } = controllerRef.current!;\n  const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n\n  // RAF progress\n  useEffect(() => {\n    if (duration && !isSafariPatchInProgress(proxy) && !noProgressUpdates) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  }, [duration, playProgress, proxy, noProgressUpdates]);\n\n  // Cleanup\n  useEffect(() => () => {\n    destroy(noPlaylist);\n  }, [destroy, noPlaylist]);\n\n  // Autoplay once `src` is present\n  useEffectWithPrevDeps(([prevShouldPlay, prevSrc]) => {\n    if (prevShouldPlay === shouldPlay && src === prevSrc) {\n      return;\n    }\n\n    // When paused by another player\n    if (proxy.src && proxy.paused) {\n      return;\n    }\n\n    if (shouldPlay && src && !isPlaying) {\n      play(src);\n    }\n  }, [shouldPlay, src, isPlaying, play, proxy.src, proxy.paused]);\n\n  const playIfPresent = useCallback(() => {\n    if (src) {\n      play(src);\n    }\n  }, [src, play]);\n\n  const playPause = useCallback(() => {\n    if (isPlaying) {\n      pause();\n    } else {\n      playIfPresent();\n    }\n  }, [pause, playIfPresent, isPlaying]);\n\n  const setTime = useCallback((time: number) => {\n    setCurrentTime(time);\n    if (duration) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  }, [duration, proxy, setCurrentTime]);\n\n  return {\n    isPlaying: isPlayingSync,\n    playProgress,\n    playPause,\n    pause,\n    play: playIfPresent,\n    stop,\n    setCurrentTime: setTime,\n    setVolume,\n    audioProxy: proxy,\n    duration,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setPlaybackRate,\n    toggleMuted,\n  };\n};\n\nfunction makeMediaHandlers(controllerRef: React.RefObject<ReturnType<typeof register>>) {\n  let mediaHandlers: MediaSessionHandlers = {};\n  if (controllerRef && controllerRef.current) {\n    const {\n      play, pause, setCurrentTime, proxy, requestNextTrack, requestPreviousTrack, isFirst, isLast,\n    } = controllerRef.current;\n    mediaHandlers = {\n      play: () => {\n        play(proxy.src);\n      },\n      pause: () => {\n        pause();\n      },\n      stop: () => {\n        pause();\n        setCurrentTime(0);\n        getActions().closeAudioPlayer();\n      },\n      seekbackward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.max(proxy.currentTime - skipTime, 0));\n      },\n      seekforward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.min(proxy.currentTime + skipTime, proxy.duration));\n      },\n      seekTo: (event) => {\n        if (event.seekTime) {\n          setCurrentTime(event.seekTime);\n        }\n      },\n    };\n\n    if (!isLast()) {\n      mediaHandlers.nexttrack = () => {\n        requestNextTrack();\n      };\n    }\n    if (!isFirst()) {\n      mediaHandlers.previoustrack = () => {\n        requestPreviousTrack();\n      };\n    }\n  }\n  return mediaHandlers;\n}\n\nexport default useAudioPlayer;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n\n    // console.log(chatId,{isChatWithBot,canRestartBot},Boolean(selectIsChatBotNotStarted(global, chatId)),canStartBot)\n\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId,setEditingId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n    setEditingId({ messageId });\n    // setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../config';\nimport { getDocumentExtension, getDocumentHasPreview } from './helpers/documentInfo';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../hooks/useMedia';\nimport useFlag from '../../hooks/useFlag';\n\nimport File from './File';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  smaller?: boolean;\n  isSelected?: boolean;\n  isSelectable?: boolean;\n  canAutoLoad?: boolean;\n  uploadProgress?: number;\n  withDate?: boolean;\n  datetime?: number;\n  className?: string;\n  sender?: string;\n  autoLoadFileMaxSizeMb?: number;\n  isDownloading: boolean;\n  onCancelUpload?: () => void;\n  onMediaClick?: () => void;\n  onDateClick?: (messageId: number, chatId: string) => void;\n};\n\nconst BYTES_PER_MB = 1024 * 1024;\n\nconst Document: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  smaller,\n  canAutoLoad,\n  autoLoadFileMaxSizeMb,\n  uploadProgress,\n  withDate,\n  datetime,\n  className,\n  sender,\n  isSelected,\n  isSelectable,\n  onCancelUpload,\n  onMediaClick,\n  onDateClick,\n  isDownloading,\n}) => {\n  const dispatch = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const document = message.content.document!;\n  const { fileName, size, timestamp } = document;\n  const extension = getDocumentExtension(document) || '';\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const [wasIntersected, markIntersected] = useFlag();\n  useEffect(() => {\n    if (isIntersecting) {\n      markIntersected();\n    }\n  }, [isIntersecting, markIntersected]);\n\n  // Auto-loading does not use global download manager because requires additional click to save files locally\n  const [isLoadAllowed, setIsLoadAllowed] = useState(\n    canAutoLoad && (!autoLoadFileMaxSizeMb || size <= autoLoadFileMaxSizeMb * BYTES_PER_MB),\n  );\n\n  const shouldDownload = Boolean(isDownloading || (isLoadAllowed && wasIntersected));\n\n  const documentHash = getMessageMediaHash(message, 'download');\n  const { loadProgress: downloadProgress, mediaData } = useMediaWithLoadProgress(\n    documentHash, !shouldDownload, getMessageMediaFormat(message, 'download'), undefined, undefined, true,\n  );\n  const isLoaded = Boolean(mediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !isLoaded);\n\n  const hasPreview = getDocumentHasPreview(document);\n  const thumbDataUri = hasPreview ? getMessageMediaThumbDataUri(message) : undefined;\n  const localBlobUrl = hasPreview ? document.previewBlobUrl : undefined;\n  const previewData = useMedia(getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n\n  const withMediaViewer = onMediaClick && Boolean(document.mediaType) && (\n    SUPPORTED_VIDEO_CONTENT_TYPES.has(document.mimeType) || SUPPORTED_IMAGE_CONTENT_TYPES.has(document.mimeType)\n  );\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload();\n      }\n      return;\n    }\n\n    if (isDownloading) {\n      dispatch.cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (isTransferring) {\n      setIsLoadAllowed(false);\n      return;\n    }\n\n    if (withMediaViewer) {\n      onMediaClick!();\n    } else {\n      dispatch.downloadMessageMedia({ message });\n    }\n  }, [\n    isUploading, isDownloading, isTransferring, withMediaViewer, onCancelUpload, dispatch, message, onMediaClick,\n  ]);\n\n  const handleDateClick = useCallback(() => {\n    onDateClick!(message.id, message.chatId);\n  }, [onDateClick, message.id, message.chatId]);\n\n  return (\n    <File\n      ref={ref}\n      name={fileName}\n      extension={extension}\n      size={size}\n      timestamp={withDate ? datetime || timestamp : undefined}\n      thumbnailDataUri={thumbDataUri}\n      previewData={localBlobUrl || previewData}\n      smaller={smaller}\n      isTransferring={isTransferring}\n      isUploading={isUploading}\n      transferProgress={transferProgress}\n      className={className}\n      sender={sender}\n      isSelectable={isSelectable}\n      isSelected={isSelected}\n      actionIcon={withMediaViewer ? (isMessageDocumentVideo(message) ? 'icon-play' : 'icon-eye') : 'icon-download'}\n      onClick={handleClick}\n      onDateClick={onDateClick ? handleDateClick : undefined}\n    />\n  );\n};\n\nexport default memo(Document);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiAudio, ApiMessage, ApiVoice } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\nimport type { ISettings } from '../../types';\nimport { AudioOrigin } from '../../types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { MAX_EMPTY_WAVEFORM_POINTS, renderWaveform } from './helpers/waveform';\nimport renderText from './helpers/renderText';\nimport { getFileSizeString } from './helpers/documentInfo';\nimport {\n  getMediaDuration,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isMessageLocal,\n  isOwnMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDateTime, formatMediaDuration, formatPastTimeShort } from '../../util/dateFormat';\nimport { decodeWaveform, interpolateArray } from '../../util/waveform';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport useBuffering from '../../hooks/useBuffering';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\nimport useMedia from '../../hooks/useMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Link from '../ui/Link';\n\nimport './Audio.scss';\n\ntype OwnProps = {\n  theme: ISettings['theme'];\n  message: ApiMessage;\n  senderTitle?: string;\n  uploadProgress?: number;\n  origin: AudioOrigin;\n  date?: number;\n  lastSyncTime?: number;\n  noAvatars?: boolean;\n  className?: string;\n  isSelectable?: boolean;\n  isSelected?: boolean;\n  isDownloading: boolean;\n  isTranscribing?: boolean;\n  isTranscribed?: boolean;\n  canDownload?: boolean;\n  canTranscribe?: boolean;\n  isTranscriptionHidden?: boolean;\n  isTranscriptionError?: boolean;\n  onHideTranscription?: (isHidden: boolean) => void;\n  onPlay: (messageId: number, chatId: string) => void;\n  onReadMedia?: () => void;\n  onCancelUpload?: () => void;\n  onDateClick?: (messageId: number, chatId: string) => void;\n};\n\nexport const TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 375px)');\nexport const WITH_AVATAR_TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 410px)');\nconst AVG_VOICE_DURATION = 10;\n// This is needed for browsers requiring user interaction before playing.\nconst PRELOAD = true;\n// eslint-disable-next-line max-len\nconst TRANSCRIBE_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 24\" class=\"loading-svg\"><rect class=\"loading-rect\" fill=\"transparent\" width=\"32\" height=\"24\" stroke-width=\"3\" stroke-linejoin=\"round\" rx=\"6\" ry=\"6\" stroke=\"var(--accent-color)\" stroke-dashoffset=\"1\" stroke-dasharray=\"32,68\"></rect></svg>';\n\nconst Audio: FC<OwnProps> = ({\n  theme,\n  message,\n  senderTitle,\n  uploadProgress,\n  origin,\n  date,\n  lastSyncTime,\n  noAvatars,\n  className,\n  isSelectable,\n  isSelected,\n  isDownloading,\n  isTranscribing,\n  isTranscriptionHidden,\n  isTranscribed,\n  isTranscriptionError,\n  canDownload,\n  canTranscribe,\n  onHideTranscription,\n  onPlay,\n  onReadMedia,\n  onCancelUpload,\n  onDateClick,\n}) => {\n  const { cancelMessageMediaDownload, downloadMessageMedia, transcribeAudio } = getActions();\n\n  const { content: { audio, voice, video }, isMediaUnread } = message;\n  const isVoice = Boolean(voice || video);\n  const isSeeking = useRef<boolean>(false);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isRtl } = lang;\n\n  const { isMobile } = useAppLayout();\n  const [isActivated, setIsActivated] = useState(false);\n  const shouldLoad = (isActivated || PRELOAD) && lastSyncTime;\n  const coverHash = getMessageMediaHash(message, 'pictogram');\n  const coverBlobUrl = useMedia(coverHash, false, ApiMediaFormat.BlobUrl);\n\n  const mediaData = useMedia(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleForcePlay = useCallback(() => {\n    setIsActivated(true);\n    onPlay(message.id, message.chatId);\n  }, [message, onPlay]);\n\n  const handleTrackChange = useCallback(() => {\n    setIsActivated(false);\n  }, []);\n\n  let {\n    isBuffered, bufferedRanges, bufferingHandlers, checkBuffering,\n  } = useBuffering();\n\n  const {\n    isPlaying, playProgress, playPause, setCurrentTime, duration,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    bufferingHandlers,\n    undefined,\n    checkBuffering,\n    isActivated,\n    handleForcePlay,\n    handleTrackChange,\n    isMessageLocal(message),\n  );\n\n  const isOwn = isOwnMessage(message);\n  const waveformCanvasRef = useWaveformCanvas(\n    theme, voice, (isMediaUnread && !isOwn) ? 1 : playProgress, isOwn, !noAvatars, isMobile,\n  );\n\n  const withSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n\n  useEffect(() => {\n    setIsActivated(isPlaying);\n  }, [isPlaying]);\n\n  const isLoadingForPlaying = isActivated && !isBuffered;\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    isLoadingForPlaying || isDownloading,\n  );\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring);\n\n  const shouldRenderCross = shouldRenderSpinner && (isLoadingForPlaying || isUploading);\n\n  const handleButtonClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.();\n      return;\n    }\n\n    if (!isPlaying) {\n      onPlay(message.id, message.chatId);\n    }\n    console.log(\"[media]\\n\",JSON.stringify(message.content))\n    getActions().setAudioPlayerOrigin({ origin });\n    setIsActivated(!isActivated);\n    playPause();\n  }, [isUploading, isPlaying, isActivated, playPause, onCancelUpload, onPlay, message.id, message.chatId, origin]);\n\n  useEffect(() => {\n    if (onReadMedia && isMediaUnread && (isPlaying || isDownloading)) {\n      onReadMedia();\n    }\n  }, [isPlaying, isMediaUnread, onReadMedia, isDownloading]);\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      e.stopPropagation(); // Prevent Slide-to-Reply activation\n      // Prevent track skipping while seeking near end\n      setCurrentTime(Math.max(Math.min(duration * ((clientX - left) / width), duration - 0.1), 0.001));\n    }\n  }, [duration, setCurrentTime]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (e instanceof MouseEvent && e.button === 2) return;\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  const handleDateClick = useCallback(() => {\n    onDateClick!(message.id, message.chatId);\n  }, [onDateClick, message.id, message.chatId]);\n\n  const handleTranscribe = useCallback(() => {\n    transcribeAudio({ chatId: message.chatId, messageId: message.id });\n  }, [message.chatId, message.id, transcribeAudio]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !withSeekline) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [withSeekline, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const transcribeSvgMemo = useMemo(() => (\n    <div dangerouslySetInnerHTML={{ __html: TRANSCRIBE_SVG }} />\n  ), []);\n\n  function renderFirstLine() {\n    if (isVoice) {\n      return senderTitle || 'Voice';\n    }\n\n    const { title, fileName } = audio!;\n\n    return title || fileName;\n  }\n\n  function renderSecondLine() {\n    if (isVoice) {\n      return (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {formatMediaDuration((voice || video)!.duration)}\n        </div>\n      );\n    }\n\n    const { performer } = audio!;\n\n    return (\n      <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n        {formatMediaDuration(duration)}\n        <span className=\"bullet\">&bull;</span>\n        {performer && <span className=\"performer\" title={performer}>{renderText(performer)}</span>}\n        {performer && senderTitle && <span className=\"bullet\">&bull;</span>}\n        {senderTitle && <span title={senderTitle}>{renderText(senderTitle)}</span>}\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Audio',\n    className,\n    isOwn && origin === AudioOrigin.Inline && 'own',\n    (origin === AudioOrigin.Search || origin === AudioOrigin.SharedMedia) && 'bigger',\n    isSelected && 'audio-is-selected',\n  );\n\n  const buttonClassNames = ['toggle-play'];\n  if (shouldRenderCross) {\n    buttonClassNames.push('loading');\n  } else {\n    buttonClassNames.push(isPlaying ? 'pause' : 'play');\n  }\n\n  const contentClassName = buildClassName('content', withSeekline && 'with-seekline');\n\n  function renderWithTitle() {\n    return (\n      <div className={contentClassName}>\n        <div className=\"content-row\">\n          <p className=\"title\" dir=\"auto\" title={renderFirstLine()}>{renderText(renderFirstLine())}</p>\n\n          <div className=\"message-date\">\n            {Boolean(date) && (\n              <Link\n                className=\"date\"\n                onClick={handleDateClick}\n              >\n                {formatPastTimeShort(lang, date * 1000)}\n              </Link>\n            )}\n          </div>\n        </div>\n\n        {withSeekline && (\n          <div className=\"meta search-result\" dir={isRtl ? 'rtl' : undefined}>\n            <span className=\"duration with-seekline\" dir=\"auto\">\n              {playProgress < 1 && `${formatMediaDuration(duration * playProgress, duration)}`}\n            </span>\n            {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n          </div>\n        )}\n        {!withSeekline && renderSecondLine()}\n      </div>\n    );\n  }\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n      {isSelectable && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color={coverBlobUrl ? 'translucent-white' : 'primary'}\n        className={buttonClassNames.join(' ')}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n        onClick={handleButtonClick}\n        isRtl={lang.isRtl}\n        backgroundImage={coverBlobUrl}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames, shouldRenderCross && 'interactive')}>\n          <ProgressSpinner\n            progress={transferProgress}\n            transparent\n            size=\"m\"\n            onClick={shouldRenderCross ? handleButtonClick : undefined}\n            noCross={!shouldRenderCross}\n          />\n        </div>\n      )}\n      {audio && canDownload && !isUploading && (\n        <Button\n          round\n          size=\"tiny\"\n          className=\"download-button\"\n          ariaLabel={isDownloading ? 'Cancel download' : 'Download'}\n          onClick={handleDownloadClick}\n        >\n          <i className={isDownloading ? 'icon-close' : 'icon-arrow-down'} />\n        </Button>\n      )}\n      {origin === AudioOrigin.Search && renderWithTitle()}\n      {origin !== AudioOrigin.Search && audio && renderAudio(\n        lang,\n        audio,\n        duration,\n        isPlaying,\n        playProgress,\n        bufferedRanges,\n        seekerRef,\n        (isDownloading || isUploading),\n        date,\n        transferProgress,\n        onDateClick ? handleDateClick : undefined,\n      )}\n      {origin === AudioOrigin.SharedMedia && (voice || video) && renderWithTitle()}\n      {origin === AudioOrigin.Inline && voice && (\n        renderVoice(\n          voice,\n          seekerRef,\n          waveformCanvasRef,\n          playProgress,\n          isMediaUnread,\n          isTranscribing,\n          isTranscriptionHidden,\n          isTranscribed,\n          isTranscriptionError,\n          transcribeSvgMemo,\n          canTranscribe ? handleTranscribe : undefined,\n          onHideTranscription,\n        )\n      )}\n    </div>\n  );\n};\n\nfunction getSeeklineSpikeAmounts(isMobile?: boolean, withAvatar?: boolean) {\n  return {\n    MIN_SPIKES: isMobile ? (TINY_SCREEN_WIDTH_MQL.matches ? 16 : 20) : 25,\n    MAX_SPIKES: isMobile\n      ? (TINY_SCREEN_WIDTH_MQL.matches\n        ? 35\n        : (withAvatar && WITH_AVATAR_TINY_SCREEN_WIDTH_MQL.matches ? 40 : 45))\n      : 75,\n  };\n}\n\nfunction renderAudio(\n  lang: LangFn,\n  audio: ApiAudio,\n  duration: number,\n  isPlaying: boolean,\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: React.Ref<HTMLElement>,\n  showProgress?: boolean,\n  date?: number,\n  progress?: number,\n  handleDateClick?: NoneToVoidFunction,\n) {\n  const {\n    title, performer, fileName,\n  } = audio;\n  const showSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n  const { isRtl } = lang;\n\n  return (\n    <div className=\"content\">\n      <p className=\"title\" dir=\"auto\" title={title}>{renderText(title || fileName)}</p>\n      {showSeekline && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration with-seekline\" dir=\"auto\">\n            {formatMediaDuration(duration * playProgress, duration)}\n          </span>\n          {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n        </div>\n      )}\n      {!showSeekline && showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {progress ? `${getFileSizeString(audio!.size * progress)} / ` : undefined}{getFileSizeString(audio!.size)}\n        </div>\n      )}\n      {!showSeekline && !showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration\" dir=\"auto\">{formatMediaDuration(duration)}</span>\n          {performer && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <span className=\"performer\" dir=\"auto\" title={performer}>{renderText(performer)}</span>\n            </>\n          )}\n          {Boolean(date) && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <Link className=\"date\" onClick={handleDateClick}>\n                {formatMediaDateTime(lang, date * 1000, true)}\n              </Link>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction renderVoice(\n  voice: ApiVoice,\n  seekerRef: React.Ref<HTMLDivElement>,\n  waveformCanvasRef: React.Ref<HTMLCanvasElement>,\n  playProgress: number,\n  isMediaUnread?: boolean,\n  isTranscribing?: boolean,\n  isTranscriptionHidden?: boolean,\n  isTranscribed?: boolean,\n  isTranscriptionError?: boolean,\n  svgMemo?: React.ReactNode,\n  onClickTranscribe?: VoidFunction,\n  onHideTranscription?: (isHidden: boolean) => void,\n) {\n  return (\n    <div className=\"content\">\n      <div className=\"waveform-wrapper\">\n        <div\n          className=\"waveform\"\n          draggable={false}\n          ref={seekerRef}\n        >\n          <canvas ref={waveformCanvasRef} />\n        </div>\n        {onClickTranscribe && (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Button onClick={() => {\n            if ((isTranscribed || isTranscriptionError) && onHideTranscription) {\n              onHideTranscription(!isTranscriptionHidden);\n            } else if (!isTranscribing) {\n              onClickTranscribe();\n            }\n          }}\n          >\n            <i className={buildClassName(\n              'transcribe-icon',\n              (isTranscribed || isTranscriptionError) ? 'icon-down' : 'icon-transcribe',\n              (isTranscribed || isTranscriptionError) && !isTranscriptionHidden && 'transcribe-shown',\n            )}\n            />\n            {isTranscribing && svgMemo}\n          </Button>\n        )}\n      </div>\n      <p className={buildClassName('voice-duration', isMediaUnread && 'unread')} dir=\"auto\">\n        {playProgress === 0 ? formatMediaDuration(voice.duration) : formatMediaDuration(voice.duration * playProgress)}\n      </p>\n    </div>\n  );\n}\n\nfunction useWaveformCanvas(\n  theme: ISettings['theme'],\n  voice?: ApiVoice,\n  playProgress = 0,\n  isOwn = false,\n  withAvatar = false,\n  isMobile = false,\n) {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const { data: spikes, peak } = useMemo(() => {\n    if (!voice) {\n      return undefined;\n    }\n\n    const { waveform, duration } = voice;\n    if (!waveform) {\n      return {\n        data: new Array(Math.min(duration, MAX_EMPTY_WAVEFORM_POINTS)).fill(0),\n        peak: 0,\n      };\n    }\n\n    const { MIN_SPIKES, MAX_SPIKES } = getSeeklineSpikeAmounts(isMobile, withAvatar);\n    const durationFactor = Math.min(duration / AVG_VOICE_DURATION, 1);\n    const spikesCount = Math.round(MIN_SPIKES + (MAX_SPIKES - MIN_SPIKES) * durationFactor);\n    const decodedWaveform = decodeWaveform(new Uint8Array(waveform));\n\n    return interpolateArray(decodedWaveform, spikesCount);\n  }, [isMobile, voice, withAvatar]) || {};\n\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (!canvas || !spikes || peak === undefined) {\n      return;\n    }\n\n    const fillColor = theme === 'dark' ? '#494A78' : '#ADD3F7';\n    const fillOwnColor = theme === 'dark' ? '#B7ABED' : '#AEDFA4';\n    const progressFillColor = theme === 'dark' ? '#8774E1' : '#3390EC';\n    const progressFillOwnColor = theme === 'dark' ? '#FFFFFF' : '#4FAE4E';\n\n    renderWaveform(canvas, spikes, playProgress, {\n      peak,\n      fillStyle: isOwn ? fillOwnColor : fillColor,\n      progressFillStyle: isOwn ? progressFillOwnColor : progressFillColor,\n    });\n  }, [isOwn, peak, playProgress, spikes, theme]);\n\n  return canvasRef;\n}\n\nfunction renderSeekline(\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: React.Ref<HTMLElement>,\n) {\n  return (\n    <div\n      className=\"seekline no-selection\"\n      ref={seekerRef as React.Ref<HTMLDivElement>}\n    >\n      {bufferedRanges.map(({ start, end }) => (\n        <div\n          className=\"seekline-buffered-progress\"\n          style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n        />\n      ))}\n      <span className=\"seekline-play-progress\">\n        <i\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n      <span className=\"seekline-thumb\">\n        <i\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n    </div>\n  );\n}\n\nexport default memo(Audio);\n","type IWaveformProps = {\n  peak: number;\n  fillStyle: string;\n  progressFillStyle: string;\n};\n\nexport const MAX_EMPTY_WAVEFORM_POINTS = 30;\nconst SPIKE_WIDTH = 2;\nconst SPIKE_STEP = 4;\nconst SPIKE_RADIUS = 1;\nconst HEIGHT = 23;\n\nexport function renderWaveform(\n  canvas: HTMLCanvasElement,\n  spikes: number[],\n  progress: number,\n  {\n    peak, fillStyle, progressFillStyle,\n  }: IWaveformProps,\n) {\n  const width = spikes.length * SPIKE_STEP;\n  const height = HEIGHT;\n\n  canvas.width = width * 2;\n  canvas.height = height * 2;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.scale(2, 2);\n\n  spikes.forEach((item, i) => {\n    ctx.globalAlpha = (i / spikes.length >= progress) ? 0.5 : 1;\n    ctx.fillStyle = progress > i / spikes.length ? progressFillStyle : fillStyle;\n    const spikeHeight = Math.max(2, HEIGHT * (item / Math.max(1, peak)));\n    roundedRectangle(ctx, i * SPIKE_STEP, (height + spikeHeight) / 2, SPIKE_WIDTH, spikeHeight, SPIKE_RADIUS);\n    ctx.fill();\n  });\n}\n\nfunction roundedRectangle(\n  ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number,\n) {\n  if (width < 2 * radius) {\n    radius = width / 2;\n  }\n  if (height < 2 * radius) {\n    radius = height / 2;\n  }\n\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.arcTo(x + width, y, x + width, y - height, radius);\n  ctx.arcTo(x + width, y - height, x, y - height, radius);\n  ctx.arcTo(x, y - height, x, y, radius);\n  ctx.arcTo(x, y, x + width, y, radius);\n  ctx.closePath();\n}\n","/* eslint-disable no-bitwise */\n\n// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'requestUploadImage':\n        return <i className=\"icon-photo\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\" onDoubleClick={(e)=>{\n          e.preventDefault();\n          e.stopPropagation();\n          return false\n        }}>\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={(e) => {\n                onClick({ messageId: message.id, button })\n              }}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\nimport {TEXT_AI_THINKING} from \"../../../worker/setting\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    (message.senderId === \"1\") && 'selfSend',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message) && message.content;\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleEditClick = useCallback(() => {\n    if(message.senderId === \"1\" && message.content.text && message.content.text.text && !message.content.text.text.startsWith(\"/\")){\n      if (handleDoubleClick) {\n        handleDoubleClick();\n      }\n      return false\n    }\n  },[])\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if(message.content.text?.text === TEXT_AI_THINKING){\n      return <DotAnimation className=\"status\" content={TEXT_AI_THINKING.replace(\"...\",\"\")} />\n    }\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <>\n            <div className={textContentClass} dir=\"auto\"\n                 onDoubleClick={handleEditClick}>\n              {renderMessageText()}\n              {isTranslationPending && (\n                <div className=\"translation-animation\">\n                  <div className=\"text-loading\">\n                    {renderMessageText(true)}\n                  </div>\n                </div>\n              )}\n              {metaPosition === 'in-text' && renderReactionsAndMeta()}\n            </div>\n\n          </>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    if(sender?.id === \"1\"){\n      return\n    }\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    let {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    withAvatar = true;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    let canShowSender = withSenderName || withAvatar || forceSenderName;\n\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      {/*<span>{lang('UnreadMessages')}</span>*/}\n      <span></span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,focusMessage\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    // if (areMessagesLoaded) {\n    //   memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    // }\n    memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      // newScrollTop = Math.min(\n      //   unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n      //   scrollHeight - scrollOffset,\n      // );\n      newScrollTop = scrollHeight - scrollOffset;\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  let withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  let noAvatars = Boolean(!withUsers || isChannelChat);\n  noAvatars = false\n  withUsers = true;\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n\n    if (!isShown) {\n      return;\n    }\n    if (messageListType !== 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport {resizeImage, scaleImage} from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let thumbBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n\n  }\n\n  return {\n    blobUrl,\n    thumbBlobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n  canSendVideos = false;\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n      true\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false),true);\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiDraft, GlobalState, MessageListType, TabState,} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatMember,\n  ApiFormattedText,\n  ApiMessage,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type {InlineBotSettings, ISettings} from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_MODAL_ID,\n  MAX_UPLOAD_FILEPART_SIZE,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport {IS_IOS, IS_VOICE_RECORDING_SUPPORTED} from '../../../util/environment';\nimport {MEMO_EMPTY_ARRAY} from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport {formatMediaDuration, formatVoiceRecordDuration} from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, {prepareAttachmentsToSend} from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport {insertHtmlInSelection} from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport {isSelectionInsideInput} from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport {getServerTime} from '../../../util/serverTime';\nimport {selectCurrentLimit} from '../../../global/selectors/limits';\nimport {buildCustomEmojiHtml} from './helpers/customEmoji';\nimport {processMessageInputForCustomEmoji} from '../../../util/customEmojiManager';\nimport {getTextWithEntitiesAsHtml} from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {useStateRef} from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, {DropAreaState} from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n  const [speechRecognizing, setSpeechRecognizing] = useState(false);\n\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    // if(speechRecognizing){\n    //   return MainButtonState.Send;\n    // }\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, speechRecognizing,editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n    // if(speechRecognizing){\n    //   recognition.stop();\n    //   setSpeechRecognizing(false);\n    //   return\n    // }\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          // recognition.start().then((res:string)=>{\n          //   setHtml(res);\n          // }).catch((e)=>{\n          //   console.error(e)\n          //   // setSpeechRecognizing(false);\n          // });\n          // setSpeechRecognizing(true);\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n  const [passwordOpen,setPasswordOpen] = useState(true);\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={false}\n              canSendGifs={false}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              (activeVoiceRecording )&& windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {(activeVoiceRecording ) && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {(activeVoiceRecording) && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={ ()=>{\n            // recognition.stop();\n            // setSpeechRecognizing(false)\n            stopRecordingVoice()\n          } }\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState,\"mainSendBtn\", !isReady && 'not-ready', ( activeVoiceRecording) && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport Account from \"../../worker/share/Account\";\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\nimport {SERVER_BOT_USER_ID_START, UserIdFirstBot} from \"../../worker/setting\";\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n               {canManage && !isInsideTopic && (\n                 <Button\n                   round\n                   color=\"translucent\"\n                   size=\"smaller\"\n                   ariaLabel={lang('Edit')}\n                   onClick={handleToggleManagement}\n                 >\n                   <i className=\"icon-edit\" />\n                 </Button>\n               )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    let canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    if(isBot){\n      const {userStoreData} = global\n      canManage = false\n      if(chatId && userStoreData && userStoreData.myBots && userStoreData.myBots.includes(chatId)){\n        canManage = true;\n      }\n      if(chatId && parseInt(chatId) == parseInt(SERVER_BOT_USER_ID_START)){\n        canManage = true;\n      }\n    }\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isUserId,\n  isChatGroup,\n} from '../../../../global/helpers';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<string, ApiChat>, usersById: Record<string, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isUserId(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isUserId(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport {\n  getMessageHtmlId,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\n\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (messageId: number, chatId: string) => void;\n};\n\nconst Media: FC<OwnProps> = ({\n  message,\n  idPrefix = 'shared-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const video = getMessageVideo(message);\n\n  const hasSpoiler = getMessageIsSpoiler(message);\n  const [isSpoilerShown, , hideSpoiler] = useFlag(hasSpoiler);\n\n  const handleClick = useCallback(() => {\n    hideSpoiler();\n    onClick!(message.id, message.chatId);\n  }, [hideSpoiler, message, onClick]);\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${getMessageHtmlId(message.id)}`}\n      className=\"Media scroll-item\"\n      onClick={onClick ? handleClick : undefined}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {hasSpoiler && (\n        <MediaSpoiler\n          thumbDataUri={mediaBlobUrl || thumbDataUri}\n          isVisible={isSpoilerShown}\n          className=\"media-spoiler\"\n        />\n      )}\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(Media);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiMessage, ApiWebPage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getFirstLinkInMessage, getMessageText,\n  getMessageWebPage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport trimText from '../../util/trimText';\nimport renderText from './helpers/renderText';\nimport { formatPastTimeShort } from '../../util/dateFormat';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport Media from './Media';\nimport Link from '../ui/Link';\nimport SafeLink from './SafeLink';\n\nimport './WebLink.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  senderTitle?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onMessageClick: (messageId: number, chatId: string) => void;\n};\n\ntype ApiWebPageWithFormatted =\n  ApiWebPage\n  & { formattedDescription?: TextPart[] };\n\nconst WebLink: FC<OwnProps> = ({\n  message, senderTitle, isProtected, observeIntersection, onMessageClick,\n}) => {\n  const lang = useLang();\n\n  let linkData: ApiWebPageWithFormatted | undefined = getMessageWebPage(message);\n\n  if (!linkData) {\n    const link = getFirstLinkInMessage(message);\n    if (link) {\n      const { url, domain } = link;\n\n      linkData = {\n        siteName: domain.replace(/^www./, ''),\n        url: url.includes('://') ? url : url.includes('@') ? `mailto:${url}` : `http://${url}`,\n        formattedDescription: getMessageText(message) !== url\n          ? renderMessageSummary(lang, message, undefined, undefined, MAX_TEXT_LENGTH)\n          : undefined,\n      } as ApiWebPageWithFormatted;\n    }\n  }\n\n  const handleMessageClick = useCallback(() => {\n    onMessageClick(message.id, message.chatId);\n  }, [onMessageClick, message.id, message.chatId]);\n\n  if (!linkData) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    formattedDescription,\n    photo,\n    video,\n  } = linkData;\n\n  const truncatedDescription = !senderTitle && description && trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebLink scroll-item',\n    (!photo && !video) && 'without-media',\n  );\n\n  const safeLinkContent = url.replace('mailto:', '') || displayUrl;\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {photo && (\n        <Media message={message} isProtected={isProtected} observeIntersection={observeIntersection} />\n      )}\n      <div className=\"content\">\n        <Link isRtl={lang.isRtl} className=\"site-title\" onClick={handleMessageClick}>\n          {renderText(title || siteName || displayUrl)}\n        </Link>\n        {(truncatedDescription || formattedDescription) && (\n          <Link isRtl={lang.isRtl} className=\"site-description\" onClick={handleMessageClick}>\n            {formattedDescription || (truncatedDescription && renderText(truncatedDescription))}\n          </Link>\n        )}\n        <SafeLink\n          url={url}\n          className=\"site-name\"\n          text={safeLinkContent}\n          isRtl={lang.isRtl}\n        />\n        {senderTitle && <div className=\"sender-name\">{renderText(senderTitle)}</div>}\n      </div>\n      {senderTitle && (\n        <div className=\"message-date\">\n          <Link\n            className=\"date\"\n            onClick={handleMessageClick}\n            isRtl={lang.isRtl}\n          >\n            {formatPastTimeShort(lang, message.date * 1000)}\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebLink);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport Modal from './Modal';\nimport PasswordMonkey from \"../common/PasswordMonkey\";\nimport PasswordForm from \"../common/PasswordForm\";\nimport {passwordCheck} from \"../../worker/share/utils/helpers\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nexport type PasswordHelperType = undefined | \"showMnemonic\" | \"messageEncryptPassword\"\n\nconst PasswordModal: FC<OwnProps> = ({}: OwnProps) => {\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [noBackdropClose, setNoBackdropClose] = useState<boolean>(false);\n\n  const [showHitInput, setShowHitInput] = useState<boolean>(false);\n  const [passwordHelper, setPasswordHelper] = useState<PasswordHelperType>(undefined);\n  const [validationError, setValidationError] = useState<string>('');\n  const [hint, setHint] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const lang = useLang();\n\n  const handleSubmit = useCallback((password) => {\n    if (!passwordCheck(password)) {\n      setValidationError(lang(\"PasswordTipsCheck\"))\n      return\n    }\n    if (onConfirm) {\n      onConfirm({password, hint});\n      setOpen(false)\n    }\n  }, [hint]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        setOpen(true);\n        // @ts-ignore\n        onConfirm = e.detail.callback;\n        // @ts-ignore\n        setNoBackdropClose(e.detail.noBackdropClose)\n        // @ts-ignore\n        setPasswordHelper(e.detail.passwordHelper)\n        // @ts-ignore\n        setHint(e.detail.hint)\n        // @ts-ignore\n        setShowHitInput(!e.detail.hideHitInput);\n      }\n    }\n    document.addEventListener('password', evt);\n    return () => {\n      document.removeEventListener('password', evt);\n    }\n  }, [setHint, setShowHitInput, open])\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  return (\n    <Modal\n      hasCloseButton={!noBackdropClose}\n      isOpen={open}\n      noBackdropClose={noBackdropClose}\n      onClose={() => {\n        if(noBackdropClose){\n          return false\n        }\n        if (onConfirm) {\n          onConfirm({password: \"\", hint: \"\"});\n        }\n        setOpen(false)\n      }}\n      title=\"Password\"\n      className=\"\"\n    >\n      <div className=\"settings-content password-form custom-scroll background\">\n        <div className=\"settings-content-header no-border\">\n          <PasswordMonkey isBig isPasswordVisible={shouldShowPassword}/>\n        </div>\n        <div className=\"pt-0 pb-0 mb-2 background\">\n          {\n            showHitInput &&\n            <InputText\n              id=\"pwd-hint\"\n              type={\"text\"}\n              label={lang(\"PasswordTipsLocalHint\")}\n              onChange={(e) => {\n                setHint(e.target.value)\n              }}\n              value={hint}\n              autoComplete=\"given-name\"\n            />\n          }\n          <PasswordForm\n            error={validationError}\n            hint={(!showHitInput && hint) ? hint : lang(\"PasswordTipsLocalPlaceholder\")}\n            shouldDisablePasswordManager={true}\n            submitLabel={lang('Next')}\n            clearError={handleClearError}\n            isLoading={false}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={true}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n        {\n          passwordHelper === \"messageEncryptPassword\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"PasswordTipsLocalStorage\")}</li>\n              <li>{lang(\"PasswordTipsLocalStorage1\")}</li>\n            </ul>\n          </div>\n        }\n        {\n          passwordHelper === \"showMnemonic\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"密码不会存储服务器,跟账户助记词直接相关，请牢记密码和妥善保管助记词\")}</li>\n            </ul>\n          </div>\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PasswordModal);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {useCallback, useEffect, useRef,} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useAsync from '../../hooks/useAsync';\n\nimport Loading from '../ui/Loading';\n\nimport blankUrl from '../../assets/blank.png';\nimport Button from \"../ui/Button\";\n\ntype OwnProps ={ content?:string,tips?:string};\n\nconst DATA_PREFIX = 'wai://';\nconst QR_SIZE = 280;\n\nlet qrCodeStylingPromise: Promise<typeof import('qr-code-styling')>;\n\nfunction ensureQrCodeStyling() {\n  if (!qrCodeStylingPromise) {\n    qrCodeStylingPromise = import('qr-code-styling');\n  }\n  return qrCodeStylingPromise;\n}\n\nconst QrCode: FC<OwnProps> = ({content,tips}) => {\n\n  // @ts-ignore\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  const [isQrMounted, markQrMounted, unmarkQrMounted] = useFlag();\n\n  const { result: qrCode } = useAsync(async () => {\n    const QrCodeStyling = (await ensureQrCodeStyling()).default;\n    return new QrCodeStyling({\n      width: QR_SIZE,\n      height: QR_SIZE,\n      // image: blankUrl,\n      margin: 10,\n      type: 'svg',\n      dotsOptions: {\n        type: 'rounded',\n      },\n      cornersSquareOptions: {\n        type: 'extra-rounded',\n      },\n      imageOptions: {\n        imageSize: 0.4,\n        margin: 8,\n      },\n      qrOptions: {\n        errorCorrectionLevel: 'M',\n      },\n    });\n  }, []);\n\n  const transitionClassNames = useMediaTransition(isQrMounted);\n\n  useEffect(() => {\n    if (!qrCode) {\n      return () => {\n        unmarkQrMounted();\n      };\n    }\n\n    const container = qrCodeRef.current!;\n    const data = `${DATA_PREFIX}${content}`;\n    qrCode.update({\n      data,\n    });\n\n    if (!isQrMounted) {\n      qrCode.append(container);\n      markQrMounted();\n    }\n    return undefined;\n  }, [content,isQrMounted, markQrMounted, unmarkQrMounted, qrCode]);\n  const onDownload = useCallback(()=>{\n    if(qrCode){\n      qrCode.download()\n    }\n  },[qrCode])\n  return (\n    <div id=\"auth-qr-form\" className=\"custom-scroll\">\n      <div className=\"qr-outer\">\n        <div\n          className={buildClassName('qr-inner', transitionClassNames)}\n          key=\"qr-inner\"\n        >\n          <div\n            key=\"qr-container\"\n            className=\"qr-container\"\n            ref={qrCodeRef}\n            style={`width: ${QR_SIZE}px; height: ${QR_SIZE}px`}\n          />\n        </div>\n        {!isQrMounted && <div className=\"qr-loading\"><Loading /></div>}\n      </div>\n      <div className={'pt-2'} style={\"text-align:center\"}><code>{tips}</code></div>\n      {\n        content &&\n        <div className={'pt-2'} style={\"text-align:center;word-break: break-word;\"}><code>{`${DATA_PREFIX}${content}`}</code></div>\n      }\n\n      <Button isText disabled={!isQrMounted} onClick={onDownload}>下载</Button>\n    </div>\n  );\n};\n\nexport default QrCode;\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport Modal from './Modal';\nimport {getActions, withGlobal} from \"../../global\";\nimport {getPasswordFromEvent} from \"../../worker/share/utils/password\";\nimport Account from \"../../worker/share/Account\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport {aesEncrypt} from \"../../util/passcode\";\nimport {hashSha256} from \"../../worker/share/utils/helpers\";\nimport {PbQrCode} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {QrCodeType} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport QrCode from \"../common/QrCode\";\n\ntype OwnProps = {};\ntype StateProps = {\n  showMnemonicModal?:boolean\n};\n\nconst MnemonicModal: FC<OwnProps & StateProps> = ({showMnemonicModal}) => {\n  const {updateGlobal,showNotification} = getActions();\n  const [mnemonic,setMnemonic] = useState(\"\");\n  const [mnemonicEncrypt,setMnemonicEncrypt] = useState(\"\");\n\n  const onCloseModal = useCallback(async ()=>{\n    setMnemonic(\"\")\n    setMnemonicEncrypt(\"\")\n    updateGlobal({showMnemonicModal:undefined})\n  },[])\n\n  useEffect(()=>{\n    const init = async ()=>{\n      const {password} = await getPasswordFromEvent(undefined,true,'showMnemonic')\n      if(!password){\n        updateGlobal({showMnemonicModal:undefined})\n        return\n      }\n      const account = Account.getCurrentAccount();\n      if(!account?.getSession()){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"没有登录\"})\n      }\n      const res = await account?.verifySession(account?.getSession(),password);\n      if(!res){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"密码不正确\"})\n      }\n      const entropy = await Account.getCurrentAccount()!.getEntropy();\n      const m = Mnemonic.fromEntropy(entropy);\n      const words = m.getWords();\n      const e = await aesEncrypt(words,Buffer.from(hashSha256(password),'hex'))\n      setMnemonicEncrypt(Buffer.from(new PbQrCode({\n        type:QrCodeType.QrCodeType_MNEMONIC,\n        data:Buffer.from(e)\n      }).pack().getPbData()).toString(\"hex\"))\n      setMnemonic(words);\n    }\n    if(showMnemonicModal){\n      init();\n    }\n\n  },[showMnemonicModal])\n\n  if(!mnemonic){\n    return null\n  }\n  return (\n    <Modal title={\"助记词\"} isOpen={!!showMnemonicModal} hasCloseButton={true} onClose={onCloseModal}>\n      <QrCode content={mnemonicEncrypt} tips={mnemonic} />\n    </Modal>\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      showMnemonicModal,\n    } = global;\n    return {\n      showMnemonicModal,\n    };\n  },\n)(MnemonicModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from \"../../global\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MsgCommandSetting from '../../worker/msg/MsgCommandSetting';\n\ntype OwnProps = {};\ntype StateProps = {\n  botIds:string[],\n  showPickBotModal?:boolean\n};\n\nconst PickBotModal: FC<OwnProps & StateProps> = ({showPickBotModal,botIds}) => {\n  const [search,setSearch] = useState(\"\");\n  const {updateGlobal} = getActions();\n\n  const handleSelect = useCallback((userId: string) => {\n    MsgCommandSetting.onSelectSyncBot(userId)\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  const handleClose = useCallback(() => {\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={!!showPickBotModal}\n      chatOrUserIds={botIds}\n      searchPlaceholder={\"请选择要同步的机器人\"}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={()=>{}}\n      onSelectChatOrUser={handleSelect}\n      onClose={handleClose}\n    />\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      userStoreData,\n      showPickBotModal,\n      users:{\n        byId:users\n      }\n    } = global;\n    let botIds = Object.keys(users).filter(id=>id !== \"1\");\n    if(userStoreData && userStoreData.chatIdsDeleted){\n      botIds = botIds.filter(id=>!userStoreData.chatIdsDeleted.includes(id))\n    }\n\n    return {\n      botIds,\n      showPickBotModal,\n    };\n  },\n)(PickBotModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport Modal from './Modal';\nimport {ShowModalFromEventPayload} from \"../../worker/share/utils/modal\";\nimport Button from \"./Button\";\nimport TextArea from \"./TextArea\";\nimport {ChangeEvent} from \"react\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nconst GlobalModal: FC<OwnProps> = ({}: OwnProps) => {\n  const [payload, setPayload] = useState<ShowModalFromEventPayload|undefined>(undefined);\n  const [open, setOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(\"\");\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    let {value} = e.target\n    setValue(value);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (onConfirm) {\n      if(payload?.inputType === 'number'){\n        onConfirm({value});\n      }else{\n        onConfirm({value:value.trim()});\n      }\n      setOpen(false)\n      setValue(\"\")\n    }\n  }, [value]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        //@ts-ignore\n        const payload = e.detail.payload;\n        setPayload({\n          type:\"singleInput\",\n          title:\"请输入\",\n          ...payload,\n        })\n        //@ts-ignore\n        onConfirm = e.detail.callback;\n        setOpen(true);\n        setValue(payload.initVal|| \"\")\n      }\n    }\n    document.addEventListener('modal', evt);\n    return () => {\n      document.removeEventListener('modal', evt);\n    }\n  }, [open])\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        // if (onConfirm) {\n        //   onConfirm({value: \"\"});\n        // }\n        setValue(\"\")\n        setOpen(false)\n      }}\n      title={payload && payload.title}\n      className=\"\"\n    >\n      {\n        payload && (payload.type === 'multipleInput' || payload.type === 'singleInput' )&&\n        <div className=\"settings-content password-form custom-scroll background\">\n          <div className=\"pt-4 pb-4 mb-2 background\">\n            {\n              payload.type !== 'multipleInput' ?\n                <InputText\n                  type={payload.inputType || \"text\"}\n                  label={payload.placeholder||\"\"}\n                  step={payload.step}\n                  min={payload.min}\n                  max={payload.max}\n                  onChange={handleChange}\n                  value={value}\n                  autoComplete=\"given-name\"\n                />:\n                <TextArea\n                  value={value}\n                  onChange={handleChange}\n                  label={payload.placeholder||\"\"}\n                  disabled={false}\n                />\n            }\n          </div>\n          <Button type=\"button\" onClick={handleSubmit} ripple={true} isLoading={false} disabled={false}>\n            下一步\n          </Button>\n        </div>\n      }\n\n    </Modal>\n  );\n};\n\nexport default memo(GlobalModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\nimport PasswordModal from \"../ui/PasswordModal\";\nimport Modal from \"../ui/Modal\";\nimport QrCode from \"../common/QrCode\";\nimport {UserIdFirstBot} from \"../../worker/setting\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MnemonicModal from \"../ui/MnemonicModal\";\nimport PickBotModal from \"../ui/PickBotModal\";\nimport GlobalModal from \"../ui/GlobalModal\";\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n      <PasswordModal/>\n      <GlobalModal/>\n      <MnemonicModal />\n      <PickBotModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../global';\n\nimport type {GlobalState} from '../../global/types';\n\nimport {LOCAL_TGS_URLS} from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport {decryptSession} from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return <div className={styles.help}></div>\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","utterance","SpeechSynthesisUtterance","selectedText","getSelection","toString","document","selection","createRange","selectChatMessage","content","speechSynthesis","speak","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","saveDraft","draft","entities","shouldForce","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","length","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","toggleMessageSelectAll","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","async","msgId","messages1","i","time","currentTs","MsgCommandSetting","uploadMsgList","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","previousGlobal","parse","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","LoadMoreDirection","isBudgetPreload","isRestricted","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","offsetId","isOutlying","historyIds","newViewportIds","areSomeLocal","areAllLocal","getViewportSlice","safeReplaceViewportIds","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","MESSAGE_LIST_SLICE","replyOriginForId","threadUpdate","callApi","MESSAGE_DELETED","updateChatMessage","addUsers","buildCollectionByKey","users","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","attachments","a","shouldSendAsSpoiler","password","hint","getPasswordFromEvent","attachment","blobUrl","mimeType","buf","blobToBuffer","fetchBlob","cipher","Account","encryptData","bb","popByteBuffer","hintLen","typeLen","writeInt16","writeBytes","Buffer","from","res","toUint8Array","blob","Blob","encryptUrl","URL","createObjectURL","size","quality","thumbBlobUrl","resizeImage","entity","substr","replaceSubstring","repeat","log","scheduledAt","replyingToMessage","replyingToTopId","selectThreadTopMessageId","replyToTopMessageId","params","replyingTo","noWebPage","selectNoWebPage","sendAs","selectUser","clearWebPagePreview","isSingle","isGrouped","shouldGroupMessages","restParams","sendMessage","commonParams","byType","index","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","MsgDispatcher","setEditingId","progressCallback","get","getMessageOriginalId","cancelApiProgress","user","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","byId","editingId","selectEditingId","selectEditingScheduledId","UserIdFirstBot","activeChat","deleteChat","chatFolders","userStoreData","folder","includedChatIds","chatIdsDeleted","listIds","active","currentTs1000","chatIds","messagesDeleted","callApiWithPdu","SyncReq","pack","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","to","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","b","selectSendAs","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadViewportMessagesCache","addOffset","flag","threadsById","lastViewportIds","updateListedIds","isUp","listedIds1","ids1","isLocalMessageId","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","addChatMessagesById","updateOutlyingIds","addChats","updateThreadInfos","areSortedArraysIntersecting","sourceIds","findClosestIndex","indexForDirection","progress","localMessage","messageLocalId","has","set","fileUploads","byMessageLocalId","IS_IOS","rafPromise","botInfo","fullInfo","process","delete","shouldSendAsFile","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","seenByUserIds","sendAsId","sendAsChat","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","parseInt","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","totalCount","nextOffsetId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","topCats","TopCatsReq","chatListIdsActive","messagesList","userIds","userIdList","firstName","toLowerCase","lastName","bio","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","imgToBlob","thumbnailUrl","thumbnail","blobToDataUri","updateUsers","getUserFirstOrLastName","releaseStatusTimeout","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","lastSyncTime","initFolderManager","addCallback","connectionState","authState","msgClientState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","loadProfilePhotos","profileId","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","localUsers","globalUsers","phoneNumber","phone","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openUrl","MsgCommand","answerCallbackButton","openSystemFilesDialog","Array","target","requestUploadImage","openPollModal","receiptMessageId","getReceipt","openInvoice","isGame","openGame","alert","isError","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","currentChatId","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","currentPassword","onSuccess","isSuccess","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","handleChatFoldersEdit","changed","CLOUD_MESSAGE_API","prevIsForum","lastReadOutboxMessageId","listActiveIds","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","loadTopicById","loadTopics","parseCodeBlock","reg","codeBlock","j","exec","ApiMessageEntityTypes","endsWith","substring","parseMentionName","regex","parseCmd","commands","RegExp","matches","parseEntities","ANIMATION_DELAY","handleMessageEntities","msgSend","handleMessageTextCode","cmd","handleBotCmdText","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","RemoveMessagesReq","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","messageNew","thread","currentThreadId","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","user1","aiBot","chatGptConfig","welcome","template","templateSubmit","init_system_content","statusById","handleUpdateBots","userStoreDataRes","updateUserStoreData","chatGptAskHistory","msgIdAssistant","msgIdUser","userBotUpdate","api_key","localStorage","setItem","updateGlobal","lastScrollOffset","listIds_active","forceOnHeavyAnimation","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","currentAccountAddress","chatsById","isConnectionStatusMinimized","topSearchPlaceHolder","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","onSelectProfile","onSelectFolder","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","fetchTopCats","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleClearCache","cacheApi","clear","LANG_CACHE_NAME","ASSET_CACHE_NAME","reload","handleSignOutClick","history","replaceState","forceInitApi","handleLoginClick","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","CLOUD_MESSAGE_ENABLE","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","createChat","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectProfile","handleSelectFolder","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","LeftColumnContentStr","sessionStorage","getItem","leftColumnContent","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","DEFAULT_HANDLERS","play","seekbackward","seekforward","previoustrack","nexttrack","stop","seekTo","updateMetadata","metadata","mediaSession","setMediaSessionHandlers","handlers","handler","setActionHandler","setPlaybackState","playbackState","setPositionState","duration","useAudioPlayer","trackId","originalDuration","trackType","onInit","shouldPlay","onForcePlay","onTrackChange","noPlaylist","noProgressUpdates","controllerRef","isPlaying","setIsPlaying","isPlayingSync","playProgress","setPlayProgress","handleTrackChange","register","eventName","setVolume","setPlaybackRate","toggleMuted","proxy","warn","registerMediaSession","mediaHandlers","setCurrentTime","requestNextTrack","requestPreviousTrack","isLast","closeAudioPlayer","event","skipTime","seekOffset","currentTime","seekTime","makeMediaHandlers","isFinite","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","paused","destroy","isSafariPatchInProgress","prevShouldPlay","prevSrc","playIfPresent","playPause","setTime","audioProxy","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","ratio","scaleImage","makeGoodArtwork","artwork","MediaMetadata","buildMediaMetadata","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioChatId","audioMessageId","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","isOwn","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","createElement","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","contains","handleTap","stopEvent","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","Document","observeIntersection","smaller","canAutoLoad","autoLoadFileMaxSizeMb","uploadProgress","withDate","isSelectable","onCancelUpload","onMediaClick","onDateClick","isDownloading","dispatch","extension","getDocumentExtension","wasIntersected","markIntersected","isLoadAllowed","setIsLoadAllowed","shouldDownload","documentHash","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaFormat","isLoaded","isUploading","isTransferring","transferProgress","getMediaTransferState","hasPreview","getDocumentHasPreview","getMessageMediaThumbDataUri","localBlobUrl","previewData","cancelMessageMediaDownload","handleDateClick","thumbnailDataUri","actionIcon","isMessageDocumentVideo","TINY_SCREEN_WIDTH_MQL","matchMedia","WITH_AVATAR_TINY_SCREEN_WIDTH_MQL","renderSeekline","bufferedRanges","seekerRef","start","end","Audio","isTranscribing","isTranscriptionHidden","isTranscribed","canTranscribe","onHideTranscription","onPlay","onReadMedia","transcribeAudio","isMediaUnread","isSeeking","isActivated","setIsActivated","shouldLoad","coverHash","coverBlobUrl","handleForcePlay","isBuffered","bufferingHandlers","checkBuffering","useBuffering","isOwnMessage","waveformCanvasRef","withAvatar","canvasRef","spikes","peak","waveform","fill","MIN_SPIKES","MAX_SPIKES","getSeeklineSpikeAmounts","durationFactor","spikesCount","fitCount","newData","springFactor","leftFiller","rightFiller","_data","_data$idx","_data2","idx","val","interpolateArray","encoded5bit","bitsCount","valuesCount","bitsData","byteIndex","bitShift","lastByteIndex","lastBitShift","lastValue","decodeWaveform","Uint8Array","canvas","fillStyle","progressFillStyle","ctx","getContext","scale","globalAlpha","spikeHeight","SPIKE_WIDTH","beginPath","moveTo","arcTo","closePath","roundedRectangle","renderWaveform","useWaveformCanvas","withSeekline","isLoadingForPlaying","shouldRenderSpinner","spinnerClassNames","shouldRenderCross","handleButtonClick","setAudioPlayerOrigin","handleDownloadClick","handleSeek","MouseEvent","targetTouches","handleStartSeek","handleStopSeek","handleTranscribe","onCapture","onDrag","transcribeSvgMemo","dangerouslySetInnerHTML","__html","renderFirstLine","fullClassName","AudioOrigin","buttonClassNames","contentClassName","renderWithTitle","Link","formatPastTimeShort","formatMediaDuration","renderSecondLine","backgroundImage","ProgressSpinner","transparent","noCross","showProgress","showSeekline","getFileSizeString","formatMediaDateTime","svgMemo","onClickTranscribe","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","Video","canAutoPlay","videoRef","getMessageVideo","getMessageWebPageVideo","isSpoilerShown","hideSpoiler","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","fullMediaData","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","useMediaTransition","noThumb","thumbRef","useBlurredMediaThumbRef","thumbClassNames","isInline","wasLoadDisabled","playButtonClassNames","handleTimeUpdate","isWebPageVideo","calculateVideoDimensions","isAllowed","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","withAnimation","isGif","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Invoice","shouldAffectAppendix","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","stopCurrentAudio","InlineButtons","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleEditClick","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","getMinMediaWidth","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","TEXT_AI_THINKING","DotAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","areMessagesLoaded","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","quick","img","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","analyzerCallback","startMediaRecorder","pausedAt","chunks","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","editingDraft","selectEditingScheduledDraft","selectEditingDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","speechRecognizing","setSpeechRecognizing","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","passwordOpen","setPasswordOpen","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","loadChatSettings","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","myBots","SERVER_BOT_USER_ID_START","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","getSenderName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","Media","idPrefix","hasSpoiler","decoding","WebLink","onMessageClick","linkData","getFirstLinkInMessage","formattedDescription","renderMessageSummary","safeLinkContent","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","ListItem","contextActions","memberId","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","ellipse","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","PasswordModal","setOpen","noBackdropClose","setNoBackdropClose","showHitInput","setShowHitInput","passwordHelper","setPasswordHelper","validationError","setValidationError","setHint","shouldShowPassword","setShouldShowPassword","handleSubmit","passwordCheck","evt","detail","hideHitInput","handleClearError","PasswordMonkey","isPasswordVisible","InputText","PasswordForm","shouldDisablePasswordManager","submitLabel","clearError","shouldResetValue","onChangePasswordVisibility","onSubmit","DATA_PREFIX","qrCodeStylingPromise","QrCode","tips","qrCodeRef","isQrMounted","markQrMounted","unmarkQrMounted","qrCode","QrCodeStyling","dotsOptions","cornersSquareOptions","imageOptions","imageSize","qrOptions","errorCorrectionLevel","append","onDownload","showMnemonicModal","MnemonicModal","mnemonic","setMnemonic","mnemonicEncrypt","setMnemonicEncrypt","onCloseModal","account","getSession","verifySession","entropy","getEntropy","words","Mnemonic","getWords","aesEncrypt","hashSha256","PbQrCode","QrCodeType","getPbData","showPickBotModal","botIds","PickBotModal","search","setSearch","handleSelect","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","onSearchChange","onSelectChatOrUser","GlobalModal","setPayload","inputType","initVal","TextArea","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","shouldShowSubmit","noRipple","IS_MULTITAB_SUPPORTED","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","joinAudio","connectingAudio","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","allowTalk","leave","connecting","incoming","busy","ringing","fetchGroupCall","existingGroupCall","fetchGroupCallParticipants","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","inviteHash","fetchChatByUsername","full","requestMasterAndCallAction","toggleGroupCallPanel","AudioContext","webkitAudioContext","srcObject","silence","createAudioElement","selectChatGroupCall","rejoin","participantId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","mediaDevices","getUserMedia","getVideoTracks","checkMicrophonePermission"],"sourceRoot":""}