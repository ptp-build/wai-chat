{"version":3,"file":"6059.b13d0ef487fa68ba66ac.js","mappings":"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","sources":["webpack://wai/./src/api/gramjs/localDb.ts","webpack://wai/./src/api/gramjs/apiBuilders/helpers.ts","webpack://wai/./src/lib/gramjs/client/uploadFile.ts","webpack://wai/./src/global/actions/api/chats.ts","webpack://wai/./src/global/actions/ui/calls.ts","webpack://wai/./src/global/reducers/calls.ts","webpack://wai/./src/lib/gramjs/Helpers.js","webpack://wai/./src/lib/gramjs/errors/index.js","webpack://wai/./src/lib/gramjs/tl/api.js","webpack://wai/./src/util/Deferred.ts"],"sourcesContent":["import BigInt from 'big-integer';\nimport type { Api as GramJs } from '../../lib/gramjs';\nimport type { ApiMessage } from '../types';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { constructors } from '../../lib/gramjs/tl';\nimport { throttle } from '../../util/schedulers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport interface LocalDb {\n  localMessages: Record<string, ApiMessage>;\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  cache: Record<string,any>;\n  botWaitReply: Record<string, undefined | {\n    command:string,\n    payload?:Record<string,any>\n  }>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments','cache','botWaitReply',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const valueVirtualClass = Object.keys(value).reduce((acc2, key2) => {\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, valueVirtualClass)\n        : valueVirtualClass;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","// eslint-disable-next-line import/no-named-default\nimport {default as Api} from '../tl/api';\n\nimport type TelegramClient from './TelegramClient';\nimport {generateRandomBytes, readBigIntFromBuffer, sleep} from '../Helpers';\nimport {getUploadPartSize} from '../Utils';\nimport errors from '../errors';\nimport {Foreman} from '../../../util/foreman';\nimport {DownloadRes, UploadReq} from \"../../ptp/protobuf/PTPFile\";\nimport {CLOUD_MESSAGE_API, DEBUG, MEDIA_CACHE_NAME_WAI} from \"../../../config\";\nimport localDb from \"../../../api/gramjs/localDb\";\nimport Account from \"../../../worker/share/Account\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {fileToBuffer} from \"../../../worker/share/utils/utils\";\nimport {ERR, FileInfo_Type} from \"../../ptp/protobuf/PTPCommon/types\";\n\ninterface OnProgress {\n    isCanceled?: boolean;\n\n    // Float between 0 and 1.\n    (progress: number): void;\n}\n\nexport interface UploadFileParams {\n    file: File;\n    workers?: number;\n    onProgress?: OnProgress;\n}\n\nconst KB_TO_BYTES = 1024;\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nexport const getFileId = ()=>{\n    let fileId1 = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    return fileId1.toString()\n        .replace(\"-\", \"\")\n        .replace(\"n\", \"\")\n}\n\nexport async function uploadFileV1(\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n    const { name, size } = file;\n    let fileIdStr = getFileId();\n    const fileId = Number(fileIdStr)\n    fileIdStr = String(fileId)\n    localDb.cache[fileIdStr] = file;\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n    const buf = await fileToBuffer(file)\n    const cipher = Account.localEncrypt(Buffer.from(buf));\n    const body = new DownloadRes({\n        file:{\n            id:fileIdStr,\n            part:0,\n            part_total:1,\n            buf:cipher,\n            size,\n            type:file.type\n        },\n        err:ERR.NO_ERROR\n    }).pack().getPbData()\n\n    const blob = new Blob([Buffer.from(body)]);\n    await cacheApi.save(MEDIA_CACHE_NAME_WAI, fileIdStr, blob);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n\n\nexport async function uploadFileCache(\n    file: FileInfo_Type,\n) {\n    const { buf, id } = file;\n    const size = buf.length\n    const fileIdStr = id;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % MAX_CONCURRENT_CONNECTIONS_PREMIUM;\n        await foremans[senderIndex].requestWorker();\n        const blobSlice = buf.subarray(i * partSize, (i + 1) * partSize);\n        promises.push((async (jMemo: number, blobSliceMemo: Buffer) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    if(CLOUD_MESSAGE_API && Account.getCurrentAccount()?.getSession()){\n                        if(DEBUG){\n                            console.log(\"uploadProfilePhoto\",fileIdStr,jMemo,partCount)\n                        }\n                        const fileInfo = {\n                            id:fileIdStr,\n                            size:file.size,\n                            type:file.type,\n                            part:jMemo+1,\n                            part_total:partCount,\n                            buf:blobSliceMemo\n                        }\n                        const uploadReq = new UploadReq({file:fileInfo})\n                        const body = Buffer.from(uploadReq.pack().getPbData());\n                        await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n                            method: 'POST',\n                            body,\n                            headers:{\n                                Authorization: `Bearer ${Account.getCurrentAccount()?.getSession()}`,\n                            }\n                        })\n                    }\n                } catch (err) {\n                    foremans[senderIndex].releaseWorker();\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n    await Promise.all(promises);\n}\n\n\nexport async function uploadFile(\n    client: TelegramClient,\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n\n    const isPremium = Boolean(client.isPremium);\n\n    const { name, size } = file;\n    const fileId = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    // Pick the least busy foreman\n    // For some reason, fresh connections give out a higher speed for the first couple of seconds\n    // I have no idea why, but this may speed up the download of small files\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % (\n            isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS\n        );\n\n        await foremans[senderIndex].requestWorker();\n\n        if (onProgress?.isCanceled) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n\n        const blobSlice = file.slice(i * partSize, (i + 1) * partSize);\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (jMemo: number, blobSliceMemo: Blob) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    // We always upload from the DC we are in\n                    sender = await client.getSender(client.session.dcId, senderIndex, isPremium);\n                    const partBytes = await blobSliceMemo.arrayBuffer();\n                    await sender.send(\n                        isLarge\n                            ? new Api.upload.SaveBigFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                fileTotalParts: partCount,\n                                bytes: Buffer.from(partBytes),\n                            })\n                            : new Api.upload.SaveFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                bytes: Buffer.from(partBytes),\n                            }),\n                    );\n                } catch (err) {\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof errors.FloodWaitError) {\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                    foremans[senderIndex].releaseWorker();\n\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n\n                if (onProgress) {\n                    if (onProgress.isCanceled) {\n                        throw new Error('USER_CANCELED');\n                    }\n\n                    progress += (1 / partCount);\n                    onProgress(progress);\n                }\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n\n    await Promise.all(promises);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatFolder, ApiChatMember, ApiError, ApiUser, ApiUserStatus,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabArgs,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  DEBUG,\n  MEDIA_CACHE_NAME_WAI,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {formatShareText, parseChooseParameter, processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {\n  ChatModelConfig,\n  DEFAULT_AVATARS,\n  DEFAULT_BOT_COMMANDS,\n  DEFAULT_CHATGPT_AI_COMMANDS,\n  DEFAULT_CREATE_USER_BIO,\n  DEFAULT_PROMPT,\n  LoadAllChats,\n  UserIdChatGpt,\n  UserIdChatGpt4,\n  UserIdFirstBot\n} from \"../../../worker/setting\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {blobToDataUri, fetchBlob} from \"../../../util/files\";\nimport {DownloadRes} from \"../../../lib/ptp/protobuf/PTPFile\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {getFileId} from \"../../../lib/gramjs/client/uploadFile\";\nimport ChatMsg from \"../../../worker/msg/ChatMsg\";\n\nimport {resizeImage} from '../../../util/imageResize';\n\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    //todo\n    // actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({ id, threadId: result.topMessageId, tabId });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  if(listType === \"archived\"){\n    return;\n  }\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n      return;\n    }\n\n    global = getGlobal();\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\n\nconst getAvatarPhoto = async (id:string,url:string)=>{\n  const res = await fetch(url)\n  const ab = await res.arrayBuffer()\n  const type = \"image/\"+url.split(\".\")[url.split(\".\").length - 1]\n  const body = new DownloadRes({\n    file:{\n      id,\n      part:0,\n      part_total:1,\n      buf:Buffer.from(ab),\n      size:Buffer.from(ab).length,\n      type\n    },\n    err:ERR.NO_ERROR\n  }).pack().getPbData()\n  const blob = new Blob([Buffer.from(body)],{type});\n  const blob1= new Blob([Buffer.from(ab)],{type});\n\n  const quality = 0.1;\n  const thumbUrl = await resizeImage(blob1, 40,40, 'image/jpeg',quality);\n  const thumbBlob = await fetchBlob(thumbUrl)\n  const dataUri = await blobToDataUri(thumbBlob);\n  const size = {\n    \"width\": 640,\n    \"height\":  640,\n  }\n  await cacheApi.save(MEDIA_CACHE_NAME_WAI, id, blob);\n\n  return {\n    id:id,\n    thumbnail:{\n      dataUri,\n      ...size\n    },\n    \"sizes\": [\n      {\n        width: 160,\n        height: 160,\n        type: 's',\n      },\n      {\n        width: 320,\n        height: 320,\n        type: 'm',\n      },\n      {\n        width: 640,\n        height: 640,\n        type: 'x',\n      },\n    ],\n  }\n}\naddActionHandler('createChat', async (global, actions, payload)=> {\n  const {\n    title, id,promptInit,about, tabId = getCurrentTabId(),\n  } = payload;\n\n  let userIds = Object.keys(global.users.byId)\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try{\n    let userId: string;\n    let userIdInt = parseInt(UserIdFirstBot)\n    if(!id){\n      if(userIds.length > 0){\n        userIds = [...userIds,...global.chatIdsDeleted]\n        userIds.sort((a,b)=>parseInt(b) - parseInt(a))\n        userIdInt = parseInt(userIds[0]) + 1\n      }\n      if(userIdInt < 100000){\n        userIdInt = 100000\n      }\n      userId = userIdInt.toString()\n    }else{\n      userId = id\n    }\n\n    const chatGptApiKey = localStorage.getItem(\"cg-key\") ? localStorage.getItem(\"cg-key\") : \"\"\n    const init_system_content = promptInit || DEFAULT_PROMPT\n    let avatarHash = \"\";\n    let photos = []\n    if(DEFAULT_AVATARS[userId]){\n      avatarHash = getFileId();\n      const avatarUrl = DEFAULT_AVATARS[userId]\n      const photo = await getAvatarPhoto(avatarHash,avatarUrl);\n      photos.push(photo)\n    }\n    const user = {\n      \"canBeInvitedToGroup\": false,\n      \"hasVideoAvatar\": false,\n      \"type\": \"userTypeBot\",\n      id:userId,\n      \"phoneNumber\": \"\",\n      isMin:false,\n      \"noStatus\": true,\n      isSelf:false,\n      avatarHash,\n      accessHash:\"\",\n      isPremium: false,\n      firstName: title,\n      photos,\n      usernames: [\n        {\n          \"username\": \"Bot_\"+userId,\n          \"isActive\": true,\n          \"isEditable\": true\n        }\n      ],\n      fullInfo: {\n        \"isBlocked\": false,\n        \"noVoiceMessages\": false,\n        bio: about || DEFAULT_CREATE_USER_BIO,\n        botInfo: {\n          aiBot:{\n            enableAi:true,\n            chatGptConfig:{\n              init_system_content,\n              api_key:\"\",\n              max_history_length:10,\n              modelConfig:{\n                ...ChatModelConfig,\n                ...(userId === UserIdChatGpt4 ? {model:\"gpt-4\"} : {})\n              }\n            }\n          },\n          botId: userId,\n          \"description\": about || DEFAULT_CREATE_USER_BIO,\n          \"menuButton\": {\n            \"type\": \"commands\"\n          },\n          commands:[...DEFAULT_BOT_COMMANDS,...DEFAULT_CHATGPT_AI_COMMANDS].map(cmd=>{\n            // @ts-ignore\n            cmd.botId = userId;\n            return cmd\n          })\n        }\n      }\n    }\n    global = getGlobal()\n    const {chatFolders} = global;\n    // @ts-ignore\n    const users:ApiUser[] = [user]\n\n    // @ts-ignore\n    const chats:ApiChat[] = [ChatMsg.buildDefaultChat(user)]\n\n    let activeChatFolder = window.sessionStorage.getItem(\"activeChatFolder\")\n    let activeChatFolderRow;\n    const chatFolderById:Record<string, ApiChatFolder> = {};\n    if(activeChatFolder){\n      Object.values(chatFolders.byId).forEach((row:ApiChatFolder)=>{\n        if(chatFolders.orderedIds![parseInt(activeChatFolder!)]){\n          const activeFolderId = chatFolders.orderedIds![parseInt(activeChatFolder!)]\n          if(row.id === activeFolderId){\n\n            if(!row.includedChatIds){\n              row.includedChatIds = []\n            }\n            row.includedChatIds.push(userId)\n            chatFolderById[row.id] = row;\n            activeChatFolderRow = row;\n          }\n        }\n      })\n    }\n\n    const userStatusesById:Record<string,ApiUserStatus> = {\n      [user.id] : {\n        \"type\": \"userStatusEmpty\"\n      }\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n    global = updateChatListIds(global, \"active\", chats.map(chat=>chat.id));\n    global = addUserStatuses(global, userStatusesById);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Complete,\n      },\n    }, tabId);\n\n    setGlobal({\n      ...global,\n      chatFolders:{\n        ...global.chatFolders,\n        byId:{\n          ...global.chatFolders.byId,\n          ...chatFolderById\n        }\n\n      }\n    })\n\n    if(activeChatFolderRow){\n      actions.editChatFolder({ id: activeChatFolderRow.id, folderUpdate: activeChatFolderRow });\n    }\n    if(promptInit || (id === UserIdChatGpt || id === UserIdChatGpt4)){\n      actions.sendBotCommand({chatId:userId,command:\"/initPrompt\",tabId})\n    }\n    // @ts-ignore\n    actions.openChat({id: userId,shouldReplaceHistory: true,});\n\n\n  }catch (e){\n    console.error(e)\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Error,\n        error: '创建失败',\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n})\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n  // @ts-ignore\n  actions.setActiveChatFolder({activeChatFolder:0},getCurrentTabId())\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n  window.sessionStorage.setItem(\"activeChatFolder\",activeChatFolder.toString())\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\n\nconst initChats = (firstLoad?:boolean)=>{\n\n  setTimeout(async ()=>{\n    if(firstLoad){\n      getActions().sendBotCommand({chatId:UserIdFirstBot,command:\"/start\"})\n    }\n    const global = getGlobal();\n    if(!global.users.byId[UserIdChatGpt]){\n      await MsgCommandChatLab.createChatGpt(UserIdChatGpt)\n    }\n    if(!global.users.byId[UserIdChatGpt4]){\n      await MsgCommandChatLab.createChatGpt(UserIdChatGpt4,\"ChatGpt4\")\n    }\n  },500)\n}\n\nexport async function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  let firstLoad = false;\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  try {\n    let result: { folderIds?: number[],chatFolders?: any[]; users?: any; userStatusesById?: any; chats?: any; chatIds?: any; draftsById?: any; replyingToById?: any; orderedPinnedIds?: string[] | never[] | undefined; totalChatCount?: number; };\n    if(!global.users.byId[UserIdFirstBot]) {\n      firstLoad = true;\n\n      result = LoadAllChats;\n      for (let i = 0; i < result.users.length; i++) {\n        const user = result.users[i];\n        if(user.id === UserIdFirstBot){\n          if(!user.avatarHash){\n            user.avatarHash = getFileId();\n            const photo = await getAvatarPhoto(user.avatarHash,DEFAULT_AVATARS[user.id])\n            user.photos = [photo]\n            result.users[i] = user\n          }\n        }\n      }\n      for (let i = 0; i < result.chats.length; i++) {\n        const chat = result.chats[i];\n        if (global.messages.byChatId[chat.id]) {\n          const {threadsById, byId} = global.messages.byChatId[chat.id]\n          if (threadsById[-1] && threadsById[-1].lastViewportIds && threadsById[-1].lastViewportIds!.length > 0) {\n            // @ts-ignore\n            result.chats[i].lastMessage = byId[threadsById[-1].lastViewportIds[threadsById[-1].lastViewportIds.length - 1]]\n          }\n        }\n      }\n    }else {\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          isFullyLoaded: {\n            ...global.chats.isFullyLoaded,\n            [listType]: true,\n          },\n        },\n      };\n      setGlobal(global);\n      initChats()\n      return\n    }\n    // result = await callApi('fetchChats', {\n    //   limit: CHAT_LIST_LOAD_SLICE,\n    //   offsetDate,\n    //   archived: listType === 'archived',\n    //   withPinned: shouldReplace,\n    //   lastLocalServiceMessage,\n    // });\n    const userStatusesById = {};\n    result.users.forEach((user: ApiUser)=>{\n\n      // @ts-ignore\n      userStatusesById[user.id] = {\n        \"type\": \"userStatusEmpty\"\n      }\n    })\n    result.userStatusesById = userStatusesById;\n\n    global = getGlobal();\n    result.chatIds = result.chats.map((chat: { id: any; }) => chat.id);\n    const { chatIds } = result;\n    if (chatIds.length > 0 && chatIds[0] === offsetId) {\n      chatIds.shift();\n    }\n    result.totalChatCount = result.chats.length;\n    lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n    const chatFoldersById:any = {};\n    result.chatFolders?.forEach(row=>{\n      chatFoldersById[row.id] = row\n    })\n    const orderedIds = result.chatFolders && result.chatFolders.length > 0 ? result.folderIds: [0];\n\n    global = {\n      ...global,\n      chatFolders:{\n        byId:{\n          ...chatFoldersById\n        },\n        orderedIds\n      }\n    }\n    if (shouldReplace && listType === 'active') {\n      // Always include service notifications chat\n      // if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      //   const result2 = await callApi('fetchChat', {\n      //     type: 'user',\n      //     user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      //   });\n      //\n      //   global = getGlobal();\n      //\n      //   const notificationsChat = result2 && selectChat(global, result2.chatId);\n      //   if (notificationsChat) {\n      //     chatIds.unshift(notificationsChat.id);\n      //     result.chats.unshift(notificationsChat);\n      //     if (lastLocalServiceMessage) {\n      //       notificationsChat.lastMessage = lastLocalServiceMessage;\n      //     }\n      //   }\n      // }\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = updateChatListIds(global, listType, chatIds);\n    } else if (shouldReplace && listType === 'archived') {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      const newChats = buildCollectionByKey(result.chats, 'id');\n      if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n        if (notificationsChat && lastLocalServiceMessage) {\n          newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n            ...notificationsChat,\n            lastMessage: lastLocalServiceMessage,\n          };\n        }\n      }\n\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, newChats);\n      global = updateChatListIds(global, listType, chatIds);\n\n    }\n\n    global = updateChatListSecondaryInfo(global, listType, result);\n\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n\n    const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n    idsToUpdateReplyingToId.forEach((chatId) => {\n      const replyingToById = result.replyingToById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!replyingToById && !thread) return;\n\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n      );\n    });\n\n    // if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    //   global = {\n    //     ...global,\n    //     chats: {\n    //       ...global.chats,\n    //       isFullyLoaded: {\n    //         ...global.chats.isFullyLoaded,\n    //         [listType]: true,\n    //       },\n    //     },\n    //   };\n    // }\n\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n\n    setGlobal(global);\n    initChats(firstLoad)\n  }catch (e){\n    console.error(e)\n  }\n\n  // const result = await callApi('fetchChats', {\n  //   limit: CHAT_LIST_LOAD_SLICE,\n  //   offsetDate,\n  //   archived: listType === 'archived',\n  //   withPinned: shouldReplace,\n  //   lastLocalServiceMessage,\n  // });\n  //\n\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","const BigInt = require('big-integer');\nconst crypto = require('./crypto/crypto');\n\n/**\n * converts a buffer to big int\n * @param buffer\n * @param little\n * @param signed\n * @returns {bigInt.BigInteger}\n */\nfunction readBigIntFromBuffer(buffer, little = true, signed = false) {\n    let randBuffer = Buffer.from(buffer);\n    const bytesNumber = randBuffer.length;\n    if (little) {\n        randBuffer = randBuffer.reverse();\n    }\n    let bigInt = BigInt(randBuffer.toString('hex'), 16);\n    if (signed && Math.floor(bigInt.toString('2').length / 8) >= bytesNumber) {\n        bigInt = bigInt.subtract(BigInt(2)\n            .pow(BigInt(bytesNumber * 8)));\n    }\n    return bigInt;\n}\n\n/**\n * Special case signed little ints\n * @param big\n * @param number\n * @returns {Buffer}\n */\nfunction toSignedLittleBuffer(big, number = 8) {\n    const bigNumber = BigInt(big);\n    const byteArray = [];\n    for (let i = 0; i < number; i++) {\n        byteArray[i] = bigNumber.shiftRight(8 * i)\n            .and(255);\n    }\n    return Buffer.from(byteArray);\n}\n\n/**\n * converts a big int to a buffer\n * @param bigInt {bigInt.BigInteger}\n * @param bytesNumber\n * @param little\n * @param signed\n * @returns {Buffer}\n */\nfunction readBufferFromBigInt(bigInt, bytesNumber, little = true, signed = false) {\n    bigInt = BigInt(bigInt);\n    const bitLength = bigInt.bitLength();\n\n    const bytes = Math.ceil(bitLength / 8);\n    if (bytesNumber < bytes) {\n        throw new Error('OverflowError: int too big to convert');\n    }\n    if (!signed && bigInt.lesser(BigInt(0))) {\n        throw new Error('Cannot convert to unsigned');\n    }\n    let below = false;\n    if (bigInt.lesser(BigInt(0))) {\n        below = true;\n        bigInt = bigInt.abs();\n    }\n\n    const hex = bigInt.toString('16')\n        .padStart(bytesNumber * 2, '0');\n    let l = Buffer.from(hex, 'hex');\n    if (little) {\n        l = l.reverse();\n    }\n\n    if (signed && below) {\n        if (little) {\n            let reminder = false;\n            if (l[0] !== 0) {\n                l[0] -= 1;\n            }\n            for (let i = 0; i < l.length; i++) {\n                if (l[i] === 0) {\n                    reminder = true;\n                    continue;\n                }\n                if (reminder) {\n                    l[i] -= 1;\n                    reminder = false;\n                }\n                l[i] = 255 - l[i];\n            }\n        } else {\n            l[l.length - 1] = 256 - l[l.length - 1];\n            for (let i = 0; i < l.length - 1; i++) {\n                l[i] = 255 - l[i];\n            }\n        }\n    }\n    return l;\n}\n\n/**\n * Generates a random long integer (8 bytes), which is optionally signed\n * @returns {BigInteger}\n */\nfunction generateRandomLong(signed = true) {\n    return readBigIntFromBuffer(generateRandomBytes(8), true, signed);\n}\n\n/**\n * .... really javascript\n * @param n {number}\n * @param m {number}\n * @returns {number}\n */\nfunction mod(n, m) {\n    return ((n % m) + m) % m;\n}\n\n/**\n * returns a positive bigInt\n * @param n {BigInt}\n * @param m {BigInt}\n * @returns {BigInt}\n */\nfunction bigIntMod(n, m) {\n    return ((n.remainder(m)).add(m)).remainder(m);\n}\n\n/**\n * Generates a random bytes array\n * @param count\n * @returns {Buffer}\n */\nfunction generateRandomBytes(count) {\n    return Buffer.from(crypto.randomBytes(count));\n}\n\n/**\n * Calculate the key based on Telegram guidelines, specifying whether it's the client or not\n * @param sharedKey\n * @param msgKey\n * @param client\n * @returns {{iv: Buffer, key: Buffer}}\n */\n\n/* CONTEST\nthis is mtproto 1 (mostly used for secret chats)\nasync function calcKey(sharedKey, msgKey, client) {\n    const x = client === true ? 0 : 8\n    const [sha1a, sha1b, sha1c, sha1d] = await Promise.all([\n        sha1(Buffer.concat([msgKey, sharedKey.slice(x, x + 32)])),\n        sha1(Buffer.concat([sharedKey.slice(x + 32, x + 48), msgKey, sharedKey.slice(x + 48, x + 64)])),\n        sha1(Buffer.concat([sharedKey.slice(x + 64, x + 96), msgKey])),\n        sha1(Buffer.concat([msgKey, sharedKey.slice(x + 96, x + 128)]))\n    ])\n    const key = Buffer.concat([sha1a.slice(0, 8), sha1b.slice(8, 20), sha1c.slice(4, 16)])\n    const iv = Buffer.concat([sha1a.slice(8, 20), sha1b.slice(0, 8), sha1c.slice(16, 20), sha1d.slice(0, 8)])\n    return {\n        key,\n        iv\n    }\n}\n\n */\n\n/**\n * Generates the key data corresponding to the given nonces\n * @param serverNonce\n * @param newNonce\n * @returns {{key: Buffer, iv: Buffer}}\n */\nasync function generateKeyDataFromNonce(serverNonce, newNonce) {\n    serverNonce = toSignedLittleBuffer(serverNonce, 16);\n    newNonce = toSignedLittleBuffer(newNonce, 32);\n    const [hash1, hash2, hash3] = await Promise.all([\n        sha1(Buffer.concat([newNonce, serverNonce])),\n        sha1(Buffer.concat([serverNonce, newNonce])),\n        sha1(Buffer.concat([newNonce, newNonce])),\n    ]);\n    const keyBuffer = Buffer.concat([hash1, hash2.slice(0, 12)]);\n    const ivBuffer = Buffer.concat([hash2.slice(12, 20), hash3, newNonce.slice(0, 4)]);\n    return {\n        key: keyBuffer,\n        iv: ivBuffer,\n    };\n}\n\nfunction convertToLittle(buf) {\n    const correct = Buffer.alloc(buf.length * 4);\n\n    for (let i = 0; i < buf.length; i++) {\n        correct.writeUInt32BE(buf[i], i * 4);\n    }\n    return correct;\n}\n\n/**\n * Calculates the SHA1 digest for the given data\n * @param data\n * @returns {Promise}\n */\nfunction sha1(data) {\n    const shaSum = crypto.createHash('sha1');\n    shaSum.update(data);\n    return shaSum.digest();\n}\n\n/**\n * Calculates the SHA256 digest for the given data\n * @param data\n * @returns {Promise}\n */\nfunction sha256(data) {\n    const shaSum = crypto.createHash('sha256');\n    shaSum.update(data);\n    return shaSum.digest();\n}\n\n/**\n * Fast mod pow for RSA calculation. a^b % n\n * @param a\n * @param b\n * @param n\n * @returns {bigInt.BigInteger}\n */\nfunction modExp(a, b, n) {\n    a = a.remainder(n);\n    let result = BigInt.one;\n    let x = a;\n    while (b.greater(BigInt.zero)) {\n        const leastSignificantBit = b.remainder(BigInt(2));\n        b = b.divide(BigInt(2));\n        if (leastSignificantBit.eq(BigInt.one)) {\n            result = result.multiply(x);\n            result = result.remainder(n);\n        }\n        x = x.multiply(x);\n        x = x.remainder(n);\n    }\n    return result;\n}\n\n/**\n * Gets the arbitrary-length byte array corresponding to the given integer\n * @param integer {any}\n * @param signed {boolean}\n * @returns {Buffer}\n */\nfunction getByteArray(integer, signed = false) {\n    const bits = integer.toString(2).length;\n    const byteLength = Math.floor((bits + 8 - 1) / 8);\n    return readBufferFromBigInt(BigInt(integer), byteLength, false, signed);\n}\n\n/**\n * returns a random int from min (inclusive) and max (inclusive)\n * @param min\n * @param max\n * @returns {number}\n */\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Sleeps a specified amount of time\n * @param ms time in milliseconds\n * @returns {Promise}\n */\nconst sleep = (ms) => new Promise((resolve) => {\n    setTimeout(resolve, ms);\n});\n\n/**\n * Helper to export two buffers of same length\n * @returns {Buffer}\n */\n\nfunction bufferXor(a, b) {\n    const res = [];\n    for (let i = 0; i < a.length; i++) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res);\n}\n\n/**\n * Checks if the obj is an array\n * @param obj\n * @returns {boolean}\n */\n/*\nCONTEST\nwe do'nt support array requests anyway\nfunction isArrayLike(obj) {\n    if (!obj) return false\n    const l = obj.length\n    if (typeof l != 'number' || l < 0) return false\n    if (Math.floor(l) !== l) return false\n    // fast check\n    if (l > 0 && !(l - 1 in obj)) return false\n    // more complete check (optional)\n    for (let i = 0; i < l; ++i) {\n        if (!(i in obj)) return false\n    }\n    return true\n}\n*/\n\n// Taken from https://stackoverflow.com/questions/18638900/javascript-crc32/18639999#18639999\nfunction makeCRCTable() {\n    let c;\n    const crcTable = [];\n    for (let n = 0; n < 256; n++) {\n        c = n;\n        for (let k = 0; k < 8; k++) {\n            c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        crcTable[n] = c;\n    }\n    return crcTable;\n}\n\nlet crcTable;\n\nfunction crc32(buf) {\n    if (!crcTable) {\n        crcTable = makeCRCTable();\n    }\n    if (!Buffer.isBuffer(buf)) {\n        buf = Buffer.from(buf);\n    }\n    let crc = -1;\n\n    for (let index = 0; index < buf.length; index++) {\n        const byte = buf[index];\n        crc = crcTable[(crc ^ byte) & 0xff] ^ (crc >>> 8);\n    }\n    return (crc ^ (-1)) >>> 0;\n}\n\nmodule.exports = {\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    generateRandomLong,\n    mod,\n    crc32,\n    generateRandomBytes,\n    // calcKey,\n    generateKeyDataFromNonce,\n    sha1,\n    sha256,\n    bigIntMod,\n    modExp,\n    getRandomInt,\n    sleep,\n    getByteArray,\n    // isArrayLike,\n    toSignedLittleBuffer,\n    convertToLittle,\n    bufferXor,\n};\n","/**\n * Converts a Telegram's RPC Error to a Python error.\n * @param rpcError the RPCError instance\n * @param request the request that caused this error\n * @constructor the RPCError as a Python exception that represents this error\n */\nconst { RPCError } = require('./RPCBaseErrors');\nconst { rpcErrorRe } = require('./RPCErrorList');\n\nfunction RPCMessageToError(rpcError, request) {\n    for (const [msgRegex, Cls] of rpcErrorRe) {\n        const m = rpcError.errorMessage.match(msgRegex);\n        if (m) {\n            const capture = m.length === 2 ? parseInt(m[1], 10) : undefined;\n            return new Cls({\n                request,\n                capture,\n            });\n        }\n    }\n\n    return new RPCError(rpcError.errorMessage, request);\n}\n\nconst Common = require('./Common');\nconst RPCBaseErrors = require('./RPCBaseErrors');\nconst RPCErrorList = require('./RPCErrorList');\n\nmodule.exports = {\n    RPCMessageToError,\n    ...Common,\n    ...RPCBaseErrors,\n    ...RPCErrorList,\n};\n","const {\n    parseTl,\n    serializeBytes,\n    serializeDate,\n} = require('./generationHelpers');\nconst {\n    toSignedLittleBuffer,\n} = require('../Helpers');\n\nconst tlContent = require('./apiTl');\nconst schemeContent = require('./schemaTl');\n\n/* CONTEST\nconst NAMED_AUTO_CASTS = new Set([\n    'chatId,int'\n])\nconst NAMED_BLACKLIST = new Set([\n    'discardEncryption'\n])\nconst AUTO_CASTS = new Set([\n    'InputPeer',\n    'InputChannel',\n    'InputUser',\n    'InputDialogPeer',\n    'InputNotifyPeer',\n    'InputMedia',\n    'InputPhoto',\n    'InputMessage',\n    'InputDocument',\n    'InputChatPhoto'\n])\n\n */\n// eslint-disable-next-line no-restricted-globals\nconst CACHING_SUPPORTED = typeof self !== 'undefined' && self.localStorage !== undefined;\n\nconst CACHE_KEY = 'GramJs:apiCache';\n\nfunction buildApiFromTlSchema() {\n    let definitions;\n    const fromCache = CACHING_SUPPORTED && loadFromCache();\n\n    if (fromCache) {\n        definitions = fromCache;\n    } else {\n        definitions = loadFromTlSchemas();\n\n        if (CACHING_SUPPORTED) {\n            localStorage.setItem(CACHE_KEY, JSON.stringify(definitions));\n        }\n    }\n\n    return mergeWithNamespaces(\n        createClasses('constructor', definitions.constructors),\n        createClasses('request', definitions.requests),\n    );\n}\n\nfunction loadFromCache() {\n    const jsonCache = localStorage.getItem(CACHE_KEY);\n    return jsonCache && JSON.parse(jsonCache);\n}\n\nfunction loadFromTlSchemas() {\n    const [constructorParamsApi, functionParamsApi] = extractParams(tlContent);\n    const [constructorParamsSchema, functionParamsSchema] = extractParams(schemeContent);\n    const constructors = [].concat(constructorParamsApi, constructorParamsSchema);\n    const requests = [].concat(functionParamsApi, functionParamsSchema);\n\n    return {\n        constructors,\n        requests,\n    };\n}\n\nfunction mergeWithNamespaces(obj1, obj2) {\n    const result = { ...obj1 };\n\n    Object.keys(obj2)\n        .forEach((key) => {\n            if (typeof obj2[key] === 'function' || !result[key]) {\n                result[key] = obj2[key];\n            } else {\n                Object.assign(result[key], obj2[key]);\n            }\n        });\n\n    return result;\n}\n\nfunction extractParams(fileContent) {\n    const f = parseTl(fileContent);\n    const constructors = [];\n    const functions = [];\n    for (const d of f) {\n        if (d.isFunction) {\n            functions.push(d);\n        } else {\n            constructors.push(d);\n        }\n    }\n    return [constructors, functions];\n}\n\nfunction argToBytes(x, type) {\n    switch (type) {\n        case 'int': {\n            const i = Buffer.alloc(4);\n            i.writeInt32LE(x, 0);\n            return i;\n        }\n        case 'long':\n            return toSignedLittleBuffer(x, 8);\n        case 'int128':\n            return toSignedLittleBuffer(x, 16);\n        case 'int256':\n            return toSignedLittleBuffer(x, 32);\n        case 'double': {\n            const d = Buffer.alloc(8);\n            d.writeDoubleLE(x, 0);\n            return d;\n        }\n        case 'string':\n            return serializeBytes(x);\n        case 'Bool':\n            return x ? Buffer.from('b5757299', 'hex') : Buffer.from('379779bc', 'hex');\n        case 'true':\n            return Buffer.alloc(0);\n        case 'bytes':\n            return serializeBytes(x);\n        case 'date':\n            return serializeDate(x);\n        default:\n            return x.getBytes();\n    }\n}\n\n/*\nCONTEST\nasync function getInputFromResolve(utils, client, peer, peerType) {\n    switch (peerType) {\n        case 'InputPeer':\n            return utils.getInputPeer(await client.getInputEntity(peer))\n        case 'InputChannel':\n            return utils.getInputChannel(await client.getInputEntity(peer))\n        case 'InputUser':\n            return utils.getInputUser(await client.getInputEntity(peer))\n        case 'InputDialogPeer':\n            return await client._getInputDialog(peer)\n        case 'InputNotifyPeer':\n            return await client._getInputNotify(peer)\n        case 'InputMedia':\n            return utils.getInputMedia(peer)\n        case 'InputPhoto':\n            return utils.getInputPhoto(peer)\n        case 'InputMessage':\n            return utils.getInputMessage(peer)\n        case 'InputDocument':\n            return utils.getInputDocument(peer)\n        case 'InputChatPhoto':\n            return utils.getInputChatPhoto(peer)\n        case 'chatId,int' :\n            return await client.getPeerId(peer, false)\n        default:\n            throw new Error('unsupported peer type : ' + peerType)\n    }\n}\n*/\nfunction getArgFromReader(reader, arg) {\n    if (arg.isVector) {\n        if (arg.useVectorId) {\n            reader.readInt();\n        }\n        const temp = [];\n        const len = reader.readInt();\n        arg.isVector = false;\n        for (let i = 0; i < len; i++) {\n            temp.push(getArgFromReader(reader, arg));\n        }\n        arg.isVector = true;\n        return temp;\n    } else if (arg.flagIndicator) {\n        return reader.readInt();\n    } else {\n        switch (arg.type) {\n            case 'int':\n                return reader.readInt();\n            case 'long':\n                return reader.readLong();\n            case 'int128':\n                return reader.readLargeInt(128);\n            case 'int256':\n                return reader.readLargeInt(256);\n            case 'double':\n                return reader.readDouble();\n            case 'string':\n                return reader.tgReadString();\n            case 'Bool':\n                return reader.tgReadBool();\n            case 'true':\n                return true;\n            case 'bytes':\n                return reader.tgReadBytes();\n            case 'date':\n                return reader.tgReadDate();\n            default:\n                if (!arg.skipConstructorId) {\n                    return reader.tgReadObject();\n                } else {\n                    throw new Error(`Unknown type ${arg}`);\n                }\n        }\n    }\n}\n\nfunction createClasses(classesType, params) {\n    const classes = {};\n    for (const classParams of params) {\n        const {\n            name,\n            constructorId,\n            subclassOfId,\n            argsConfig,\n            namespace,\n            result,\n        } = classParams;\n        const fullName = [namespace, name].join('.')\n            .replace(/^\\./, '');\n\n        class VirtualClass {\n            static CONSTRUCTOR_ID = constructorId;\n\n            static SUBCLASS_OF_ID = subclassOfId;\n\n            static className = fullName;\n\n            static classType = classesType;\n\n            CONSTRUCTOR_ID = constructorId;\n\n            SUBCLASS_OF_ID = subclassOfId;\n\n            className = fullName;\n\n            classType = classesType;\n\n            constructor(args) {\n                args = args || {};\n                Object.keys(args)\n                    .forEach((argName) => {\n                        this[argName] = args[argName];\n                    });\n            }\n\n            static fromReader(reader) {\n                const args = {};\n\n                for (const argName in argsConfig) {\n                    if (argsConfig.hasOwnProperty(argName)) {\n                        const arg = argsConfig[argName];\n                        if (arg.isFlag) {\n                            const flagGroupSuffix = arg.flagGroup > 1 ? arg.flagGroup : '';\n                            const flagValue = args[`flags${flagGroupSuffix}`] & (1 << arg.flagIndex);\n                            if (arg.type === 'true') {\n                                args[argName] = Boolean(flagValue);\n                                continue;\n                            }\n\n                            args[argName] = flagValue ? getArgFromReader(reader, arg) : undefined;\n                        } else {\n                            args[argName] = getArgFromReader(reader, arg);\n                        }\n                    }\n                }\n                return new VirtualClass(args);\n            }\n\n            getBytes() {\n                // The next is pseudo-code:\n                const idForBytes = this.CONSTRUCTOR_ID;\n                const c = Buffer.alloc(4);\n                c.writeUInt32LE(idForBytes, 0);\n                const buffers = [c];\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (argsConfig[arg].isFlag) {\n                            if ((this[arg] === false && argsConfig[arg].type === 'true')\n                                || this[arg] === undefined) {\n                                continue;\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            if (argsConfig[arg].useVectorId) {\n                                buffers.push(Buffer.from('15c4b51c', 'hex'));\n                            }\n                            const l = Buffer.alloc(4);\n                            l.writeInt32LE(this[arg].length, 0);\n                            buffers.push(l, Buffer.concat(this[arg].map((x) => argToBytes(x, argsConfig[arg].type))));\n                        } else if (argsConfig[arg].flagIndicator) {\n                            if (!Object.values(argsConfig)\n                                .some((f) => f.isFlag)) {\n                                buffers.push(Buffer.alloc(4));\n                            } else {\n                                let flagCalculate = 0;\n                                for (const f in argsConfig) {\n                                    if (argsConfig[f].isFlag) {\n                                        if ((this[f] === false && argsConfig[f].type === 'true')\n                                            || this[f] === undefined) {\n                                            flagCalculate |= 0;\n                                        } else {\n                                            flagCalculate |= 1 << argsConfig[f].flagIndex;\n                                        }\n                                    }\n                                }\n                                const f = Buffer.alloc(4);\n                                f.writeUInt32LE(flagCalculate, 0);\n                                buffers.push(f);\n                            }\n                        } else {\n                            buffers.push(argToBytes(this[arg], argsConfig[arg].type));\n\n                            if (this[arg] && typeof this[arg].getBytes === 'function') {\n                                let boxed = (argsConfig[arg].type.charAt(argsConfig[arg].type.indexOf('.') + 1));\n                                boxed = boxed === boxed.toUpperCase();\n                                if (!boxed) {\n                                    buffers.shift();\n                                }\n                            }\n                        }\n                    }\n                }\n                return Buffer.concat(buffers);\n            }\n\n            readResult(reader) {\n                if (classesType !== 'request') {\n                    throw new Error('`readResult()` called for non-request instance');\n                }\n\n                const m = result.match(/Vector<(int|long)>/);\n                if (m) {\n                    reader.readInt();\n                    const temp = [];\n                    const len = reader.readInt();\n                    if (m[1] === 'int') {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readInt());\n                        }\n                    } else {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readLong());\n                        }\n                    }\n                    return temp;\n                } else {\n                    return reader.tgReadObject();\n                }\n            }\n\n            /* CONTEST\n            async resolve(client, utils) {\n\n                if (classesType !== 'request') {\n                    throw new Error('`resolve()` called for non-request instance')\n                }\n\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (!AUTO_CASTS.has(argsConfig[arg].type)) {\n                            if (!NAMED_AUTO_CASTS.has(`${argsConfig[arg].name},${argsConfig[arg].type}`)) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isFlag) {\n                            if (!this[arg]) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            const temp = []\n                            for (const x of this[arg]) {\n                                temp.push(await getInputFromResolve(utils, client, x, argsConfig[arg].type))\n                            }\n                            this[arg] = temp\n                        } else {\n                            this[arg] = await getInputFromResolve(utils, client, this[arg], argsConfig[arg].type)\n                        }\n                    }\n                }\n            } */\n        }\n\n        if (namespace) {\n            if (!classes[namespace]) {\n                classes[namespace] = {};\n            }\n            classes[namespace][name] = VirtualClass;\n        } else {\n            classes[name] = VirtualClass;\n        }\n    }\n\n    return classes;\n}\n\nmodule.exports = buildApiFromTlSchema();\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n"],"names":["IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","undefined","batchedUpdates","throttledLocalDbUpdate","throttle","postMessage","type","convertToVirtualClass","value","Uint8Array","Buffer","from","Object","keys","length","BigInt","Array","isArray","map","VirtualClass","className","split","reduce","acc","field","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","rest","omitVirtualClassFields","key","initial","_initial","valueVirtualClass","acc2","key2","name","Proxy","get","target","prop","Reflect","set","push","getFileId","fill","Foreman","readBigIntFromBuffer","generateRandomBytes","toString","replace","SERVICE_NOTIFICATIONS_USER_ID","runThrottledForLoadTopChats","cb","runDebouncedForLoadFullChat","debounce","addActionHandler","async","global","actions","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","getGlobal","currentChatIds","values","byTabId","id","tabId","selectCurrentMessageList","chatId","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","threadId","MAIN_THREAD_ID","getCurrentTabId","payload","currentUserId","chat","selectChat","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","isMin","callApi","user","selectUser","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","openChat","selectThreadOriginChat","TMP_CHAT_ID","result","openPreviousChat","addUsers","buildCollectionByKey","users","setGlobal","chatFullInfo","fullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","listType","onReplace","shouldReplace","getOrderDate","lastMessage","date","joinDate","chats","isFullyLoaded","DEBUG","console","error","listIds","oldestChat","byId","selectIsChatPinned","sort","chat1","chat2","loadChats","force","loadFullChat","lastLocalMessage","selectLastServiceNotification","message","isMuted","updateChat","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","openLimitReachedModal","limit","showDialog","data","hasErrorKey","channelId","accessHash","selectTabState","userId","leaveChat","getAvatarPhoto","url","res","fetch","ab","arrayBuffer","body","DownloadRes","file","part","part_total","buf","size","err","ERR","pack","getPbData","blob","Blob","blob1","thumbUrl","resizeImage","thumbBlob","fetchBlob","dataUri","blobToDataUri","cacheApi","MEDIA_CACHE_NAME_WAI","thumbnail","width","height","promptInit","userIds","userIdInt","parseInt","UserIdFirstBot","chatIdsDeleted","a","b","localStorage","getItem","init_system_content","DEFAULT_PROMPT","avatarHash","photos","DEFAULT_AVATARS","avatarUrl","isSelf","isPremium","firstName","usernames","bio","DEFAULT_CREATE_USER_BIO","botInfo","aiBot","enableAi","chatGptConfig","api_key","max_history_length","modelConfig","ChatModelConfig","UserIdChatGpt4","model","botId","commands","DEFAULT_BOT_COMMANDS","DEFAULT_CHATGPT_AI_COMMANDS","cmd","chatFolders","ChatMsg","activeChatFolderRow","activeChatFolder","window","sessionStorage","chatFolderById","forEach","row","orderedIds","activeFolderId","includedChatIds","userStatusesById","addChats","updateChatListIds","addUserStatuses","editChatFolder","folderUpdate","UserIdChatGpt","sendBotCommand","command","e","createdChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","maxId","Math","max","recommendedId","description","newFolder","folderIds","setActiveChatFolder","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","phoneNumber","startAttach","attach","localUser","selectUserByPhoneNumber","updateUser","fetchChatByPhoneNumber","showNotification","langProvider","openAttachMenuFromLink","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","open","hostParts","part1","part2","part3","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","stickerSetInfo","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","username","inviteHash","voicechat","livestream","slug","substring","startParam","start","selectCurrentChat","c","channelPostId","currentChat","bot","getAttachBotOrNotify","callAttachBot","isCurrentChat","fetchChatByUsername","startBot","param","usernameChat","selectChatByUsername","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","ensureIsSuperGroup","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","updateManagementProgress","ManagementProgress","Promise","all","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","groups","addedById","group","isForum","forDiscussionIds","fullChat","setItem","requestedDraft","isChatBasicGroup","offset","membersCount","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","el","topic","accTopic","offsetTopicId","offsetDate","offsetId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","draftsById","draft","replaceThreadParam","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","initChats","firstLoad","setTimeout","getActions","MsgCommandChatLab","createChatGpt","isFullDraftSync","lastLocalServiceMessage","LoadAllChats","byChatId","threadsById","lastViewportIds","chatIds","shift","totalChatCount","chatFoldersById","tabStates","visibleChats","flatMap","visibleUsers","selectVisibleUsers","replaceUsers","replaceUserStatuses","replaceChats","updateChats","replaceChatListIds","newChats","notificationsChat","updateChatListSecondaryInfo","thread","selectThread","selectDraft","isLocal","replyingToById","groupCall","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","stickerSet","loadStickers","localChat","isUserBot","newChat","migrateChat","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","require","crypto","buffer","little","signed","randBuffer","bytesNumber","reverse","bigInt","floor","subtract","pow","toSignedLittleBuffer","big","number","bigNumber","byteArray","shiftRight","and","readBufferFromBigInt","bitLength","ceil","Error","lesser","below","abs","hex","padStart","l","reminder","randomBytes","sha1","shaSum","createHash","update","digest","crcTable","module","exports","generateRandomLong","mod","n","crc32","k","makeCRCTable","isBuffer","crc","index","byte","generateKeyDataFromNonce","serverNonce","newNonce","hash1","hash2","hash3","slice","iv","sha256","bigIntMod","remainder","modExp","one","x","greater","zero","leastSignificantBit","divide","eq","multiply","getRandomInt","min","random","sleep","ms","resolve","getByteArray","integer","bits","byteLength","convertToLittle","correct","alloc","writeUInt32BE","bufferXor","RPCError","rpcErrorRe","Common","RPCBaseErrors","RPCErrorList","RPCMessageToError","rpcError","request","msgRegex","Cls","errorMessage","capture","parseTl","serializeBytes","serializeDate","tlContent","schemeContent","CACHING_SUPPORTED","CACHE_KEY","extractParams","fileContent","f","functions","d","isFunction","argToBytes","writeInt32LE","writeDoubleLE","getArgFromReader","reader","arg","isVector","useVectorId","readInt","temp","len","flagIndicator","readLong","readLargeInt","readDouble","tgReadString","tgReadBool","tgReadBytes","tgReadDate","skipConstructorId","tgReadObject","createClasses","classesType","classes","classParams","constructorId","subclassOfId","argsConfig","namespace","fullName","constructor","args","_defineProperty","argName","this","static","isFlag","flagValue","flagGroup","flagIndex","idForBytes","writeUInt32LE","buffers","flagCalculate","boxed","charAt","indexOf","toUpperCase","readResult","definitions","fromCache","jsonCache","JSON","parse","loadFromCache","constructorParamsApi","functionParamsApi","constructorParamsSchema","functionParamsSchema","requests","loadFromTlSchemas","stringify","obj1","obj2","mergeWithNamespaces","buildApiFromTlSchema","Deferred","promise","reject"],"sourceRoot":""}